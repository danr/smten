Mon Jan  6 13:56:05 EST 2014

Another Arch-extract performance bug. The following query:

nonArchStepNotContainedShared:
 seq = [(1,"RL_instructionFetch"),(7,"RL_imem_move"),(8,"RL_dmem_move"),(6,"RL_writeback")]
 worklist = [
    [(1,"RL_instructionFetch"),(7,"RL_imem_move"),(8,"RL_dmem_move"),(7,"RL_imem_move")],
    [(1,"RL_instructionFetch"),(7,"RL_imem_move"),(8,"RL_dmem_move"),(8,"RL_dmem_move")],
    [(1,"RL_instructionFetch"),(7,"RL_imem_move"),(3,"RL_branchTaken"),(5,"RL_memory"),(1,"RL_instructionFetch")],
    [(1,"RL_instructionFetch"),(7,"RL_imem_move"),(3,"RL_branchTaken"),(5,"RL_memory"),(2,"RL_instructionDecode")],
    [(1,"RL_instructionFetch"),(7,"RL_imem_move"),(3,"RL_branchTaken"),(5,"RL_memory"),(3,"RL_branchTaken")],
    [(1,"RL_instructionFetch"),(7,"RL_imem_move"),(3,"RL_branchTaken"),(5,"RL_memory"),(4,"RL_execute")],
    [(1,"RL_instructionFetch"),(7,"RL_imem_move"),(3,"RL_branchTaken"),(5,"RL_memory"),(5,"RL_memory")],
    [(1,"RL_instructionFetch"),(7,"RL_imem_move"),(3,"RL_branchTaken"),(5,"RL_memory"),(6,"RL_writeback")],
    [(1,"RL_instructionFetch"),(7,"RL_imem_move"),(3,"RL_branchTaken"),(5,"RL_memory"),(7,"RL_imem_move")],
    [(1,"RL_instructionFetch"),(7,"RL_imem_move"),(3,"RL_branchTaken"),(5,"RL_memory"),(8,"RL_dmem_move")],
    [(1,"RL_instructionFetch"),(7,"RL_imem_move"),(8,"RL_dmem_move"),(3,"RL_branchTaken"),(1,"RL_instructionFetch")],
    [(1,"RL_instructionFetch"),(7,"RL_imem_move"),(8,"RL_dmem_move"),(3,"RL_branchTaken"),(2,"RL_instructionDecode")],
    [(1,"RL_instructionFetch"),(7,"RL_imem_move"),(8,"RL_dmem_move"),(3,"RL_branchTaken"),(3,"RL_branchTaken")],
    [(1,"RL_instructionFetch"),(7,"RL_imem_move"),(8,"RL_dmem_move"),(3,"RL_branchTaken"),(4,"RL_execute")],
    [(1,"RL_instructionFetch"),(7,"RL_imem_move"),(8,"RL_dmem_move"),(3,"RL_branchTaken"),(5,"RL_memory")],
    [(1,"RL_instructionFetch"),(7,"RL_imem_move"),(8,"RL_dmem_move"),(3,"RL_branchTaken"),(6,"RL_writeback")],
    [(1,"RL_instructionFetch"),(7,"RL_imem_move"),(8,"RL_dmem_move"),(3,"RL_branchTaken"),(7,"RL_imem_move")],
    [(1,"RL_instructionFetch"),(7,"RL_imem_move"),(8,"RL_dmem_move"),(3,"RL_branchTaken"),(8,"RL_dmem_move")]]

Mon Jan  6 17:35:19 EST 2014

I have replicated the test case out of the context of archExtract.
Now I can start minimizing it.

These seem to be the important bits:
 architecturalSeqs = rr2 [[1,7,2]],
 possibleSeqs = rr2 [[4]]
 seq0 = map ((!!) rulelist) [0, 6, 7, 5]

Let me first verify the problem does not appear in the master branch, then
step through the code with these arguments and see how it simplifies.

I have verified the problem does not occur on the master branch.

Mon Jan  6 18:51:26 EST 2014

I think I've gotten it as small as I can tonight. It has a little ways to go,
but already there is something funny. The difference between h and h' appears
to be crucial, but I don't see any difference between them:
  h = head [[1,7,2]]
  h' = [1, 7, 2]

Something to ponder.
 
Tue Jan  7 20:12:47 EST 2014

Simplified it much further. Now we have:

  let seq0 = map ((!!) rulelist) [7, 5]
      seq2 = map ((!!) rulelist) [1, 3]

  run_symbolic (solver ("nonArchStep_" ++ show seq0)) $ do
    s <- freeInstance ctor_mkCore
    let ms0 = applys seq0 s
        ms2 = applys seq2 s
    assert (ms0 /= ms2)

Now that appears to be the simplest I can make the query.
Can I make the rules simpler? What rules are they?

[7, 5] = [dmem_move, writeback]
[1, 3] = [decode, execute]

We could also reduce the (==). I bet it's array equality.
It's register file equality. What does each rule do to the register file?
  dmem_move: Nothing, but is guarded symbolically.
  writeback: guarded by changes from dmem_move, conditionally writes to rf.
  decode: guarded symbolically. reads from rf.
  execute: guarded symbolically. does not touch rf.

decode and execute are hefty rules. Can we pick different ones and see the
same behavior?

For example... let's try fetch instead of execute at the end.

No. It appears to be this special combination of rules causing the problem.
Let me work on simplifying the rules as much as possible then.

dmem_move:
  Reads an address from dmem request FIFO.
  Use that address to read a value from memory.
  Writes the memory value to dmem response FIFO.

writeback:
  Read a value from memwb FIFO.
  Conditioned on that value:
    read data from dmem response FIFO, and use it to either
        return Just ? or Nothing
  If Just was returned, write to the register file.
    

