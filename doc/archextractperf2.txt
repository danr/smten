Mon Jan  6 13:56:05 EST 2014

Another Arch-extract performance bug. The following query:

nonArchStepNotContainedShared:
 seq = [(1,"RL_instructionFetch"),(7,"RL_imem_move"),(8,"RL_dmem_move"),(6,"RL_writeback")]
 worklist = [
    [(1,"RL_instructionFetch"),(7,"RL_imem_move"),(8,"RL_dmem_move"),(7,"RL_imem_move")],
    [(1,"RL_instructionFetch"),(7,"RL_imem_move"),(8,"RL_dmem_move"),(8,"RL_dmem_move")],
    [(1,"RL_instructionFetch"),(7,"RL_imem_move"),(3,"RL_branchTaken"),(5,"RL_memory"),(1,"RL_instructionFetch")],
    [(1,"RL_instructionFetch"),(7,"RL_imem_move"),(3,"RL_branchTaken"),(5,"RL_memory"),(2,"RL_instructionDecode")],
    [(1,"RL_instructionFetch"),(7,"RL_imem_move"),(3,"RL_branchTaken"),(5,"RL_memory"),(3,"RL_branchTaken")],
    [(1,"RL_instructionFetch"),(7,"RL_imem_move"),(3,"RL_branchTaken"),(5,"RL_memory"),(4,"RL_execute")],
    [(1,"RL_instructionFetch"),(7,"RL_imem_move"),(3,"RL_branchTaken"),(5,"RL_memory"),(5,"RL_memory")],
    [(1,"RL_instructionFetch"),(7,"RL_imem_move"),(3,"RL_branchTaken"),(5,"RL_memory"),(6,"RL_writeback")],
    [(1,"RL_instructionFetch"),(7,"RL_imem_move"),(3,"RL_branchTaken"),(5,"RL_memory"),(7,"RL_imem_move")],
    [(1,"RL_instructionFetch"),(7,"RL_imem_move"),(3,"RL_branchTaken"),(5,"RL_memory"),(8,"RL_dmem_move")],
    [(1,"RL_instructionFetch"),(7,"RL_imem_move"),(8,"RL_dmem_move"),(3,"RL_branchTaken"),(1,"RL_instructionFetch")],
    [(1,"RL_instructionFetch"),(7,"RL_imem_move"),(8,"RL_dmem_move"),(3,"RL_branchTaken"),(2,"RL_instructionDecode")],
    [(1,"RL_instructionFetch"),(7,"RL_imem_move"),(8,"RL_dmem_move"),(3,"RL_branchTaken"),(3,"RL_branchTaken")],
    [(1,"RL_instructionFetch"),(7,"RL_imem_move"),(8,"RL_dmem_move"),(3,"RL_branchTaken"),(4,"RL_execute")],
    [(1,"RL_instructionFetch"),(7,"RL_imem_move"),(8,"RL_dmem_move"),(3,"RL_branchTaken"),(5,"RL_memory")],
    [(1,"RL_instructionFetch"),(7,"RL_imem_move"),(8,"RL_dmem_move"),(3,"RL_branchTaken"),(6,"RL_writeback")],
    [(1,"RL_instructionFetch"),(7,"RL_imem_move"),(8,"RL_dmem_move"),(3,"RL_branchTaken"),(7,"RL_imem_move")],
    [(1,"RL_instructionFetch"),(7,"RL_imem_move"),(8,"RL_dmem_move"),(3,"RL_branchTaken"),(8,"RL_dmem_move")]]

Mon Jan  6 17:35:19 EST 2014

I have replicated the test case out of the context of archExtract.
Now I can start minimizing it.

These seem to be the important bits:
 architecturalSeqs = rr2 [[1,7,2]],
 possibleSeqs = rr2 [[4]]
 seq0 = map ((!!) rulelist) [0, 6, 7, 5]

Let me first verify the problem does not appear in the master branch, then
step through the code with these arguments and see how it simplifies.

I have verified the problem does not occur on the master branch.

Mon Jan  6 18:51:26 EST 2014

I think I've gotten it as small as I can tonight. It has a little ways to go,
but already there is something funny. The difference between h and h' appears
to be crucial, but I don't see any difference between them:
  h = head [[1,7,2]]
  h' = [1, 7, 2]

Something to ponder.
 
Tue Jan  7 20:12:47 EST 2014

Simplified it much further. Now we have:

  let seq0 = map ((!!) rulelist) [7, 5]
      seq2 = map ((!!) rulelist) [1, 3]

  run_symbolic (solver ("nonArchStep_" ++ show seq0)) $ do
    s <- freeInstance ctor_mkCore
    let ms0 = applys seq0 s
        ms2 = applys seq2 s
    assert (ms0 /= ms2)

Now that appears to be the simplest I can make the query.
Can I make the rules simpler? What rules are they?

[7, 5] = [dmem_move, writeback]
[1, 3] = [decode, execute]

We could also reduce the (==). I bet it's array equality.
It's register file equality. What does each rule do to the register file?
  dmem_move: Nothing, but is guarded symbolically.
  writeback: guarded by changes from dmem_move, conditionally writes to rf.
  decode: guarded symbolically. reads from rf.
  execute: guarded symbolically. does not touch rf.

decode and execute are hefty rules. Can we pick different ones and see the
same behavior?

For example... let's try fetch instead of execute at the end.

No. It appears to be this special combination of rules causing the problem.
Let me work on simplifying the rules as much as possible then.

dmem_move:
  Reads an address from dmem request FIFO.
  Use that address to read a value from memory.
  Writes the memory value to dmem response FIFO.

writeback:
  Read the dmem response FIFO. Based on its value either do or don't write to
  the register file.

decode:
  Read from instRespQ.first, and write the value to idexBuf.

execute:
  Write an arbitrary register with an arbitrary value conditioned on the value
  of idexBuf.first.

That's as simple as the bsv rules are going to get. The next question is, can
I replicate this in pure smten code, instead of going through the bsv
compiler?

The first couple rules seem to do the following:
  Write to the register file conditioned on the value of an arbitrary memory
  location.

The second couple of rules seem to:
  Write an arbitrary register (not in rf) with an arbitrary value conditioned
  on a symbolic value.

Let me try to replicate this in pure smten code.

A.1. Create a symbolic array to represent memory.
A.2. Create a symbolic index into memory array.
A.3. Read the value of the memory at that index.
A.4. Create a symbolic array to represent the reg file.
A.5. Based on that value, either do or don't write to the reg file addr 0, val 0.

Good news! I managed to remove the second set of rules. Now all that matters
are dmem_move and writeback. This should be much more doable.

Yup! I got it. Now to minimize some more to figure out what's up.

Somehow the bounds of rf2 are getting confused.

Okay. I've got it:
  run_symbolic stp $ do
    value <- mplus (return True) (mplus (return False) (error "Boom!"))
    let rf = (0 :: Int, 1 :: Int)
        rf2 = if value then id rf else rf
    assert (range rf2 == range rf2)


And even further minimized:
    bar :: Bool -> Bool
    bar x = if x then True else (x && bar x)

    main :: IO ()
    main = do
     r <- run_symbolic yices2 $ do
            value <- mplus (return True) (return (error "Boom!"))
            assert (bar value)
     putStrLn (show r)

Looks like 'value' is treated as symbolic to 'bar', which as we know, only
works currently if the argument is known to be concretely True.

Let's look at what value really looks like:

value = ite (VarF "p") True _|_
  = BoolF p (!p) _|_, where p = VarFF "p"

q = bar value =
        ite (BoolF p (!p) _|_)
            True
            ((BoolF p (!p) _|_) && q')
 

So the answer is, yes, this really does look like a symbolic thing.

Why does this not cause any issue on the master branch? Because the explicit
error is replaced with a variable, thus making things finite? Except, they
aren't finite?

Actually, this is a bug in the master branch. I'm puzzled as to why we don't
run into it on the master branch when we do arch-extract. But this is the
problem. If I change the Array implementation to return a value like 0 instead
of _|_, then the reimpl branch finishes. I'm not convinced it's quite as fast
as the master branch, but it's certainly not unreasonable. I'm also slightly
puzzled as to why my fix works.

I should probably time them to see. reimpl takes 23 seconds outputting
everything to /dev/null.

