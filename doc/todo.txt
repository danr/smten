
Haskell Features::
* support negative literals?
* support hex literals
* default methods in classes?
* allow arbitrary patterns in lambda expression arguments.
    example: \(Foo x) -> x+1
* add support for list sequences
    example: [1..5]
* list comprehension.
* support for pattern guards?
* support for pattern bindings: x@(...)
* Variable operators: `foo`.
* pattern matching in do bind notation.
* pattern matching against bit vectors
* support type synonyms? 
* auto derive Show
* recursive let blocks
* modularity support
* automatically import Prelude
* supply operator precedence as expected for default operators

Test Type Checking::
* Verify we check for the instance or context for every method call
* Verify we check for too many arguments in a ConP, or too few
* Verify we check for undefined variables
* Verify we can't over apply a type, for example: Maybe Integer Bool.
* Verify we can't declare the same variable twice.
* Verify all clauses have to have the same number of args.
* Verify recursive definitions in lets aren't allowed (self recursion)
* Verify ambiguous types aren't allowed
* Verify a type constructor used has been declared somewhere.
* Verify a free variable in an expression is not allowed.
* Verify all methods have been defined for a class instance.
* Verify you can't refer to a nonexistent type
* Verify we can't use a made up data constructor: ex: Answer True

Type System::
* give a nice message if there's a type ambiguity?
    That is, anything with ~?
* Reimplement TypeCheck to make use of constraint generation from TypeInfer?
* move TypeInfer, TypeCheck and TypeSolve into a Type/ folder?
* Implement enough math somewhere to know that
  Bit #3  -> Bit #4 -> Bit #7 is a valid subtype of
  Bit #m  -> Bit #n -> Bit #(m+n)

  Because otherwise bitvector concatentation is really annoying to use.

Front End::
* line numbers for non-syntactic errors would be nice.
* Understand all the conflicts in the parser.
I suspect many of the reduce/reduce are from:
    foo :: (Foo a) -> Sludge
vs. foo :: (Foo a) => Sludge
* support parser-error layout rule.
    For example: (let foo = bar in foo x)
* Report an error if module name doesn't match source file name.
* allow multiply specified imports

Enoch::
* Don't require ScopedTypeVariables in derive_SeriableE.
* Should SeriableE be (TExp a -> Maybe a), and (a -> TExp a),
  or just: (Exp -> Maybe a) and (a -> Exp)?

Pretty Printer::
* don't print out builtin prelude?
* do notation <- doesn't work with explicit type (parser bug?)

Performance::
* Play with GHC Sparks and non-strict state monads
* Add speculative elaboration to elaborator
* Compile seri to Haskell
* Add support for sharing in generated queries (?)
* Use the yices1 native interface where possible (everywhere?)

Solvers::
* Figure out how to test all the different solvers more completely
* Add minisat as a solver (requires CNF)
* Add Z3 as a solver

Static Analysis::
* Add static check for exhaustive case statements
* Add static check for concreteness of queries

SMT Syntax::
* Remove bv-left-shift0 from SMT syntax, switch to more general bvshl
  described by SMTLIB2
* Remove bv-zero-extend from SMT syntax, use SMTLIB2 alternative

Dealing with Free Things::
* Elaborator needs to do delambdafication for primitive functions to avoid
  unnecessary background theories (but maybe only for backends which don't
  support those theories?)
* what happens if we realize a free integer variable which is a dont-care?
* interpret function evidence
* interpret char evidence (?)
* Figure out how to give an instance of Free for just those function types
  that we support
* Don't allow deriving of Free for recursive data types
* Get rid of the __prim_free primitive
* Define SMT theory classes and add a solver phantom type to free and Query.

Bugs::
* seriq2 for SquaresRaw... result differs from yices1 and yices2. Why?
  seriq1 seg faults on that same example randomly
    (in GC evacuate at end of prog)
* Detect recursive functions in SNF elaboration and report an error about
  them.
* Report an error for an unknown primitive encountered in SMT Translation
* I suspect shadowed variables won't work in STP queries because of a bug in
  how let expressions are implemented. (Can that ever happen?)

Tests::
* test bv_not in basic tests
* test bv_not in SMT tests
* Have Bit SMT tests test all the Bit vector primitives
* Make an SMT test which exercises user defined data types on Core
* Remove redundant SMT tests: Query1, Query2, Complex, If?

Build System::
* Don't require yices1 and yices2 to be installed to build or use seri
    If a solver isn't installed, just give a runtime error when you try to
    use it. (As per request of Nirav)
* don't hardcode build/test output directory into SMT tests
* clean up tclmk script: maybe separate into init, build, and test sections.

Seri Library::
* Have the sudoku solver use IO to read the input board

