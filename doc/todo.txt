Release to Public::
* put smten-4.0.0.0 on hackage.
* can we do dynamic linking to make using different backends easier?
* nqueens pure 3: strange performance behavior!
    It should take, like, no time to try all 27 possibilities.
* write T2 Symbolic Computation tutorial.

Cleanup::
* Support symbolic IO?
    Or is it okay because it can't ever appear in an assertion?
* Figure out a way so that Bool and Integer and Bit definitions are not so
  tied up with each other?
* Why is bv_extract primitive? Why not just shift right and truncate?

Smten Executable::
* Generate code into temp directory instead of current directory?
* Remove generated code after generating it?
* Add a flag for generating a cabal package?
* Should smten executable be in a package called 'smten'?

Concrete Performance::
* Try alternate code generation with a single big constructor for each
  datatype (possibly with a tag to specialize for concrete evaluation)
* Enable -O on all smten files
 - Report FastString string-table reinitializeGlobal bug to ghc
 - ite0 doesn't support types of kind # (needed for Smten.Data.Char)
 - emptycase doesn't support types of kind #  (needed for Smten.Data.Char)
 - Support unboxed tuple. (needed for Smten.Data.List,
                                      Smten.Data.Array)
    Both the type constructor (#, #),
    And data constructor (for case expressions)
      we may need a special case for this as concrete, if it, indeed, is
      concrete...
* optimize primitives as needed (see int_add for example)
* generate INLINE pragmas for bindings annotated as inline?
    (see inlinePragInfo in ghc api)

Symbolic Performance::
* Represent MZero explicitly to avoid introducing spurious error vars?
* for yices1: having a shl_n function, which shifts by a constant amount,
    could lead to a decent performance improvement in that case.
* make <, >, >= primitives?
* implement or_bool on all the solvers rather than falling back to the default

Front End::
* Auto-derive Show, Eq, Ord, Ix
  maybe look into possibility of using Eq, Ord, etc... from ghc for this

Documentation
* Generated code should have a comment saying it was automatically generated.
* Make it so generated haddock documentation for smten-base is nice
* Make it so generated haddock documentation for smten-lib is nice

Runtime::
* detect potential non-termination and perform appropriate abstraction and
  refinement.

Known Bugs::
* yices1 seg faults on arch-extract isCF for rules 2, 4
* generate code for  (case x of { __DEFAULT -> ...}) 
    when 'x' is not an algebraic data type
    (For example: try adding strict fields to Data.Map)
* when error is encountered in a query, smten reports "SMT SOLVER LIED?"
    when it should instead tell the user an error was encountered in the
    query.
* see problems with -O optimization above
* symapp for variable bit-vector
    Implement it like we implement symapp for Integer
* add support for integers and bit vectors to minisat.
* add support for integers to 'pure' solver.

Suspected Bugs::
* I suspect problems with using a function called 'main' as a normal function
  exported to another module instead of just as a top level main function.
* DEFAULT branches should use strict pattern matching?
            
Other::
* TODO's inlined in the code
* Do a code review of all of Smten, figure out what can be cleaned up and how.

