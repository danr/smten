Approx::
* Getting rid of Unreachable_PartialF leads to blowup in sketch
    Why?
* Have timeout for select (?)

Release to Public::
* write up tutorials (github #3)
    T5-BitVectors
    T6-Datatypes
    T7-SMTMonad
    T8-Profiling
* put smten on hackage (after tutorials are posted nicely?)

Prelude::
* make it so people can import Prelude instead of Smten.Prelude

Runtime::
* handle error and infinity correctly.
** Finite formulas can grow infinitely (SMT.Opt.InfiniteFormula, SMT.Opt.PlusBottomBool)
    they should be bounded in size somehow to allow for incremental queries
                
Cleanup::
* Switch all solvers to use getValues instead of getFooValue
  Then clean up Yices2 solver
* Use GHC.Prim for primitive char equality and other ops.
* Understand the interface between Smten.Prelude and GHC.Prelude, and clean
  it up, because I have a feely things are getting sloppy there.
  We have the following kinds of things:
  - Normal smten code: written in haskell, generates haskell
  - Base smten code: uses GHC.Base definition for stage 1,
                     but we make a copy and compile it separately to get
                     code for stage 2
  - Primitive code: uses "primitive" for stage 1, hand written code used for
                     stage 2.
* Naming conventions are all over the place for formulas. Fix it please.
    Typically we combine an operation (ite, add, etc...) with a type (BitF,
    BitFF, IntegerF, ...). Functions must start lower, constructors upper, but
    I want the type always to be upper. So I propose the following:
        op_Type   for a function
        Op_Type   for a constructor.
    But note: the _Type is only needed if it is not clear from op.
* (let {} in x  ====>  x)    in haskell output syntax 
* Does smten-base.cabal really need to expose all modules?
* Why is bv_extract primitive? Why not just shift right and truncate?

Smten Executable::
* Generate code into temp directory instead of current directory?
* Remove generated code after generating it?
* Add a flag for generating a cabal package?

Performance::
* specialize solverFromAst and Assert for all solvers?
* use dupablePerformIO in withfresh?
* bit blast directly in minisat instead of using a separate Bits wrapper?
    Or change bit blaster to be reusable functions instead of something 
    you plug yourself into.
* switch to using getValues method for all solvers (and rename it getModel)
* Look at generated code for each solver, see if there is anything stupid
    ex: Foo s _ -> foo s
     vs s -> withfoo $ \ss -> foo ss
    Does it make a difference?

* Make >, >=, <, /= primitives for bit vectors, integers
  Because it seems silly to have: ! (a == b) && ! (a <= b)
    when we really want to say (a > b)

* Concrete Performance
   ** Special case pattern matching on concrete objects with a tag?
        Except, this doesn't improve symbolic performance any, which is sad.
   ** Enable -O on all smten files
     - Report FastString string-table reinitializeGlobal bug to ghc
     - ite0 doesn't support types of kind # (needed for Smten.Data.Char)
        We need SmtenHSN# classes. 
        The real trouble will be when we try to implement the ite method
        though. Because we can't represent multiple choices in an unboxed
        value.

     - emptycase doesn't support types of kind #  (needed for Smten.Data.Char)
   ** generate INLINE pragmas for bindings annotated as inline?
        (see inlinePragInfo in ghc api)
* for yices1: having a shl_n function, which shifts by a constant amount,
    could lead to a decent performance improvement in that case.
* make <, >, >= primitives?
* Many possible optimizations removed to get decent implementation
   - Don't call sat solver for assert False
      except that it's nice to have for debugging.
   - Don't call sat solver for assert True
      except that it's nice to have for debugging.
   - a & b & b & b   ====>  a & b


Front End::
* Auto-derive Ix
  Use the same approach as we did for Eq.
* Auto-deriving of Eq doesn't work on Enums.
* Get rid of linebuffer, and support general IO operations instead

Documentation
* Generated code should have a comment saying it was automatically generated.
* Make it so generated haddock documentation for smten-base is nice
* Make it so generated haddock documentation for smten-lib is nice

Known Bugs::
* yices1 seg faults on arch-extract
* support shl in bit blaster (for minisat on arch-extract)
* see problems with -O optimization above
* symapp for variable bit-vector
    Implement it like we implement symapp for Integer
* add support for free integers to minisat.
* add support for free integers to 'smten' solver.
* instance of Show for Tuple3.

Suspected Bugs::
* I suspect problems with using a function called 'main' as a normal function
  exported to another module instead of just as a top level main function.
* DEFAULT branches should use strict pattern matching?
* Enum for Bit doesn't let you go up to maxBound. ex: [5 .. 7] with 3 bits
            
other::
* TODO's inlined in the code
* Do a code review of all of Smten, figure out what can be cleaned up and how.

