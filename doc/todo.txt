Cleanup::
* Support symbolic IO?
    Or is it okay because it can't ever appear in an assertion?
* Figure out a way so that Bool and Integer and Bit definitions are not so
  tied up with each other?
* Why is bv_extract primitive? Why not just shift right and truncate?

Performance::
* support -O flag when compiling with plugin
 - TidyPgm doesn't do same thing when I call it as when ghc calls it
    We need to fix this before any other post-optimization things, because the
    generated code has to match the generated .hi file.
* optimize primitives as needed (see int_add for example)
* understand why concrete performance is notably slower than pre-code gen
    by coming up with a simple benchmark to demonstrate the problem and
    dissecting it.
* for yices1: having a shl_n function, which shifts by a constant amount,
    could lead to a decent performance improvement in that case.
* make <, >, >= primitives?
* use explicit export lists in generated code?
    (See isExportedId in ghc api)
* generate INLINE pragmas for bindings annotated as inline?
    (see inlinePragInfo in ghc api)

Future Work::
* Add minisat as a solver (requires CNF)

Front End::
* Auto-derive Show, Eq, Ord, Ix
  maybe look into possibility of using Eq, Ord, etc... from ghc for this

Documentation
* Generated code should have a comment saying it was automatically generated.
* Make it so generated haddock documentation for smten-base is nice
* Make it so generated haddock documentation for smten-lib is nice

Runtime::
* detect potential non-termination and perform appropriate abstraction and
  refinement.

Known Bugs::
* yices1 seg faults on arch-extract isCF for rules 2, 4
* generate code for  (case x of { __DEFAULT -> ...}) 
    when 'x' is not an algebraic data type
    (For example: try adding strict fields to Data.Map)
* when error is encountered in a query, smten reports "SMT SOLVER LIED?"
    when it should instead tell the user an error was encountered in the
    query.
* see problems with -O optimization above

Suspected Bugs::
* I suspect problems with using a function called 'main' as a normal function
  exported to another module instead of just as a top level main function.
* DEFAULT branches should use strict pattern matching?
            
Other::
* TODO's inlined in the code
* Do a code review of all of Smten, figure out what can be cleaned up and how.

