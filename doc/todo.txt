Main::
* Applications
** Hardware model checking
* Use GHC Base
** Add support for FFI
    - unboxed tuples
* Document current performance bottlenecks

Release to Public::
* write up tutorials (github #3)
    T5-BitVectors
      Requires Enum instance for Bit. (github #10)
      Requires GHC.Enum.Enum instance for Bit??
    T6-Datatypes
    T7-SMTMonad
    T8-Profiling
* put smten on hackage (after tutorials are posted nicely?)

Runtime::
* handle error and infinity correctly.
** Finite formulas can grow infinitely (SMT.Opt.InfiniteFormula, SMT.Opt.PlusBottomBool)
    they should be bounded in size somehow to allow for incremental queries
                
Cleanup::
* Naming conventions are all over the place for formulas. Fix it please.
    Typically we combine an operation (ite, add, etc...) with a type (BitF,
    BitFF, IntegerF, ...). Functions must start lower, constructors upper, but
    I want the type always to be upper. So I propose the following:
        op_Type   for a function
        Op_Type   for a constructor.
    But note: the _Type is only needed if it is not clear from op.
* (let {} in x  ====>  x)    in haskell output syntax 
* Does smten-base.cabal really need to expose all modules?
* Why is bv_extract primitive? Why not just shift right and truncate?

Smten Executable::
* Generate code into temp directory instead of current directory?
* Remove generated code after generating it?
* Add a flag for generating a cabal package?

Performance::
* Document current bottlenecks.
* Concrete Performance
   ** Special case pattern matching on concrete objects with a tag?
        Except, this doesn't improve symbolic performance any, which is sad.
   ** Enable -O on all smten files
     - Report FastString string-table reinitializeGlobal bug to ghc
     - ite0 doesn't support types of kind # (needed for Smten.Data.Char)
        We need SmtenHSN# classes. 
        The real trouble will be when we try to implement the ite method
        though. Because we can't represent multiple choices in an unboxed
        value.

     - emptycase doesn't support types of kind #  (needed for Smten.Data.Char)
   ** optimize primitives as needed (see int_add for example)
   ** generate INLINE pragmas for bindings annotated as inline?
        (see inlinePragInfo in ghc api)
* for yices1: having a shl_n function, which shifts by a constant amount,
    could lead to a decent performance improvement in that case.
* make <, >, >= primitives?
* implement or_bool on all the solvers rather than falling back to the default
* Many possible optimizations removed to get decent implementation
   - SPECIALIZE pragmas for
       ** symapp of int,
       ** use, unary, binary of Runtime.Assert
   - Don't call sat solver for assert False
      except that it's nice to have for debugging.
   - Don't call sat solver for assert True
      except that it's nice to have for debugging.
   - a & b & b & b   ====>  a & b


Front End::
* Auto-derive Show, Eq, Ord, Ix
  maybe look into possibility of using Eq, Ord, etc... from ghc for this

Documentation
* Generated code should have a comment saying it was automatically generated.
* Make it so generated haddock documentation for smten-base is nice
* Make it so generated haddock documentation for smten-lib is nice

Known Bugs::
* yices1 seg faults on arch-extract
* trouble with bit blasting (try minisat on arch-extract to see)
* see problems with -O optimization above
* symapp for variable bit-vector
    Implement it like we implement symapp for Integer
* add support for integers to minisat.
* add support for integers to 'smten' solver.

Suspected Bugs::
* I suspect problems with using a function called 'main' as a normal function
  exported to another module instead of just as a top level main function.
* DEFAULT branches should use strict pattern matching?
* Enum for Bit doesn't let you go up to maxBound. ex: [5 .. 7] with 3 bits
            
other::
* TODO's inlined in the code
* Do a code review of all of Smten, figure out what can be cleaned up and how.

