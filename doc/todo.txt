Priority::
* Port shampi to ghc-plugin
* Port arch-extract to ghc-plugin
* Add SMT Error test (if needed)
* Add SMT Share test (if needed)

Cleanup::
* Support symbolic IO?
    Or is it okay because it can't ever appear in an assertion?
* Figure out a way so that Bool and Integer and Bit definitions are not so
  tied up with each other?
* Why is bv_extract primitive? Why not just shift right and truncate?

Future Work::
* Add minisat as a solver (requires CNF)
* Add Z3 as a solver

Front End::
* Auto-derive Show, Eq, Ord, Ix
  maybe look into possibility of using Eq, Ord, etc... from ghc for this

Documentation
* Update user guide

Runtime::
* detect potential non-termination and perform appropriate abstraction and
  refinement.

Known Bugs::
* Error non-termination tests (in Error)
* Sharing of appeval (in Share)
* STP bug (in Bit)
* STP bv_and bug (in Bit)
* Yices1 left shift (in Bit)
* newtype doesn't work: the generated code doesn't typecheck.
* pattern matching against chars generates code which doesn't compile.
* bv_concat type is too general
    perhaps add a runtime check to assert the types line up properly?

Suspected Bugs::
* Memory leaks of solvers
* pass a symbolic list to 'error'
* something's wrong with code generation for monomorphic let bindings of
  variable types.
    For example: try removing types on local bindings in the
    Smten.Data.Array.array function
* something's wrong with generation of type variable name shadowing.
    For example: try changing instance Functor (Either e) to
                              instance Functor (Either a)
            
Other::
* TODO's inlined in the code
* Do a code review of all of Smten, figure out what can be cleaned up and how.

