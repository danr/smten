
- Allow arbitrary patterns in lambda expression arguments.
    example: \(Foo x) -> x+1

- Add support for list sequences
    example: [1..5]

- Add support for let expressions (?)
    example: let foo = 2 in foo + 40
    Translates to: case 2 of { foo -> foo + 40; }
    Note: pattern matches in let should not be allowed, because we can't do
          them lazily with this transformation. And recursive let blocks are
          not allowed.

- multi-clause instance methods probably don't work
- add layout support
- list literal patterns.

- Test type inference and type checking
** Verify we check for the instance or context for every method call
** Verify we check for too many arguments in a ConP, or too few
** Verify we check for undefined variables

- Clean up exported function from Env.
Figure out what info I actually need, and come up with the right interfaces.

- Get rid of VarInfo in the IR, which I think is unnecessary.

- Reimplement TypeCheck to make use of constraint generation from TypeInfer?

