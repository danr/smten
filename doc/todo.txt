CodeGen:
* Sudoku.Enum generated query is huge!
* don't change (if p then 3 else 4) == (if q then 4 else 5)
    to: if p
           then if q then False else False
           else if q then True else False
  if the underlying solver supports integers
* figure out how to specialize away integers for STP
* use pragma in source to indicate which data types are primdatas.
* preservation of sharing:
** from case
** from strict primitive
** from application
* proper handling of explicit errors
* flesh out the bit vector primitives
* flesh out the rest of the libraries and test cases
* numeric type retyping hack

Recent::
* Add support for (..) in import and export specifications
* Add support for signatures in let declarations

Haskell Features::
* support for (..) in import and export specifications
* newtype
* auto derive Ord, Ix
* labeled pattern matching.
* signatures in let declarations.
* lack of signatures in top-level declarations.
* strictness flags in data type declarations.
* contexts in data type declarations.
* sections.
* Int type.
* allow sigs and bodies to be separated.

Documentation::
* Write a user guide

Type System::
* Verify we handle case where default method given without sig in ClassD.

Front End::
* I could give better locations for error messages if each token was
  associated with a location.
* Report an error if module name doesn't match source file name.
* Review desugared expressions to see if they make sense or could be cleaned
  up.
* Don't allow deriving of Free for recursive data types
* The code for handling stand-alone deriving feels very messy to me. Can we
  clean up how that works somehow?
* derived instance of Show should handle record type constructors
  appropriately.
* Better type errors
** use type synonyms in errors.
* show string as "foobar" instead of ['f','o', 'o', 'b', 'a', 'r']

Pretty Printer::
* Make pretty again:
** Don't print types of patterns?
** Recognize if statements.
** Recognize do statements.
** Recognize clauses:
    foo a b = blah  instead of  foo = \a b -> blah
** Print: Foo Bool b, not Foo (Bool) (b)
    When pretty printing data declarations
* Make it so I can compile pretty printed code?
* Maybe dump the Doc approach and take my SMT concrete approach?
* Don't pretty print numeric type 16 in haskellf as
    2*2*2*2*(1+0) ??
    depends if you want detailed type info or not.

Error::
* detect potential non-termination and perform appropriate abstraction and
  refinement.

Cleanup::
* Test convention: export 'tests' and in Tests.All, import qualified.
* varTs should return a list of TyVar, not (Name, Kind)
* typeinfer - use structure like typecheck (if reasonable)
* enforce in Parser that all class methods must have a signature?
* Maybe avoid withloc everywhere in Grammar.y by pushing that to PatOrExp
  functions?

SMT::
* Remove bv-zero-extend from SMT syntax, use SMTLIB2 alternative
* Add minisat as a solver (requires CNF)
* Add Z3 as a solver

Query::
* Use value inference on assertion predicate to solve trivial predicates, then
  don't even send them to the SMT solver (?)

Query Optimizations::
* Perform case analysis to avoid inserting unnecessary error conditions
  automatically.
* Simplify (= x x) to True

Specialization::
* put it back in

Build System::
* Don't require yices1 and yices2 to be installed to build or use smten
    If a solver isn't installed, just give a runtime error when you try to
    use it. (As per request of Nirav)
* don't hardcode build/test output directory into SMT tests
* clean up tclmk script: maybe separate into init, build, and test sections.

Known Bugs::
* Sudoku Bit vector test fails!
* BadKind, DupInst, DupVar maltype tests
* Error non-termination tests (in Error)
* HaskellF sharing of appeval (in Share)
* STP bug (in Nest)
* STP bug (in Bit)
* STP bv_and bug (in Bit)
* Yices1 left shift (in Bit)
* precedence 2 bug (in Basic)
* precedence 3 bug (in Basic)

Suspected Bugs::
* qualified infix vars:    a `D.foo` b
* Memory leaks of solvers
* Unused var defined in let isn't type checked
* type synonyms are not qualified by their module
* Does module import and export handle labelled update and construction
  properly?
* class names can't be qualified in instance declarations?
* It's possible to use a symbolic thing in a different context than it was
  defined, in which case bad stuff will happen.
* PrimArray does not support symbolic computation. Smten will probably crash
  if you try to make a PrimArray from a symbolic list.
* I fail to do any bounds checking in Data.Array
            
Other::
* Update LICENSE files to include 2013 copyright.
* TODO's inlined in the code
* Do a code review of all of Smten, figure out what can be cleaned up and how.
* Switch to n-ary "and" to help in debugging of SMT queries?
* Have flags in smten exe to call ghc appropriately.

