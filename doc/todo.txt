
- Allow contexts in InstD
- support record type constructors
- add layout support
- list literal patterns.
- support negative literals?
- deriving Eq would be nice.
- default methods in classes?
- problems with pretty printing class predicates:
    Eq (Maybe Integer) is printed as Eq Maybe Integer

- line numbers for non-syntactic errors would be nice.

- Test type inference and type checking
** Verify we check for the instance or context for every method call
** Verify we check for too many arguments in a ConP, or too few
** Verify we check for undefined variables
** Verify we can't over apply a type, for example: Maybe Integer Bool.
** Verify we can't declare the same variable twice.

- Clean up Env lookup function implementations.
- Should Env be it's own entity, rather than joined with some object?
Yes. Definitely. All this mkenv stuff is tiresome and adds nothing.

- Reimplement TypeCheck to make use of constraint generation from TypeInfer?

- Understand all the conflicts in the parser.

- String literals
    For example: fail "deq on empty fifo"


- Allow arbitrary patterns in lambda expression arguments.
    example: \(Foo x) -> x+1

- Add support for list sequences
    example: [1..5]

- Add support for let expressions (?)
    example: let foo = 2 in foo + 40
    Translates to: case 2 of { foo -> foo + 40; }
    Note: pattern matches in let should not be allowed, because we can't do
          them lazily with this transformation. And recursive let blocks are
          not allowed.

- support for pattern guards?

- Would be nice for runquery to optionally take explicit yices path as input
So I can play with tyices when needed, for example.

