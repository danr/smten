
Haskell Features::
* string literal patterns
* support negative literals?
* default methods in classes?
* allow arbitrary patterns in lambda expression arguments.
    example: \(Foo x) -> x+1
* add support for more kinds of arithmetic sequence
    example: [1..]
* list comprehension.
* support for pattern guards?
* Variable operators: `foo`.
* pattern matching in do bind notation.
* pattern matching against bit vectors
* support arguments to type synonyms? 
* auto derive Show
* recursive let blocks
* modularity support
* labeled pattern matching.

Test Type Checking::
* Verify we check for the instance or context for every method call
* Verify we check for too many arguments in a ConP, or too few
* Verify we check for undefined variables
* Verify we can't over apply a type, for example: Maybe Integer Bool.
* Verify we can't declare the same variable twice.
* Verify all clauses have to have the same number of args.
* Verify recursive definitions in lets aren't allowed (self recursion)
* Verify ambiguous types aren't allowed
* Verify a type constructor used has been declared somewhere.
* Verify a free variable in an expression is not allowed.
* Verify all methods have been defined for a class instance.
* Verify you can't refer to a nonexistent type
* Verify we can't use a made up data constructor: ex: Answer True
* Verify we can't use a data constructor where a type constructor is expected

Type System::
* give a nice message if there's a type ambiguity?
    That is, anything with ~?
* Reimplement TypeCheck to make use of constraint generation from TypeInfer?
* Make numeric types happy
** Share VarT and AppT between regular and numeric types
* Implement enough math somewhere to know that
  Bit #3  -> Bit #4 -> Bit #7 is a valid subtype of
  Bit #m  -> Bit #n -> Bit #(m+n)

  Because otherwise bitvector concatentation is really annoying to use.

Front End::
* line numbers for non-syntactic errors would be nice.
* Understand all the conflicts in the parser.
I suspect many of the reduce/reduce are from:
    foo :: (Foo a) -> Sludge
vs. foo :: (Foo a) => Sludge
* support parser-error layout rule.
    For example: (let foo = bar in foo x)
* Report an error if module name doesn't match source file name.
* Review desugared expressions to see if they make sense or could be cleaned
  up.
* Don't allow deriving of Free for recursive data types
* Add static check for concreteness of queries (?)
* use "reservedops" in Lexer for the operators.

Pretty Printer::
* Make pretty again.
* Make it so I can compile pretty printed code?
* Maybe dump the Doc approach and take my SMT concrete approach?

Performance::
* Play with GHC Sparks and non-strict state monads
* Use the yices1 native interface where possible (everywhere?)

ExpH::
* Perhaps case statements should consider all constructors at once instead of
  one at a time?

Primitives::
* Implement the 'update' primitive, or remove it from smt_array.
* Get rid of the __prim_free primitive

SMT::
* Remove bv-zero-extend from SMT syntax, use SMTLIB2 alternative
* Add minisat as a solver (requires CNF)
* Add Z3 as a solver

Query::
* Figure out how to deal with debugging properly
* Don't ask for the value of a free variable from an SMT solver unless it
  shows up in a query.
* Deal with errors in queries correctly.

Query Optimizations::
* Perform case analysis to avoid inserting unnecessary error conditions
  automatically.
* preserve sharing (?)

Specialization::
* put it back in


HaskellF::
* Translate a module at a time instead of one big blob

Distribution::
* Move everything but the SMT solvers from seri-smt to seri.

Build System::
* Don't require yices1 and yices2 to be installed to build or use seri
    If a solver isn't installed, just give a runtime error when you try to
    use it. (As per request of Nirav)
* don't hardcode build/test output directory into SMT tests
* clean up tclmk script: maybe separate into init, build, and test sections.
* test haskell backend


Applications::
* HCP - get it working on the larger test cases
* TCP - Implement it
* SAT - implement MAXSAT
* SAT - implement DIMACs parser
* SUDOKU - Have the sudoku solver use IO to read the input board

Bugs::
* seriq2 for SquaresRaw... result differs from yices1 and yices2. Why?
  seriq1 seg faults on that same example randomly
    (in GC evacuate at end of prog)
* Detect recursive functions in elaboration and report an error about
  them.
* Report an error for an unknown primitive encountered in SMT Translation
* I suspect shadowed variables won't work in STP queries because of a bug in
  how let expressions are implemented. (Can that ever happen?)

Other::
* Have name sugar for arrowN, tupleN, de_tupleN, unitN, etc...

