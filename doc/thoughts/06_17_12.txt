
Sun Jun 17 11:29:19 EDT 2012

There are three things I would like to do which I think would be really cool.

1. Get rid of scons for building.
Instead, use a custom tcl based approach, which I can hopefully develop into a
good library for building projects.

The tcl based approach would work something like:
 - run commands in an empty environment (populate environment explicitly)
 - run them in sequential order.
 - don't run a command if some checksum on its inputs hasn't changed since the
   last time we ran the command.

Where we have a library of ways to run commands, and checksum inputs, and do
dependency checks and the like. I think this will be much simpler and more
flexible and nicer all around than scons.

2. Implement TypeChecking of Seri expressions.
To start, just do type checking on a flattened declaration list. Eventually we
may want to support modular typechecking, but don't worry about that now.

I think this should be pretty easy to do.

3. Implement Type inference of seri expressions.
This will be trickier than type checking, but I think it's doable. Let me
resurrect my previous implementation of the type inference and maybe it will
be very straight forward.

The combination of (2) and (3) mean I could get rid of serif entirely. The
input language could be a strict subset of haskell. Then I don't have to worry
about type annotations, or anything like that. It means what seri is, really,
is a compiler for a subset of haskell which does more interesting stuff than
compile just to C.

What should I experiment with first today?

I think first try the tcl build system thing.
Then try type checking (and we can check programs after flattening to sort of
test it). Then try type inference.
 
For tcl build system thing, start with just building it running all the
commands every time.

Sun Jun 17 11:37:20 EDT 2012

Working on TCL build system thing.

I want to build in a build directory.
I want the build system to be described in its own directory... How about call
that directory 'make'? And I can have a makefile to call the make script?

Other words I could use:
 make, build, construct, compile, ...
tclbuild, tclmk.

tclmk sounds good to me. Kind of a spoof on TCL/TK. Then it's clear it's tcl
based and about making stuff. Or somewhat clear.


Some questions to ask and answer:
 - is there an easy way to copy a directory via links?
   Perhaps some flag to cp -l?

   Looks like cp -lr. Let me start with that.
 - is there a way I can empty the environment?
    $::env looks to be exactly what I want.
 
    array unset ::env clears it. Cool.

So, now we have the environment and the build directory set up. Time to try
building things.

The list of things I would like to build are:
+ Parser.y

+ serie
+ serif
+ monomorphic
+ runquery

+ *.hs for each *.srif
+ *.exe for each *.hs
+ *.sri for each *.exe

+ general test: compared against expected.
- SMT query tests.

Fine. Let's start one at a time.

Parser.y

Sun Jun 17 12:23:44 EDT 2012

Hey look, I ran into a bug in the scons script. It wasn't building
monomorphic. monomorphic is kind of out of date now. Perhaps I should remove
it?

The question is: what input does it take? A list of declarations? Or a module?
Or what?

Well, to work correctly, it needs the whole thing. So let's say it loads
everything and monomorphises the flattened version. That should work fine.

Sun Jun 17 12:28:26 EDT 2012

I must say, I'm liking this build system so far. The only issue at this point
is that it reruns all the ghc commands regardless, which takes a bit of time.
But I'll get to that eventually. No need to worry about it now.

Sun Jun 17 13:06:22 EDT 2012

Okay, so I can build the whole thing now.

Sun Jun 17 13:07:16 EDT 2012

I'm a little concerned though. For example, how did ghc know about where to
find packages? I never told it... Is the environment leaking? Or does ghc just
know?

I fear we aren't clearing the environment the way I want us to be.

Sun Jun 17 13:16:52 EDT 2012

Yes, if I run the make command in env i, then ghc can't find the packages. So
I must not have a clear environment.

The mkfile, cp, rm, etc... might work because they are built in tcl commands.

I wish I could set the environment inside tcl, but that doesn't seem to be
working.

Sun Jun 17 13:22:46 EDT 2012

Okay, so I just have to clear each element at a time, because unsetting the
entire env array has a special meaning in tcl. Good.

