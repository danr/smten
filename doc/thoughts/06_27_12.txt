
Wed Jun 27 08:36:24 EDT 2012

1. Declare Foo-Error constructor for every data defined type.
2. Box integer in a user defined data type.
3. Return Foo-Error as the default case value in case expressions.

Here I go with (1).

(1) is done.

Here I go with (2).

What I need to do...
- Each integer literal must be wrapped in a call to the constructor.
That's easy.
- The primitive integer functions need to extract the integer, and return an
  error if there is an error.
That's slightly tedious, but easy.
- We need to declare the data type for integer.
But we want to only do it once. This is a little tricky.

I feel like a nice way to do it would be to have a DataD declaration in
prelude for integer. Then I can just special case that in the compiler.

data Integer = ;

That's reasonable, right?

The thing is, it means I'll want to special case it in the haskell target too.

How about this. I may be able to get away with not supporting the integer
error for my test cases. So I could skip to (3). Get that to work. Understand
if there are other issues I need to be aware of.

Then, overhaul the haskell target. Using a compiler like the yices target. Fix
the primitives declarations issue. Define haskell primitives like I do in
yices, based on the PrimD. Stop handling Bool specially.

Then, add Integer and Char as primitive data type declarations. Then box
Integer for the yices target.

I think that makes sense to do.

Okay, let me fix the case statement generation now then. Remember, we expect
polymorphic. So every type is ConT "foo" that isn't a function type.

Wed Jun 27 09:05:06 EDT 2012

Well... so much for thinking it would work without defining Integer__...

How about this. As a hack, I can declare the integer data type first...
no. Don't hack.

Let me save this. Do the haskell thing, then come back to fix this.

Wed Jun 27 09:07:19 EDT 2012

Okay, haskell target.

Replace "Builtins" with "Compiler".
Let's keep includes in place for now.
Otherwise make it look just like yices, with the partial compiler thing.

Wed Jun 27 10:44:08 EDT 2012

Ug. So, not surprisingly, I'm running into annoying issues.

If you really want to do replacement for haskell, you want to replace patterns
too. And have includes. And ... ug.

I think I can hack around it by just a little bit of tedium for now, but it
might be worth reconsidering this distributed compiler thing in the future.
It's starting to look a lot like inheritance, which I don't much like.

Wed Jun 27 10:52:36 EDT 2012

Ug. This is really annoying. Having to write complex expressions in template
haskell abstract syntax. It should be a library. But whenever I try to do the
library, I run into the dependency issue.

Wed Jun 27 10:57:37 EDT 2012

Well, I'm pretty close. Just need show now...

Wed Jun 27 11:06:13 EDT 2012

I hacked something together for the haskell thing. Enough, hopefully, to let
me keep going. Back to the yices issue.

What I'm going to do:
1. define Integer as a data type in prelude.
2. use that in yices to generate the boxed Integer type.

It's as easy as that, no?

Wed Jun 27 13:16:10 EDT 2012

Integer is defined as a data type in prelude.
Let me, in the yices compiler, generate the boxed type for it.

Wed Jun 27 13:40:07 EDT 2012

Well, so, here's an interesting question... does it work? Does it do what we
want? What do we want it to do?

Currently we treat Error as a different value. But what should happen if we
assert an error? I don't know. Maybe I'll leave that for later. Currently I
treat it as false. I could do other things with it too I suppose.

Good. Everything's up and runnning again.

Err... but now we have another problem.

Your free variables could be errors. In which case, everything will return
error?

This is certainly not satisfactory. Perhaps I should assert that none of the
free variables are errors?

Ug. This gets messier and messier. I should ask for other people's opinions. I
think I know the issues now.

I don't know what to do. I don't know if I can check in my changes. This is
going to need some thought and discussion.

Let me compose an email message. It will help clarify my thoughts.

Wed Jun 27 14:33:29 EDT 2012

Email composed and sent. I don't know the answer. Perhaps it's worth seriously
digging into the issue. Finding all the counter examples and things that don't
work the way you want and such.

Wed Jun 27 14:42:39 EDT 2012

Okay, I have a proposal. Here me out.

If every case statement matches at least one alternative, then there's no
possible way to introduce an error, and you would want the answer you get from
yices to be as if there were none.

This suggests, in this case, if we allow things to have errors, we should at
least disallow free variables from being errors.

Let's say we do that. Let's say we have an assertion for each free variable
saying it is not an error. When could this possibly cause a problem? Only if
we find something is unsatisfiable because you are forcing a free variable to
not be an error when it otherwise would be.

What does it mean if a free variable is an error? It must matter. So it must
be used in an expression, so the overall expression must be ERROR, so the
question is what assert ERROR means.

I don't know. But I do thing asserting free variables aren't errors is better
than what I'm doing now. So let me do that, and move on until I hear otherwise.

Wed Jun 27 14:54:37 EDT 2012

Problem with that: We also need to restrict all the components of a variable
to not be errors! Otherwise we get things like
 s = TState error error error

So s is not an error. But it contains one.

Is that reasonable? What I could do in the yices target (but now we're getting
rather specific to the SMT runner, is that a problem?) is for each data type,
define a predicate: Foo~hasError :: Foo -> bool. Then, instead of asserting
that a data type is not an error, assert that it doesn't have an error
anywhere inside it.

I could do that. I suppose that's what I'll end up doing. It's not terrible.

But, I have an idea. You know what we really want? What we really want is, if
yices ever encounters an error, the result of the query should be
(error :: Answser a). Just propagate the error out. Now that makes sense.
Because it's like, you went to run a program and you hit an error. Now, maybe
SMT tries running it all sorts of different ways, but if any of those ways
leads to an error, we should report it as an error, no?

Is there any way to make that work in yices?

Well, maybe it's simple. Have a free boolean variable, call it is_error.

For every assertion p made, do:
 
assert( True? p || (Error? p && is_error))

So, if you ever encounter an error, is_error is forced to true. Now, after
every check, read is_error. If it's true, there was an error, return the
error.

Err... except, yices doesn't know that it should try to make p True before
making p Error and is_error true. So it looks like we'll want an assertion
anyway saying that free variables don't contain errors.

Wed Jun 27 15:12:17 EDT 2012

Hmm... Nirav has an interesting suggestion. Allocate a free variable for each
case statement, and use that. Could I make this work out? In other words, an
error could be anything.

Hmm... Interesting.

What would this mean? It would mean: I don't have to have a special error type
for things. I don't have to assert things are or are not errors. I don't have
to deal with assert ERROR. I just have to define a new free variable for each
case statement, and let it be whatever it wants to be.

Hey. That's pretty cool. I like that solution. Just... ug. Have to modify the
compiler to collect a set of (freename,type) pairs to define the new free
variables. And, what about cases inside of functions? Doesn't each need a
fresh free variable? Otherwise two calls could link them together. Which means
functions need to take as input the errors to use.

I suppose that's doable. Annoying, very, but doable.

I don't know. I don't feel comfortable doing anything about this now. It needs
time to stew.

Yup. Stew.

Wed Jun 27 15:23:52 EDT 2012

Okay, so I'm putting that issue on the table for the rest of the day.

Let me now review where I am. What all things are still to do, still to be
done, and so on and so forth. A high level progress report. That will be
useful.

- Handling of the nocasematch case.
- Reading evidence
- testing and syntactic stuff and general cleanup
- implement typecheck using typeinfer?
- full module support


In terms of the next step: integration with Myron, I think the nocasematch
issue is all that's left. Reading evidence would be nice, but not needed at
this point, because we are really just asking yes or no questions.

Ug. I'm really not into things right now.

Maybe I can have some fun. Try to make a cabal package description. See if it
works at all.

Wed Jun 27 16:12:14 EDT 2012

I started working on a cabal description. This will be good, because it will
force me to have my package layout and things clear. I feel like I should
start simple.

Yup. And the first place to start, I think, is clear: Seri.Lambda, and serit.
Make it so that works correctly. Then I can add more bits at a time.


