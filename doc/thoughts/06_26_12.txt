
Tue Jun 26 08:06:49 EDT 2012

Goal for today?

First step: support record type constructors. It's not hard, and it's useful.
Have a DataDRec type, build that up, then be able to convert DataDRec to
[Dec].

I think, look into Myron's example query. The library, at least, is going to
be the same as he has now. Try to understand what features and tests I should
do to make it reasonable to express the library (appropriately) in seri.
Perhaps adding support for Vectors and numeric types?

Remember the primary next goal: get Myron to use seri.


Okay, let's start with record type constructors. I claim this isn't hard,
so... let's try it out and see.

Tue Jun 26 08:45:53 EDT 2012

It wasn't hard. Now we support record constructors. Cool.

What's next?

Next, let me look at Myron's query more closely.

Oh, another thing I can do after looking at Myron's query: my plan for
extracting evidence.

The idea is this: we can get primitive evidence: bool, int, double, etc...
I have a way we can get user defined data type evidence from that. I don't
have a way to get the evidence for an uninterpreted function, but ... save
that for future todo I suppose.

Here's the idea. We can execute a formula in the model. So, we can use this to
figure out which constructor something is. Just ask: is it this constructor?
Is it this one? and so on, until you find the constructor it is.

Now, we know the constructor. Say we know the constructor is Foo.

Then define some variables and make an assertion:

define free_5 :: int
define free_6 :: bool
assert free1 = Foo free_5 free_6
check

This gives us a new model with simpler variables we can look up.

Okay? So I can play with that in a bit. Again, doesn't work for functions...
which is sad. But it's better than nothing?

Anyway, on to Myron's query. Maybe I can write it up and rewrite my bluespec
example to use that same form. Call it Bluespec2.

Tue Jun 26 09:26:00 EDT 2012

It would not be unreasonable to implement Myron's query, as he has implemented
it, in seri. I don't need to do all the checks, but the first few.

This will be a good test case for seri. We'll see if yices blows up on the
query expressed my way.

Tue Jun 26 10:16:37 EDT 2012

I need the notion of an error. I need a primitive:
  error :: [Char] -> a

What's more, I have to handle this in yices.

The reason I need it is... what happens if you take the head of an empty list?
We need an error, because nothing else makes sense, and if we don't have an
error, we'll run into the nocasematch bug when doing smt queries, and there's
no way around it.

I also really need contexts in instance methods. It's come up again and again
and again. It's the big next thing for seri, in my opinion.

I want both of these things before I can get Myron's sample query going
reasonably.

How about this. Let me finish a rough draft of Myron's sample query. That may
bring up more interesting concerns. Then let me do these two things, which are
two big things, but maybe they won't be so bad as I fear. Then let me get
Myron's query working. That will be the (optimistic) goal for today.

Sounds good to me.

Tue Jun 26 10:36:23 EDT 2012

Trouble is, it's very tedious to write out the whole thing. It would be, I
feel like, much more productive translating directly from bcl.

What I need to do is support errors and contexts. Then I believe seri will be
ready to start doing Myron's queries.

Cool. What's first then? Errors or contexts on instances?

Let's go over each at a time.

1. Contexts on instance.
Modify the IR. Add to the Parser. This parts very easy.
Elaborator doesn't have to change at all. Haskell target should be easy.
I don't think Monomorphic has to change.

There are two challenges with this, I expect. Identifying the correct instance
for a class, and verifying in the type checker the extra constraints are met.

How to identify the right instance?

Currently the way we test Class instances are with equality.

Foo Sludge Bar matches only Foo Sludge Bar.
This is ... not right. For example,
Foo Sludge Bar should match Foo Sludge a.

So we have a subtyping kind of a relationship for matching instances. I don't
think there's anything intrinsically difficult about this. I probably just
want a predicate which says if there is a match, and maybe returns the
bindings. This change may be isolated to lookupInstD. That would be cool.

Now, what's needed in the type checker? Let's say I look up the InstD. It has
a context. So I just have to verify recursively that the context requirement
is met. Easy! No?

So we're looking at, I feel like:
 - add Context to InstD in IR and Parser 
 - update lookupInstD to check for match instead of direct equality.
 - update instcheck to check that the looked up InstD's context is
   also met. We may want a function for doing the lookup that does this right,
   chasing all dependencies and checking for recursion.

Good. That sounds very doable. I would start with a test case, and use that to
drive my work. An instance of Eq for Maybe would be a great example, that I
could test in Test cases. I should also verify it fails to type check if I try
to do equality for Maybe X when X isn't an instance of Eq...

I really need a way to test poorly typed programs. It's worth thinking about
that.

Well, we can write lots of small .sri examples, run them on type, and assert
the return code is an error. That's not so hard to do. I should set that up.

Okay, so let me start by setting up the poorly typed test cases. I just need a
couple.

In fact, I have a list of things to test. Unfortunately I suspect most of
those fail and I don't want to deal with them just now. So, the two tests I'll
do...

foo :: Integer;
foo = True;

And...

foo :: Bool;
foo = not 17;

That will be a fine start.

Tue Jun 26 11:09:36 EDT 2012

Cool. Tests work great. I love tcl.

Now then, let me implement Eq for Maybe and write a test for it. Both a poorly
typed one and a well typed one? Maybe just a well typed one to start.

Tue Jun 26 11:29:33 EDT 2012

Good. Next step: how to check the subtype thing? Do I already have code for
that somewhere?

There's something called: isSubType. How about just use that?

Tue Jun 26 11:54:07 EDT 2012

There's a bug somewhere. I don't understand it.

Just 18 == Just 18 is returning false.

I know it's getting the right instance. But after that... what's going on?

I think the way to debug this is: run serie on (Just 18 == Just 18), and have
it trace out the expression at each step of the reduction. Then it ought to be
clear.

Oh. I see. That made it obvious. The expression we return from lookupVar can't
refer to the type variables in the InstD. It has to have the concrete
versions based on the class lookup. That's easy enough. Let me fix it up real
quick like?

Tue Jun 26 12:05:21 EDT 2012

Cool! It looks like it works.

Next things to do:
 + test bad type where context if instance isn't met.
 + use opt construct in Parser.y for all the optional stuff.

All after lunch.

Tue Jun 26 13:05:57 EDT 2012

Let's talk about error now.

We would like the notion of error. That is, some primitive function:
 error :: String -> a.

This is useful in code in general. But where we really want to use it is in
yices for when a case statement doesn't match anything.

It's probably easy to support errors in the elaborate module. I suppose for
now we could just not elaborate error. Another option would be to fail in the
elaborate monad. I don't think I need to worry about this much.

Haskell target is easy too. Use the builtin error.

What's not so easy is yices.

Proposal: for each data type, Foo, I add an additional constructor: Foo-Error.
I box integers and booleans.

Primitive operators should return Error if either of their arguments are
error. Case should return error if off the end.

Is there anything else we need to do?
Don't we automatically get error propagation because of the way case
statements work?

That would be cool if it were that easy.

Now, if you get as a response to an SMT query that something is in Error, that
means an error path is accessible in your design. That's something you want to
know about.

You know? It might actually be that easy.

There are some steps here.
I could go about this different ways. Maybe to start, don't have the error
primitive? Just have the errors in yices, and only case can generate errors.
Verify the nocasematch test does what I hope it will.

Then I can add the error primitive without trouble, I'll probably want to add
support for string literals, and I can use it in the right places in the
library, namely head and tail and such.

Fine. I think it's worth a try. Somehow I suspect I'll learn about some
difficulties I didn't think of when I go to implement it for real.

Steps:
1. don't do anything special for Bool. That we we'll inherit the error stuff
for it automatically.
2. use a boxed Integer representation with an Error type.
3. Generate Error type constructors and use them for no-match case.

Wish me luck.

Tue Jun 26 13:54:48 EDT 2012

Well, so, we have this annoying thing again. The integer primitives depend on
Bool being defined. It's the same problem I have in the haskell target, only
even worse, perhaps, because yices needs declarations to come in the right
order.

Well, the solution is the same. I have to define Bool specially for the Yices
target. I can still box it. But it will be like Integer. I declare it
manually.

It would be cool if somehow we could ...

Oh. Now this is an interesting idea. Very interesting indeed.

What if, in the compiler, we just had a special case for the primitive
declarations? Don't ignore them, but use the primitive declarations to define
them properly?

In this case, I don't include any prelude or set of declarations up front. I
only generate the primitive yices declarations when we need them. It includes
them just at the right time.

If I do this, then we don't have to do anything special for Bool. Because the
__prim_integer_eq, or whatever it's called, depends on Bool, so when we sort
it, it will go in the right place automatically.

That's a cool idea.

I'm tempted to say, then, that all we need in the Yices compiler is a way to
rewrite declarations, so we can declare primitives properly. But that won't
let us rewrite free variables the way I want, so keep yType and yExp in there
too I think.

And I can do the same thing for the haskell target, no?

Do I still need includes?

For yices, I think no. Because they don't have the notion of an import, and
all declarations can be declared the way I want. There is not existing library
to make use of.

For haskell, I think we still want includes, because you might want to use an
existing library.

Okay, so here's what I should do.

Replace the yIncludes field in the yices compiler with yDec.
Generate declarations for each of the primitive declarations I want to
support.

Then finish dealing with the Boolean boxing issues, though I don't expect
there to be any issues.

Good. Sounds like a plan.

Tue Jun 26 14:53:40 EDT 2012

Well... sadness. Looks like... a bug in Yices? With regards to push and pop.

So, I have to work around it somehow? I doubt they will fix it for me.

Okay, so it looks like there is a workaround. It's ... rather a bit of a hack,
I think, and rather annoying.

The first type we define a type, define it as:

(define-type Foo (datatype ...)).

Remember all those things we have defined. Because the next time we define the
type, we have to define it as:

(define-type Foo)

without the "datatype" part.

Right? No?

No. That's not true. Then it gives me a seg fault. Blah.

Tue Jun 26 15:08:53 EDT 2012

I think there's a workaround. One that's not too bad.

The problem is with push and pop. The only thing we really want to use push
and pop to protect against are assertions. So the only thing inside of push
and pop should be assertions.

This means I should do the following: collect assertions as they are made.
Don't send them to yices right away. Instead, send them when check is
called.

Now, for queryS, don't send the push and pop commands ...

It's not going to work, is it.

Hmm... what if I turn off type checking? Does that fix it?

Nope. Doesn't help.

Well, by delaying assertions, I can make most things work. What I can't make
work is when you use the result of a query, reading the evidence, and passing
that in as...

Or can I?

Perhaps this has a really easy solution. It just means being a little verbose
with yices, telling yices more things than it needs to know about.

1. Monomorphize the query.
2. Send yices all the declarations it could possibly need then. Because we
know what they all are. We'll end up telling yices about more than it needs,
potentially, but what harm does that do? No need to be lazy about things.

In fact, it might be more efficient if we aren't lazy about telling yices
about things. Then we don't have to keep remonomorphizing all the type.

3. run the query as now.

Yes. I think that's the answer. Probably a better way to go too anyway.

Good. Let me try that and see if I can make it work.

Tue Jun 26 15:21:32 EDT 2012

This means we monomorphize before running in yices. Is that okay? Do we loose
anything there?

I don't think we do. Except, maybe, in reconstructing evidence. Does that
matter? I'm not sure. Is it okay to have monomorphic evidence?

Perhaps we should have a way to demonomorphize? Given the polymorphic
environment, and a monomorphic expression, shouldn't we be able to do that?
That would be nice...

Tue Jun 26 15:36:09 EDT 2012

Well, there's a problem. Which is we are picking up more than we need, which
is a problem, because we are referencing polymorphic primitives that shouldn't
be referenced.

I really rather not tell yices about more than I need to... So, how do I
figure out what I need to?

The problem is, we don't know how to figure it out unless we assume the
evidence returned isn't used, but the whole point is to have some evidence,
or, it would be really nice to make use of the evidence.

Well, one thing I could do is make it work in almost every case, and call it a
yices bug if it doesn't. That's what would happen if I did the delayed
assertion plan. Still give yices declarations lazily as needed. Just don't do
the assert until the corresponding check. And maybe we get lucky.

Or... what do you think about this: the problem comes when defining data
types. So, what if we defined all the data types ahead of time, based on
monomorphization. Then do everything else as I have been.

That's actually probably not hard to do.

Okay. Cool. This sounds like a plan. Let me go to it.

Tue Jun 26 15:55:46 EDT 2012

Well, that works for now at least. Good.

And now the Bool thing works. Good.

