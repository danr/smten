
Thu Aug 16 08:03:22 EDT 2012

What's the goal for today?

Well, I really ought to start working on slides... What I need, what I want,
is an example. That's all I need. One good example.

It should:
- involve a complex query, expressed easily with abstractions. Ideally making
  use of pattern matching, perhaps lists, functions, things like that.
- once I solve the complex query, it would be good if I could then ask a
  sequence of similar queries, based on the results I get, to find more
  information.

For example, maybe something like sudoku.

Initial query: what is the solution.
Refinement...: Maybe you could ask something like how many squares can you
take away and still have a unique solution. But I'm not sure that could work
out.

Other examples: you have a state transition system. State is described using a
user defined data type. Then you have some transition functions. Now you can
ask: is it always the case that this sequence of transitions is the same as
this other sequence of transitions.

But, what's the refinement?

A fifo is a cool thing to express as an example. You define a fifo as a data
structure and transitions on it. That can be part of your state...

I feel like maybe graph traversal could be a nice simple example. So you use
the SMT solver to ask: can you get from a to b, perhaps. Then, for
refinement...

Could we do a mini-model checker? Like a really simple, abstract refinement
kind of thing?

I really would prefer simple, cute, easy to understand.

I'll keep thinking about it.

Thu Aug 16 09:09:41 EDT 2012

Okay, so there are some things I want to show. Perhaps a single example is not
best for them all.

How about the following:

1. Implement a sudoku solver.
Shows:
 - how to use the query monad to form queries.
 - that we can read evidence
 - * that queries are expressed at at high level
    ex: assert (isValid board)
    not: assert (sum of row1 = 9 && sum of row2 == 9 && ...)
    And mention that this is important for the formal verification stuff we
    want to do?
 - that we can deal with lists, other funny stuff not expressable in SMT as
   long as it is statically elaborated away

Summary: this is like: yes we can do all the SMT stuff you want to do, in a
much nicer way.

2. Implement a findAll function. Given a predicate, return all solutions to
that predicate.
 - shows interactive use of SMT solver
 - shows how common things can be described as libraries
    for ex: mention I could use this on my sudoku solver too, as is.

 - Also: it might be nice to come up with an example here which involves free
   variables of user defined type, to show off that capability.

Summary: and we can do more than you usually think of doing with an SMT
solver.

I think those would be too good examples. Hopefully they both work.
The rest can be things like: current issues, open up to questions, plans for
use with bluespec, implementation details if desired, big things that turned
out to be important for implementation.

Sounds good to me. I think getting these examples going has priority over
performance.

Let me start with the allQ query on a simple example. Let's find all even
integers between 3 and 7. Verify that works.

Then come up with a more interesting data type. Perhaps... weekdays? No.
That's just scalar. Nothing hard about that. How about: every pair of weekdays
satisfying some sort of predicate? I suppose it's always a predicate of
something. Perhaps encode an Instruction: has opcode (constructor), and
fields: source, destination, etc... which may differ from instruction to
instruction. The predicate? Um... we would kind of like to avoid too many
choices.

And actually, having a few different examples would be good here, to show we
can reuse the allQ for lots of different things. Good. Let me try it out then.

Thu Aug 16 10:08:18 EDT 2012

Nirav's suggestion for examples:

Try to make the representation of a cell in a sudoku solver abstract. So, it
could be: Integer, or BitVector, or 9 tuple of bool, or whatever. The user
doesn't care, but we can change it underneath and reduce, for example, a
SMT question to SAT, or something like that. Change the underlying
representation, and ideally have the expert know the best underlying
representation for the different back ends?

Also: maxsat is a possible interactive query example. Have an evaluation
function for a free variable, find an example of something which evaluates to
a bigger number until we find the best.

Anyway, I've got to work out my bugs now to make all this stuff work.

Thu Aug 16 10:34:16 EDT 2012

The AllQ thing seems to work now. I just had to implement it correctly.
An interesting thing to remember: when you make a query, it does not set the
value of free variables. So if 'x' is the free variable, and I query 'x',
later references to 'x' will still have it as free! I have to look at the
queried value.

That seems a bit strange from the point of view of referential transparency
and such. Or from the language point of view.

Oh well. Shall I try implementing a sudoku solver then? Just to see how it
works. See if it can actually be done...

Assume 9x9 for now. And because I have pretty printing of lists now, it should
be fine to just return a string representation of the board. This should be a
nice test of seri...

Thu Aug 16 10:49:15 EDT 2012

How do I want to do this? Sudoku?

For example: how do I want to encode the assertions?

One way is: have a single predicate: is valid, which checks if a board is
valid, and all the cells are valid.

Another ways is, for example, to construct the board with proper assumptions
about its validity. Like, create free cells with assertions about their
validity. Now we have a board, we already know all the cells are valid.

Then make an assertion for each group.

Is that better than one big assertion?

Let me mix things up. Let me create a free cell, and assert it's free right
then?

I suppose the question is, what do you want to reuse from code that works with
when you don't use SMT.

Okay, I'll do it like this. Create a free Cell, make the appropriate assertion
then. Then have a predicate for the board constraints, assuming all its cells
are valid. That makes sense to do, I think.

Thu Aug 16 11:38:18 EDT 2012

Okay, so I have the rough draft of sudoku written down. I don't think there's
a chance it will work yet. I should start with testing small parts of things.

But, I'll try it and see what happens anyway. Who knows, it could actually
work? (unlikely...).

Thu Aug 16 11:39:25 EDT 2012

Issues to face:
1. support for character literal patterns.

I'll want to change IntegerP to LitP. It's sort of annoying... but for the
better.

Thu Aug 16 11:59:21 EDT 2012

Done.

2. concat hasn't been implemented yet?

Thu Aug 16 12:05:43 EDT 2012

Okay! Making progress. Library appears to be in place now.

Now to face the expected problems. It thinks it needs to know about a list of
cells. Why do I think it shouldn't have to know about a list of cells?

Let me start by doing simple things.
Given a full board, print it out, see how it prints.
Then check isvalid works correctly.

Then I should be in good enough shape to debug the SMT issues.

Thu Aug 16 12:38:44 EDT 2012

Looks like isvalid hangs. Let me start simpler. Rows. Cols. Boxes.

Thu Aug 16 12:40:15 EDT 2012

Aha. looks like boxes hangs.

Thu Aug 16 12:59:40 EDT 2012

Okay, found and fixed the bug. I was using 'm' instead of 'n'.

Now it looks like isvalid works. Shall I try to do the SMT thing?

Sure.

Thu Aug 16 13:00:38 EDT 2012

It thinks it needs a list of cells.

I have this fear that the issue is we are trying to do sharing. We don't
inline a list with free variables, because we want to do sharing, but because
we don't inline it, we have to know about lists, and that we can't do in
yices?

Thu Aug 16 13:13:09 EDT 2012

I think that's the issue. The elaborator wants to share vs, because it is a
complex expression. In this case, it is only referred to in one place, but
it could just as easily be something referred to in multiple places.

If we didn't do sharing... then there would probably be no issue at all.

In fact, I can test this out.

Thu Aug 16 13:17:52 EDT 2012

Yup! If I turn off sharing, everything works just fine... it's just rather a
bit slow.

Bummer. Hum... How do I deal with this?

Thu Aug 16 13:25:15 EDT 2012

Just for note, without sharing, diabolical:
 8 second in yices.
 4.5 seconds in seri! (that's pretty cool I think).

But, sharing should be much better in yices, I would expect.

Thu Aug 16 13:35:51 EDT 2012

I would like to know what kinds of expressions can and can't be expressed to
yices. What kinds of things.

Brainstorm:
- recursive data types are not supported.
- recursive functions are not supported.
- not totally inlined expressions are not supported.

I think the last two points turn out to be the same thing.

Now, what's the problem with recursive functions? Just to be clear?

Well, what I expect to have happen is, a recursive function can't be totally
inlined. Probably what happens currently, if I do full elaboration, is it will
just get stuck in an infinite loop. I can give this a try.

What function should I use?

f 0 = 1
f x = 1 + f (x-1)

Looks like: incr.

incr 0 = 1
incr x = 1 + (incr (x-1)).

Thu Aug 16 13:41:40 EDT 2012

Yup. That's the behavior I get, just what I expected.

So then, what does this all mean?

Can I detect the problem?

Here's a question: can I represent recursive data structures in yices?

I think not.

Can I detect non-yicesable expressions? Well, the inline thing has no
trouble...

Thu Aug 16 13:54:14 EDT 2012

You know, an interesting observation: the lambda I'm getting here is not from
sharing inside an expression, but from sharing across yices assertions. Now, I
think this is a good thing, mostly, but in this case, the only place it is
used is in a Return! So in this case, yices doesn't have to know about it at
all...

I wonder if we could somehow push the shared variable down? Or just don't
share there... that's worth a try.

So, claim is, weak head normal form should never try to share?

That's an interesting idea... Worth a try?

Thu Aug 16 14:01:09 EDT 2012

In the case of sudoku, there's no difference. Looks like that was the only
sharing opportunity?

Let me see if it makes a difference with BCL3.

Want to compare:
- Always Share
- Don't share WHNF
- Don't share ever

For sudoku:
- Always Share: Fails
- Don't share WHNF: 8Mb
- Don't share ever: 8Mb

So, don't share WHNF is equivalent to don't share ever.

For BCL3:
- Always Share: 1.0 seconds
- Don't share WHNF: 1.5 seconds
- Don't share ever: 1.5 seconds

Thu Aug 16 14:07:17 EDT 2012

Well... I'm waiting for those numbers to come in.

What now?

Well, I have my sudoku example. And it shows off data types just swell I
think. Or, maybe not really? I guess not really. Maybe if I add another,
different representation for things underneath: like representing a row as a
bit vector? Or is it, representing a cell as a bit vector, where we promise
only one bit is set. To test for uniqueness, take the logical 'or' of each
cell, and make sure it gives you each bit set. That's cheap to do.

Thu Aug 16 14:14:23 EDT 2012

Here's a thought: I could add a flag to elaboration mode: Sharing or not. This
way, we get more granularity. If you are doing normal form reduction, when it
tries to go to weak head normal form for the arguments, it can keep sharing.
That might be an in-between kind of thing. So the only place I won't use
sharing is for running the Query monad. This, sadly, will still reduce
sharing, potentially a lot. That is, it's not really what I want, ultimately.

What I ultimately want is: share anything you can that yices knows how to deal
with.

Another, unrelated thought: I bet if I look at the generated yices queries, I
can do lots of little simplifications which could lead to a reasonable
performance improvement. Things like: make "not", "&&" primitives. Recognize
if statements, do: (assert foo) instead of (assert (= true foo)). For data
types with a single constructor, don't use a tag. For constructors with a
single field, don't use a tuple. Those kinds of things. They'll make the
queries more readable too.

Thu Aug 16 14:24:28 EDT 2012

I wonder if in this case, I can just rewrite things so it doesn't look like
there is sharing of a list? That's an interesting idea. But... not
sustainable, and I don't think it's actually doable.

Thu Aug 16 14:28:11 EDT 2012

Numbers finally came in. Looks like we really want the top level sharing if we
can get it at all.

Thu Aug 16 14:29:41 EDT 2012

So here's an idea. We can give elaborate a predicate to control sharing.

For full sharing: p = \_ -> True. Says: share everything we can.
For no sharing: p = \_ -> False. Says: never share.
For yices: p x = not (isfunt (typeof x) || unyicesable x)

Where, I suppose, for the time being, unyicesable looks for... reference to a
recursive data type or a name in the environment. But we don't know what are
free or not, so that may not work. So maybe: looks for a recursive data type?

Thu Aug 16 15:08:51 EDT 2012

Talked with Nirav.

Thoughts are:

- Don't get stuck on this sharing issue. We can turn sharing off for now if
  it's a problem.

- Double check that strange result I got where using Seri is faster than
  running yices on the generated query.

- It could be worth at some point trying to implement my sudoku solver in
  yices1 directly. Compare the performance of that with my seri version.

- Nirav thinks the big next thing to do is: make it easy to interface seri
  with haskell:

  Have a way to pack and unpack haskell values to seri.
  Have a way (using quasi quoters perhaps) to write seri functions.
  Have a way to run a query using seri.

I should also check for myself how much difference sharing makes to
performance. If it's really tiny, then just turn it off. It's possible it
could be tiny.

Okay, so here's my proposal for the rest of today:

1+ Clean up and check in the sudoku stuff.
2+ Update yices2 libraries so everyone is pointing to (2.1.0).
3. Run some numbers, with profiling not compiled in:
    BCL3 x Sudoku, Share x Noshare, yices-2.1.0 x yices x seriq x seriq2

Then think about how I can make it easy to interface seri with haskell. Using
sudoku would be a good concrete example to try out: how could I implement a
sudoku solver in haskell that uses seri as a library?

Thu Aug 16 15:34:38 EDT 2012

Waiting for some debug output. Let me give some thoughts.

How to make it really easy to interface Seri with haskell... Could we make a
haskell monad?

We could if we had some way to represent a free variable of any type. That's
slightly annoying...

So, I could make an expression which uses Free, if I lift all the data
types... But for recursive data types, that's not easy to do. We basically
want to describe an expression which can have a Free variable anywhere inside
of it.

Let's say you as the user are willing to do this. Construct an expression
which may contain free variables, you'll have to have a different kind of type
for things in order to handle it.

Ug. That's kind of the whole point of monads though, isn't it? Isn't it nicer
to describe the monad in seri?

Assertions involve free variables. Queries involve free variables.

What's easy is the following:

- You write a query entirely in seri.
Ideally we have the ability to slice in haskell objects to the query. That
would be nice. Otherwise, just have a way to do application, because you could
describe that sort of thing that way:

For example:

myquery a = app [s| \a -> do { blah blah referring to a } |] (pack a)


Thu Aug 16 16:02:33 EDT 2012

Performance results are in:

BCL3 noshare seriq2: 3m04s
BCL3   share seriq2: 6s
BCL3 noshare yices2: 1.4s
BCL3   share yices2: 1s
Sudoku noshare seriq2: 7s
Sudoku noshare yices2: 8s
Sudoku noshare seriq: 15s
Sudoku noshare yices: 0.15s

The rest didn't finish. They all failed for some reason or another.

What's the observation here? Sharing doesn't make a whole lot of difference in
the generated yices query, but it makes a difference, some cases hugely, in
the seri elaborator. That's probably not so surprising... But maybe a little?

Like, maybe I should walk through elaboration of something and see where all
the time is spent. I have this funny feeling we are spending lots of time
elaborating already elaborated expressions. The sharing implementation perhaps
just cuts down on this.

This suggests to me: don't worry about sharing in the generated query. Just
figure out how to not repeat elaboration work in the elaborator. I think, for
example, if we annotated each expression in elaboration with it's state:
unelaborated, WHNF, or NF, then we can save ourself a whole bunch of work.
That should be the next step in performance for the elaborator.

If it turns out sharing doesn't make that much difference, may as well not do
it... given how it complicates things.

