
Mon Oct 15 08:14:11 EDT 2012

What now?

I think the next step is to get STP to work. To start, make a pretty printer
for SMTLIB2.0 (based on the yices pretty printer, because it's almost exactly
the same), generate the sudoku query with that, run it under STP directly,
and see what happens.

If that works, then I can figure out how to parse evidence from STP. Then
implement an STP interface. At that point, STP should be working.

Mon Oct 15 08:21:52 EDT 2012

I'm looking through the generated queries. They actually look very nice.
Some comments:

if free1
  then if free1 
     then a
     else b
  else c

This ought to simplify to:

if free1
    then a
    else c

(for Bluespec)

And:

if free1
   then false
   else b

This ought to simplify to:
 (not free1) && b

(For Sudoku2)

Mon Oct 15 08:45:32 EDT 2012

Thinking about these syntactic simplifications...

What do you think about reducing boolean expressions to conjunctive normal
form? That should simplify it a bunch, right?

Well, I suppose, so long as we don't loose information about sharing.

Do I know how to do that?

Let's say we have a formula with AND, OR, NOT, and IF

First, we can represent IF as

if p
  then b
  else c

as: (p AND b) OR ((NOT p) AND c)

The trouble is, we have replication there.

This is like, the same sharing problem I have with Seri. You want to inline to
simplify, but if that doesn't work, you want to share.

I'll not touch this for now.

Err... there are lots of silly simplifications we could do, and I bet if I
reduced to some normal form... Or bdds. Or something? Wouldn't that be nicer?
I'm not sure.

Mon Oct 15 09:06:10 EDT 2012

Anyway, that's fun, but not so important, again, because performance isn't a
big deal at this point. And if it is, I know what I can do in the elaborator
to speed up elaboration (memoize toh for declarations, do speculative
elaboration).

Let me trudge on to STP then.

Mon Oct 15 09:19:56 EDT 2012

Perhaps the first thing I should do is simplify the syntax even more.

No Define, or Declare or Tuple or anything like that needed, right?

Commands are just: push, pop, check, assert.

Let me see if I can't get rid of some.

No. I can't get rid of define, because I need a way to define free variables.

Mon Oct 15 09:28:42 EDT 2012

I think, perhaps, I should have Concrete be a multi-parameter type class?
There's a lot of stuff in it which should be reused for all pretty printers,
and a lot which can be shared.

Mon Oct 15 16:34:06 EDT 2012

This is kind of a digression, but it would be really nice to have an IO
monad in seri. How much work would it be to add that?

I would do just what I did for the Query monad, only with IO.

The first primitives I think I want:
  putStrLn

Or, perhaps: putStr. I can build putStrLn on top of that.

putStr :: String -> IO ()
runQuery :: Query a -> IO a

That handles output just fine.
Then all I need is... a way to do input. So, read from a file or getContents.
But that's less common, so no need to worry about that for now.

Cool. Easy. Let me get started then. Dive in, see if it works or not.

Mon Oct 15 17:03:29 EDT 2012

It works! That is... it works with putStr.

The runQuery primitive is harder. Because we have to know which SMT solver to
use, and we might want to specify under what options it runs.

If I get rid of support for errors in SMT translation, we won't need that
option.

But what if you do want a debugging output? Should there be a way to specify
that programatically in seri?

And, again, how do you choose which solver to use?

Ideally you have a command line flag. Or, perhaps even better, an argument to
runQuery which says which solver to use. That would be fine, if yices1 and
yices2 could be used together in the same binary...

I would like to replace seriq1 and seriq2 with this IO approach. It's cleaner.
We can generate prettier outputs. We could even do all the tests in a single
Seri program...

I suppose I could have: serio-yices1, serio-yices2, serio-stp, serio-z3,
etc...

I see no reason not to pass a (Maybe FilePath) for debugging purposes when you
run a query.

Mon Oct 15 17:27:05 EDT 2012

Okay, so to start... ug! It would be so great if all the SMT solvers could
work together, then for runQuery I could specify explicitly which one to use
in Seri, and I only need the one big serio executable for all the seri stuff.

Mon Oct 15 17:32:14 EDT 2012

Looks like I can play tricks to make yices1 and yices2 work together.

The most promising seems to be: objcopy using --redefine-sym old=new.
Then I can define a new yices1 static library whose exported symbols are
redefined to use a yices1 prefix like thing.

If I can do that, then that would be wonderful, because I could have a single
serio executable for everything very nicely.

Let me experiment with this just a little.

Mon Oct 15 17:49:12 EDT 2012

I think it works!

Cool. So, I'll try putting them together in serio and see if it works. Nifty.

