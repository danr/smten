
Mon Jun 25 08:44:15 EDT 2012

We have a bug. Generated yices code reports an error.

Goal today: understand and resolve this bug. By tedious reduction techniques.
Slow and steady wins the race here, trust me.

Mon Jun 25 08:46:30 EDT 2012

Getting: invalid function argument, type mismatch.

The argument is:
    free_1 :: TState

The function is:
  (enq f)

enq has type:
    FIFO2 -> int -> Maybe FIFO2

f has type:
    FIFO2

So yes. I would agree. There's something bad going on here.
Perhaps a type error my type checker didn't catch?

Let's look at the types of these corresponding things in the query.

Looks like it is the call to the 'p' rule:
  enq has type: FIFO2 -> int -> Maybe FIFO2
  f has type: FIFO2
  a has type: int

So, the question is, how did 'a' get type TState?

Or rather, how come 'a' is called 'free_1' and not 'a'? That looks to me to be
the real problem. We are using the wrong name.

Okay, well, I can divide and conquer here. There are a number of places the
bug could be. Let me look at each in turn:

1. The polymorphic lambda expression
2. The monomorphic lambda expression
3. The yices compiled expression

We know (3) is wrong. But where is the bug introduced? This shouldn't be too
hard to figure out. Just print out before and after monomorphization.

The polymorphic lambda expression is wrong. Somewhere a substitution took
place that shouldn't have I feel like.

My hypothesis: 'a' is shadowing another 'a' of type TState, but the
implementation isn't correctly handling it.

There are a number of things I could do to make progress:
- try renaming 'a' to something else, see if the problem doesn't go away.
If it does go away, I'm on the right track.
- look through elaboration code, verify case binding shadows are correct.
- implement a case shadowing test case.
- print out the typed, original query, verify it is correct.

Aha. Looking through the elaborate code, we see there is a bug. Pattern
bindings don't shadow properly.

Let me write up a test case for this, verify it's wrong, fix the test case. I
bet that's it.

Yup. Test fails.
Fixed the bug in elaborate.
Now the test passes.

let's check out the query now.

Now problem with type checking in yices. Good.

There is, however, a problem when run from the pipe instead of the .dbg out.
It looks as if stuff may be getting chopped off again.

So, let me go back to using tyices, see what it shows.

Mon Jun 25 09:26:48 EDT 2012

So... yices works fine if it's reading the input from a file, but as soon as
it starts reading it from stdin, it gives off an error. This is a yices bug.
Perhaps having to do with long lines?

Perhaps I can work around it by passing some special command line arguments to
yices. It seems like certainly using the ffi should fix this. It's just
annoying.

I don't see any options on the command line. I think it should work fine if I
got rid of the -i flag, but that's not in my code, so it isn't easy to do...

Unless I implemented my own createYicesPipe function... That's an interesting
idea. Perhaps worth a try.

Well, I can create the pipe that way. The trouble is, it doesn't work unless
it's in interactive mode for some reason.


Mon Jun 25 10:11:58 EDT 2012

So, here's the plan. Let me look over the existing haskell ffi interfaces to
yices, see if there are any that would be relatively easy to run beneath the
yices syntax we are using.

Other things that would be good to do today:
 - support record constructors
 - support contexts in instances
 - support let in a do statement (if it makes sense semantically)

And another thing I'll have to deal with eventually:
 - demonomorphizing the evidence. This could be annoying.

Oh, maybe I should note, it is long lines being chopped off. Or, at least, it
really looks like that, because it runs out at 2**13 exactly.

Is there an easy way to insert newlines? Would it work in interactive mode?
No, you can't even insert newlines in interactive mode.

So you'd just have to make the lines shorter somehow, which is really
annoying, and I don't want to do.

Is there some way to get rid of interactive mode? Not, I fear, if you want to
be interactive still.

Fine then. Let me look at the FFI interfaces, see if I can make any of those
work.

Mon Jun 25 10:50:01 EDT 2012

Looks to me like neither yices painless nor yices easy have support for data
type declarations. Though maybe I'm wrong. I need to look at the yices c-api
to figure out how to do that.

If the yices c-api supports it, I suspect yices painless makes the most sense
to use. Not the edsl, but the low level stuff. Let me look up the yices c-api.

The only thing I see in the c-api for data type declarations is:
parse_command. Which takes a command as a string. Does painless have an
interface to this?

No. It doesn't. Perhaps I can add it myself. The tricky part is the
string conversion.

Hum...

I think, then, the task is fairly straight forward. Use the low level
yices-painless interface, be able to submit a list of Y.CmdY, and be able to
submit a call to Y.check. That's the only interface we need. 

If we need to support constructs that painless doesn't, do it through the
parse command function, which I'll have to wrap myself if needed.

Mon Jun 25 11:14:08 EDT 2012

Okay, let me get started on this path.

First step: figure out how to do my simple example in yices-painless directly.
This will figure out the build information and all that annoying stuff.

Mon Jun 25 11:52:20 EDT 2012

Okay, so I can use the low level interface. That's good. I just had to patch
up yices-painless to make it work :(. It's rather verbose.

Anyway, it would also be nice, eventually, to read the model, but let me not
worry about that so much right now. I can return an empty model to start.

Okay, cool. I'm going to have lunch, then I'll come back and ...
Try to implement the two functions: 
 runCmdsY' :: ctx -> [Y.CmdY] -> IO ()
 checkY :: ctx -> IO Result

Hopefully it isn't too bad.
 
Mon Jun 25 13:34:46 EDT 2012

Looks like not so much is supported through the c api. Sadly. Including type
and data definitions. But, there is a back door, which is the command,
expression, and type parser functions. I pass a string, it executes them.

I think this should be usable to solve the problem I'm having. We can easily
come up with the string for the commands, because Show already gives us that.
So we can default to that. If that works in general, then we should just use
that in general. There is some concern, however, that it may not work for
longer strings (but hopefully that's not the case).

If it works in general, then really there's no need for yices painless. I can
pull what I want and be done with it. Otherwise, we can use it for most
things, and just use painless for the assert predicates, which are what tend
to be long? I hope so.

Let me start with reusing painless, and get rid of that later if it works.

The interface:

c_yices_parse_command :: Context -> String -> IO Bool

Let me read enough about the FFI to figure out how to support char*.

Oh, looks pretty easy. Cool. Let me try it out.

Trouble: yices painless doesn't export the context, so I can't access it or
make use of it.

In other words, it seems to me, at this point, that yices painless is not
contributing much. Especially if the only interface I need is parseCommand.

Okay, let me try going this route.

Mon Jun 25 14:33:26 EDT 2012

It works. Nifty.

Now, it would be quite nice to have some form of evidence parsing. Just so
when something is not satisfiable, it says so.

It would probably also be useful to turn on type checking, and read errors if
there are any.

Mon Jun 25 14:53:19 EDT 2012

Problem: multiple includes. Why does that happen?

Mon Jun 25 15:03:57 EDT 2012

Found and fixed the problem.

Now, thinking about this always thing...

I think what we really want is something like...

always :: (a -> Bool) -> Query ()

Which fails if it's not the case that the predicate is always true. But we
would also like info about what counter example there is.

But if we return the counter example, it gets confusing. So, what I suggest
is... Well, what I would like to do is have it fail with a pretty string if
the predicate doesn't hold, where the string includes the counter example. But
that requires we have a way to show 'a'.

Should I have:

always :: (Show a) => (a -> Bool) -> Query ()

That way I can output the string if it fails. Err...

An alternative would be something like:

counterexample :: (a -> Bool) -> Query (Maybe a).

Which checks if there is a counter example or not. But that may not be in the
spirit of what Nirav is looking for.

Anyway, having a counter example isn't helpful until I can actually read the
evidence. Get the model back and interpret it.

So, for now, let me use 'always' without outputting anything or returning
anything.

Mon Jun 25 15:23:30 EDT 2012

No. I definitely need to show the evidence, otherwise I won't have any faith
in my tool.

Let's see if there's any easy way to get the evidence from the c api.

I would like: given a variable name, return... ideally the string expression,
which I could then try to parse.

Err... it's not looking good. If I know it's a Bool, integer, scalar, bit
vector, or Double, I can get the value. But if it's a user defined data type?
No such luck. And given that is most often the case...

hmm... Except, I can evaluate expressions under the model. So I can ask a
whole bunch of questions to reconstruct what's going on, right? This may even
work better as far as monomorphization goes. Because I can ask questions,
which get monomorphized and answered, and I know what they mean at the top
level. Performance may not be great, but maybe that doesn't matter. Don't
worry about that right now.

For example, how about my bluespec question?

We get the answer that something is satisfiable.
Now, what I really want is to determine the value of all the free variables in
whatever you give me.

So, given a free variable name and it's type, what questions can I ask to
reconstruct its value?

Well, what are the cases?

Integer, Double, Bool, ... easy: extract the value directly.

The more interesting question is... well, I guess functions will be
interesting at some point, but let me not worry about that just now, because
that sounds like a hard thing to worry about.

User defined data types.

You have a list of constructors. To figure out which constructor, just ask:
 - is it constructor 0? constructor 1? constructor 2?... And go from there.

So you can figure out all the constructor values. Unfortunately, that's all
you can do. You can't get an integer value.

This is a very unfortunate interface. I guess what I really want to do is
temporarily redirect stdout to a string. Then I could just dump the whole
model to a string and parse it like I was.

Mon Jun 25 15:47:52 EDT 2012

Well, there are other solutions, or work arounds. For example, I could
implement my own version of yices based on the yices library which doesn't
truncate lines. Then use that with the yices pipe code.

Groan.

Anyway, for now, let me just pollute stdout.

Mon Jun 25 16:05:43 EDT 2012

Okay, so... I get a funny result if I modify my bluespec query to have an
implication that the fifo starts empty. It's still says there is a counter
example, a case where the two compositions are not equal, and it gives
evidence, but the evidence it returns doesn't make sense. It's not well typed.

This is disturbing. And hmm... it seems a different implementation of the
implication operator leads to a different result. That's disturbing to me.

Could this be the nocasematch bug?

Anyway, let's take a look at the evidence it's giving:

s = TState {
    a = 4,
    b = 0,
    f = f (...

Trouble. What's Just__dollarTState0?

Oh... I think I see what it's doing...

s = TState {
    a = 4,
    b = 0,
    f = f (fromJust Nothing)
}

Where:
  fromJust Nothing = TState { a = 5, b = 0, f = fromJust Nothing }
  f (fromJust Nothing) = FIFO_Single 0
  
That's... unpleasant. Clever. Sneaky. Unfair. Illegal even.

It's like yices is saying: it's undefined what behavior you get if you
improperly destruct a data type, so, for the purposes of satisfiability, we
can do something undefined and define the behavior to be whatever we want.

But... it shouldn't be allowed to do something undefined.

Wait, but still, how can this satisfy the equality predicate?

Aha! That's it. It's the nocasematch bug. I didn't completely specify
equality on fifos.

That did it.

