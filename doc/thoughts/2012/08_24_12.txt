
Fri Aug 24 10:45:52 EDT 2012

Aha! So, good progress yesterday. One more thing to try today: have a hash map
for primitives. That will be cool.

Also, try Sudoku with sharing. I think the varuse thing may work around that
particular bug, which would be neat.

Plan:
1+ Add support for bit vectors in HOAS elaborator
2+ Use a hash table for primitives in HOAS elaborator
3x Try out the Sudoku's see if they all work
4+ Remove old elaborators entirely
5+ Clean up Fresh. We just need the 2: Fast and Pretty.

At this point, I'll call seri stable for the purposes of todays presentation.
I need to work fast.

Gather more numbers:
- Sudokus, BCL3: yices1 vs yices2 vs seriq vs seriq2

Update and review presentation.


Lots to do today, let me get going.

First step: bit vector primitives.

Actually... I could probably switch to a hash table first, since I have the
todos in place. Yes. Let me try that.

Fri Aug 24 11:02:49 EDT 2012

I tried the hash table. I'm not convinced it's any faster. But I'll leave it
in, because it is cleaner, and should support better the addition of lots more
primitives.

Fri Aug 24 11:04:03 EDT 2012

Let me try out sudoku.

Nope. Doesn't work. Sadness. It actually looks even worse. There are a couple
things not being inlined now that I would have expected.

Oh well. It was worth a hope.

Back to the original plan: support for bitvector primitives.

Let me be guided by my tests.

Fri Aug 24 11:44:54 EDT 2012

There! Bit vectors are implemented.

Fri Aug 24 11:48:44 EDT 2012

Let me double check that sudoku works still with sharing turned off.

Yup. That is the case.

Fri Aug 24 12:00:51 EDT 2012

Okay! Seri is now finalized, I should say.

Now to run some performance numbers.

I know what I want:

For each of: BCL3 (with sharing), Sudoku{,2,3} (without sharing)
             yices1, yices2, seriq, seriq2

The time it takes to run, without profiling turned on.

Let me start by generating the debug files I suppose, with pretty fresh names
turned on.

Fri Aug 24 12:53:18 EDT 2012

There's a problem with how we figure out which constructor of a data type is
set. We make assertions, but if there are multiple solutions, these assertions
could force us to look for a different one from what we found. That's bad.
Because two different assertions could force different solutions and we could
get an inconsistent realization.

Fri Aug 24 15:52:04 EDT 2012

Okay, so the presentation is as good as it's going to get. The rest of the
work today is packaging things in a nice way. Hum. What should I do?

Update readmes, and go through code, add comments and such.
It would be nice if there was a user guide somewhere, somehow...

Maybe build the cabal package and include that in the distribution? That
sounds reasonable.

- update documentation on all the executables much better?

