

Fri Jun 22 11:06:57 EDT 2012

I fixed the multiclause thing.
Type checking is giving me useful errors! That's so nifty. It's caught a lot
of bugs.

Next thing I need: define /= for State. Which means I'll want to define the
Eq class and give an instance of it. Too bad I don't have deriving clauses?

Fri Jun 22 11:21:33 EDT 2012

Problem with context! I should really fix this now, otherwise it will come
back to bite me, many times, I'm sure.

I try runquery, and we try to look up the instance, and it fails. At least it
tells me what the problem is.

I should fix this now in typecheck...

How should it be done?

Okay, here's what I'll do. I'll think about how to do it. Then continue
working on the bluespec query to flesh out other todo items. Then, after
things settle, I should come back and work on implementing instance checking.

The idea is this: When we run type check, whenever we encounter a variable,
look up its VarInfo. If it is an instance, then we need to check either that
that instance belongs to the context, or it's in scope somewhere.

Hey, so that's not too bad. I'll just add the context to the type checking
monad... oh. It doesn't have one.

I can add this to type inference more easily I think. Let me do that. Add the
context to the inference monad... but I should really do this after merging
the too...

Anyway, whatever I decide to do, it's easy. Add the context to the scope of
type checking. For each var, look up its info. If its an Instance, verify the
class is either in the context or declared.

Note, I should do this after type inference, because otherwise I may not yet
know what the predicate is.

Perhaps I can just make this a post-processing step. After type inference, it
can stand on its own. It's just a Failable monadic everywhere kind of
something with the context of the expression and the declarations in scope.

Let me put it into TypeCheck for now, and hopefully remember to keep using it
after merging type check and type inference.

Fri Jun 22 11:44:18 EDT 2012

There, that works just swell now. Good.

Now I can move on to the test case.

Fri Jun 22 11:46:45 EDT 2012

Oh ho! So really I need contexts on instances for this to work out.
Okay. That will be something important to add next. Let me bypass it for now
though.

Fri Jun 22 11:59:42 EDT 2012

Okay, so this has exposed plenty of issues. That's a good sign at least. Or,
it's good to flesh these issues out. My guess is they are mostly bugs in the
monomorphizer.

So, to check that, let me do the following. Let me print out the declarations
that we monomorphize before sending to yices, both before and after
monomorphization, and identify the bugs.

First, some observations from the yices code I'm seeing:
 - data types seem to be defined just fine.
 - class instances look okay.
 - for some reason I'm defining lots of 'a's and 'b's. All of the same body,
   but with a different type.
    a of type (FIFO2 Integer)
    a of type TState
    a of type Maybe$FIFO2$Integer
    a of type int
    But a should be of type:    a :: TState -> Integer
  Similar with 'b'.

 Then we crash because we try to send something we shouldn't.

Fri Jun 22 12:16:57 EDT 2012

I have a hypothesis.  Monomorphic uses VarInfo to figure out if it's bound,
but you can't do that, because the way we generate VarInfo doesn't know of the
variable declaration is shadowed by a local variable. We need to keep track of
the set of bound variables in the monomorphizer and not look those up.

Okay, that shouldn't be too bad. Let me try it out.

Fri Jun 22 12:19:46 EDT 2012

You know? This suggests to me we shouldn't have Bound in VarInfo, because we
can't know. Instead allow VarInfo to fail, and the user can do what they want
with it.

Fri Jun 22 12:42:48 EDT 2012

Ah, so now we have a silly bug. We forget take the monomorphic expression for
assert predicates. That should be easy to fix.

Fri Jun 22 12:47:32 EDT 2012

Unfortunately, now we are monomorphizing realize (Free x), which I'd rather
not have happen.

This realize and Free thing... Maybe I should have a primitive function "free"
instead of introducing a new data type.

In fact, we could have: ~free :: Integer -> a, be a single primitive.
Wouldn't that be much easier? I think so. Cool.

Fri Jun 22 13:00:23 EDT 2012

Okay, progress, but we seem to have gotten stuck in an infinite loop. In the
pretty printer? Let me turn back on profiling and see if I can't get a hint of
what's going on.

Fri Jun 22 13:04:51 EDT 2012

Looks like a problem in Math.SMT.Yices.Pipe? It's waiting for lines of output?

Looks like Math.SMT.Yices showing of yices commands truncates if they are too
long. Perhaps I can check out the source code to see if I can understand where
this is coming from.

So it sends a line which isn't complete, and yices is waiting for it to
complete, and we are waiting for the response from yices, so it gets stuck in
a deadlock.

Myron had a suggestion: split the assertion into parts. That seems hackish to
me though. Not very satisfactory. Let me see if I can identify the source of
the problem by looking at the show code.

Another thing I could try to do is condense the assertion by making the names
of things a lot smaller.

Fri Jun 22 13:54:23 EDT 2012

Okay, cool. Figure that out. Set buffering mode different.
Now the problem is, stderr isn't output by the build system, which is annoying
where there can be bugs. Like now: for some reason "(,)" is getting into
yices.

Fri Jun 22 14:06:09 EDT 2012

Okay, printed out stderr. Yes, lots of commas showing up. What's wrong?

Fri Jun 22 14:07:27 EDT 2012

The constructor "(,)", is not being renamed for some reason.

Fri Jun 22 14:14:21 EDT 2012

Fixed that. But now we have to make tuples work in general. How do I want to
do that?

Fri Jun 22 14:31:11 EDT 2012

Here's an observation: tuples would work just swell out of the box if they
weren't a special case. If we had a DataD declaration for them.

A lot of other special case stuff would go away with that too. And all the
builtin types can be expressed in the IR, just not in the concrete syntax.

So, what do you think about this: declare all the builtin types in some
prelude module, defined in haskell, perhaps in Seri.Lambda.Prelude. Or
something like that.

Then I don't need any special cases at all, right?

What are the issues with this?
 - if they are pretty printed, the declarations will not be parseable. That
   could be slightly annoying
 - targets may need to have special cases for declaration so they don't try
   declaring these in their language. But that really is a target specific
   thing, so I don't think there is anything inherently wrong with the idea of
   having the declarations in the environment.

It works especially well with the idea of modular compilation and modular type
checking and type inference, because we can just not compile the prelude
module.

I know I've tried this with Bool before and run into problems. But maybe the
problems are just I need to have a way in the haskell target to not include
declarations. Even easier would be to support modular compilation, which I
could do if I supported modular type checking, which shouldn't really be that
hard anyway.

Hum. So, a grand vision is emerging.

It looks like this:
1+ Change Env to be just [Dec], and pass it separately to the env commands.
2. Change Env to be [Module], make everything to work like that.
3. Change type check and type inference to work on a Module at a time.
4. Change the haskell target to work on a Module at a time.
5. Define a Seri.Lambda.Prelude module with these primitive data type
declarations.
6. Remove all the special cases I have for the primitive data type
declarations.

Now tuple will work just fine, without consideration, and the code will be
notably cleaner. No?

That sounds really cool to me. I should do it.

It's a little round about, but it's certainly in the name of progress, and I
suspect is easier than the alternative.

Cool. I'm going to do it. Wish me luck.

Fri Jun 22 16:18:22 EDT 2012

Good. The Env switch has been made. Next step: Turn Env into a list of
modules. See how that works out.

I should no longer need to call flatten. We'll see how it goes.

Fri Jun 22 16:22:29 EDT 2012

Err... I'm not so sure I'm quite ready to dive into a change like this.

It's not entirely trivial.

Could I somehow start from the ground up?

How do we want all of everything to work from a module perspective?

- flatten no longer useful for anything (?)
- load: Should return an Env, Module pair? Or just an Env?
But you'd like to know which module you just loaded.

I'm a little concerned that this may be a premature step. What I want to do
ultimately depends on how I want to implement the true modularity support, in
terms of qualified names and such.

Perhaps I can put off this issue for now, and go ahead with having my prelude?

For now define prelude as a list of declarations, and have flatten stick them
in. That sounds reasonable to me.

That way I jump to (5) and (6), and don't have to deal with modules just yet,
as nice as that would be to have eventually.

I don't actually think I need the modular compilation to make it work
correctly. They should be orthogonal.

Okay. That's decided. Let me try to make my prelude then, and see how it goes.

Fri Jun 22 16:29:37 EDT 2012

Actually, a better way to approach this would be to get Bool working, defined
in Seri.Lib.Bool, don't you think? Try to do that, yet again?

Yes. Let me try that.

Fri Jun 22 16:33:55 EDT 2012

Question: do I want to use my Bool in yices, or their bool?

Let me just use theirs.

Fri Jun 22 16:35:43 EDT 2012

Oh. Now I remember again what the problem I was having is.
The builtin Integer stuff depends on Bool for haskell, but Bool is not defined
where the builtin integer stuff can see it.

This problem goes away with modularity.

This problem will also end up going away if I just don't declare Bool. So, be
able to recognize that and declare nothing in the compiler.

Okay, that worked. But really I should support it the right way. Then I can
handle the rest of the cases properly. Ug.

Fri Jun 22 17:28:45 EDT 2012

Cool. Making progress. Fixing bugs.

Looks like the tuple issue has gone away. Now I'm dealing with multi parameter
data types issues, of which tuple 2 is one example.

In particular, the constructors in yices appear not to support partial
application.

Well, there are two possible solutions which jump out:
1. wrap the constructors in functions which take partially applied arguments.
2. Compile fully applied constructors only.

The problem with the first one is..., well, can we even do it?
Err, yes, we can:

foo a = \b -> \c -> ... -> Foo a b c ...

It's slightly annoying. We have to come up with a name for constructors
different from their base name.

The problem with the second is, what if you want a partially applied
constructor?

Like, ((,) True), which you pass around as a function from a -> (Bool, a).
I suppose you could always wrap this in a function call... that is, you could
always create the partially applied function manually.

I think the first is the right thing to do, but more tedious.

Sigh. Okay, I'll do the first. Make a function called C... where C is the
constructor function. Don't change ConP, but change ConE, and make sure to
define C... for each constructor when declaring data types. Annoying, yes, but
it should work out.

I hope yices can handle big programs, because it's going to get some pretty
big ones. That's what abstraction does for you...

Fri Jun 22 18:17:27 EDT 2012

Ug. More and more bugs to fix.

The Bluespec test case is complaining it's expecting an expression. This is
buried deep inside an expression. Who knows where it will work?

But! The next immediate thing is... declareNeeded needs to work for both Types
and Expressions, so I can get the monomorphic type back.

Ug. I can hack around it if I want... But I really should have monomorphic
work for types as well as expressions.

Okay, groan. Here I go.

Fri Jun 22 18:44:48 EDT 2012

More problems. And I'm starting to hack at things, which is bad.

The problem now: "Expression expected".

So I have to figure out why an expression is expected, where it is expected,
and why it wasn't found.

Fri Jun 22 18:59:04 EDT 2012

Something funny is going on.

I don't know what it is. I have to simplify the expression until I can figure
it out. Maybe I do a foldl instead of foldr somewhere? Or some such? I'll look
into it, a bit at a time.

