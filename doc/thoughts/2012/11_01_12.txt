
Thu Nov  1 09:56:56 EDT 2012

Zero extend is like left shift 0. It doesn't map so perfectly to STP. But it
makes sense as a concatenation. So maybe I should replace it with that.

For now I'll just hard code it as concatenation?
Hmm... Or maybe I can make it not a primitive by using concatenation, and see
if it works.

I think that would be more valuable towards making progress.

Let me just double check smtlib.

Yes, it has concat.

Oh, I see the issue. I implemented concat using zero extend. I should do it
the other way around, especially if yices supports concat.

And the answer is yes, yices supports concat. So let me switch over to that
now.

Thu Nov  1 10:09:01 EDT 2012

Trouble: the type systems poor support for numeric types makes it some concat
doesn't work out properly type wise.

I don't really feel like figuring this out right now.

Thu Nov  1 10:22:58 EDT 2012

Well, perhaps I could add bv_concat, and keep around zero_extend for now
still?

Thu Nov  1 10:37:45 EDT 2012

Next step: get STP to work on Sudoku3. And Sudoku2 I suppose.
* needs multi-argument or to be implemented.

Thu Nov  1 11:33:50 EDT 2012

Now STP supports Sudoku3.
Shall I try Sudoku2?

Thu Nov  1 11:34:47 EDT 2012

Sudoku2 requires 'if'. So yes, I should get that working.

Got that working.

Thu Nov  1 11:39:50 EDT 2012

One issue that's going to come up is, the more backends I add, the more tests
I feel like I need to perform to test them. Like, shouldn't I run all the
tests on all the solvers? The issue is, that takes a long time to do.

Something to think about.

What's the next step? Not all the primitives are implemented. That's a failing
in my test cases. But I can add those easily enough as they are encountered. I
think the core STP support is there. So, work on merging with the master
branch.

What remains before I can do that is to work out this build issue. Why do I
have trouble building enoch? When seri works just fine? Let me investigate as
the next step.

Thu Nov  1 13:05:22 EDT 2012

First, let me figure out where this seri.hi and seri.o are coming from. I
don't expect to see them...

Thu Nov  1 13:06:44 EDT 2012

I don't see them any more. Odd.

Well, that's easy enough. Now then, let's try out enoch.

In the compilation phase: ghc -c enoch.hs, ghc tries to dynamically load stp
and fails.

My suspicion: ghc is bad at dynamically loading static libraries.

Question: why does enoch load it but not seri? I think it's because seri
doesn't do anything involvoing template haskell, so ghc doesn't have to load
any packages. When compiling the seri package, the issue doesn't happen
because it doesn't need to load the seri package when it does the template
haskell stuff.

I wonder if splitting up the packages really would help here. For example, if
the SMT specific stuff where in a different package, would it need to be
loaded for template haskell?

Let me do an experiment. Let me install a new package, and see if that changes
the packages ghc tries to load.

GHC tried to load the following for enoch:
|| Loading package ghc-prim ... linking ... done.
|| Loading package integer-gmp ... linking ... done.
|| Loading package base ... linking ... done.
|| Loading package array-0.4.0.0 ... linking ... done.
|| Loading package old-locale-1.0.0.4 ... linking ... done.
|| Loading package old-time-1.1.0.0 ... linking ... done.
|| Loading package deepseq-1.3.0.0 ... linking ... done.
|| Loading package filepath-1.3.0.0 ... linking ... done.
|| Loading package bytestring-0.9.2.1 ... linking ... done.
|| Loading package unix-2.5.1.0 ... linking ... done.
|| Loading package pretty-1.1.1.0 ... linking ... done.
|| Loading package directory-1.1.0.2 ... linking ... done.
|| Loading package containers-0.4.2.1 ... linking ... done.
|| Loading package process-1.1.0.1 ... linking ... done.
|| Loading package template-haskell ... linking ... done.
|| Loading package transformers-0.3.0.0 ... linking ... done.
|| Loading package cmdargs-0.10 ... linking ... done.
|| Loading package text-0.11.2.3 ... linking ... done.
|| Loading package hashable-1.1.2.5 ... linking ... done.
|| Loading package mtl-2.1.2 ... linking ... done.
|| Loading package syb-0.3.7 ... linking ... done.
|| Loading package seri-0.1.1.1 ... linking ... ghc: /home/ruhler/local/lib/libstp.a: unknown symbol `_ZN7MINISAT6Solver12addXorClauseINS_3vecINS_3LitEEEEEbRT_bjPc'

After installing HUnit, it did not change!

Oh, there was another idea too. What if I just get rid of template haskell
entirely? Do I really need it? Could I use some other technique for
automatically deriving instances of SeriableT and SeriableE? That would be
very nice... Actually, even better.

Okay, so I propose the following lines of inquiery:

* Stop using template haskell. Instead use some other form of generic or
  derived pack and unpack functions. This would be very nice.
* Separate SMT specific stuff into a different library. The idea here is,
  whenever you use template haskell,... I'm not actually sure this will work.
  But regardless, the idea is, don't do both template haskell and import SMT
  stuff in the same module. Do the TH stuff in a separate module (it only
  requires seri).


Okay, cool. Let me spend some time looking into the non-template haskell
approach.

Hmm... Well... Looking at how template haskell is used, it's two ways.

1. Implementing pack, unpack, and serit functions for a given user defined
data type
2. Loading a seri environment statically into an haskell executable.

Number (1) could potentially be solved with a generic pack and unpack kind of
implementation, but (2) won't be helped by that.

What do we want? We want a way to embed a string or a file into an executable.

Well, you could do that manually with some bootstrap process, or writing the
string inside the haskell file itself. That is, given a .sri file, it wouldn't
be hard to generate a haskell file with the contents embedded.

I should add another possible solution: do with STP the same thing I did with
yices: create a dummy library, or perhaps a shared library.

Ideally you could use template haskell, so long as you don't import SMT code
in the same file.

I should do some tests. I should make a two file project, where one does
template haskell stuff, the other does HUnit stuff, and see if the template
haskell loads HUnit.

Hmm... Many roads to solutions. I really, honestly, think the best would be,
if it is possible, to make it so template haskell doesn't try to load STP or
yices1, given that you don't use them. That would be the most natural. And, if
splitting of packages will work, I know have a nicer way to do the build
system in terms of two different packages, because I can install and register
packages.

Yes. So let me check to see if that's a feasible solution, using the test I
outlined above.

Thu Nov  1 13:30:18 EDT 2012

I have the following experiment:

FooTH: implementation of template haskell functions
Foo: use of template haskell functions from FooTH
Main: use of Foo

Doing nothing special, the following packages are loaded by ghc:

Loading package ghc-prim ... linking ... done.
Loading package integer-gmp ... linking ... done.
Loading package base ... linking ... done.
Loading package array-0.4.0.0 ... linking ... done.
Loading package deepseq-1.3.0.0 ... linking ... done.
Loading package pretty-1.1.1.0 ... linking ... done.
Loading package containers-0.4.2.1 ... linking ... done.
Loading package template-haskell ... linking ... done.

Now we want to ask... What packages are used if I import things into different
places. For example, let me import a monad thing from mtl into FooTH, and I
should then see mtl loaded.

Yes. That is the case. Now, instead of loading it into FooTH, let me load it
into Foo. I expect mtl is still loaded.

It's not! It's not loaded.

And just to double check, let me try Main...

It's not loaded!

Ah. Now this is very good news.

It suggests that what determines what packages you need to load is the file
where the TH functions are defined.

Except... enoch is different, right? Because the TH is included in that
package?

I suppose that makes sense, because EnochTH does depend on the seri package
being loaded.

This gives a way out. A strategy that should work. I need to split seri into
two packages.

seri - the core seri, this includes the definition for everything you need for
template haskell. For enochth. And ideally it's as big as possible.

seri-smt - the smt specific parts of seri. Maybe all the SMT parts, maybe just
those which link with an SMT solver. I think all SMT parts makes sense
conceptually.

Cool. Let me see if I can make this work then. I can try this on the stp
branch, because that's not going to change otherwise...

Let me try it out on the stp branch.

Here's the plan:

Hmm... I could even maintain a uniform directory structure...

Let me start with what cabal sees.

build/home      - the pseudo home directory with cabal installation
build/seri      - the directory with seri package: contains seri.cabal and
                  seri source
build/seri-smt  - the directory with smt specific stuff.

The first thing I should do is try this out manually and see if it works. Then
I should make the build system look like that, and figure out how I want to
have the build system work nicely.

Cool. So, try it out manually. Create a seri package, call it 0.2.0.0, and
seri-smt package, call it, um, 0.1.0.0 I suppose, no need to keep the packages
in sync. Install them both in my home directory. Then try building seri,
enoch, and sudoku based on them. I shouldn't need any dummy libraries.

Thu Nov  1 14:12:17 EDT 2012

It works! It totally works.

I should definitely take this approach. It solves all the problems, and makes
the most sense.

I think I can just hardcode the cabal files. No need to generate it, because
each one does a separate library.

So good. I'll try to switch to this layout next.

I can have a seri directory (instead of src), and seri-smt, and seri-bin. Then
just copy those wholesale into the build directory.

Each of those directories can have a sri/ directory with the sri library.
Though I could also ship that separately? I kind of like for it to be in one
place, but it does have to be distributed. No, I'll distribute it as needed
with the corresponding packages.

Thu Nov  1 15:04:00 EDT 2012

I'm reworking the build layout now.

I have a concern: will changes in the seri package cause seri-smt to be
recompiled appropriately? I suppose we'll find out.

Thu Nov  1 16:45:19 EDT 2012

What now? I merged stp with the master branch. There's a bunch of cleanup work
to do. I suppose it makes sense to do that cleanup work. It's not as exciting
as adding support for STP...

Oh, now that we have STP, there's this question of what queries are supported
by what solvers. Perhaps that has something to do with the cleanup work. If I
organize my tests right, and then figure out which tests can be run on which
solvers, then figure out how I could express that. Not sure. It will take
thought.

Anyway, cleanup would be a good use of my efforts, as things have got rather
messy.

Thu Nov  1 18:53:09 EDT 2012

Cleanup plans.

First thing is to go over the planned layout for sri files.

+./seri/sri/Seri/Lib/Prelude.sri -> Prelude.sri
+./seri/sri/Seri/Lib/Maybe.sri -> Data/Maybe.sri
+./seri/sri/Seri/Lib/Array.sri -> Data/Array.sri
+./seri/sri/Seri/Lib/Vector.sri -> Seri/Vector.sri
+./seri/sri/Seri/Lib/Bit.sri -> Seri/Bit.sri
+./seri/sri/Seri/Lib/Tests.sri -> Seri/Tests/Basic.sri
+./seri/sri/Seri/Lambda/Tests/BadType2.sri
+./seri/sri/Seri/Lambda/Tests/InstCtx.sri
+./seri/sri/Seri/Lambda/Tests/BadType1.sri
+./seri/sri/Seri/Lambda/Tests/Ctx.sri
    -> Seri/Tests/MalTyped/*.sri
+./seri/sri/Seri/Enoch/Enoch.sri -> Seri/Tests/Enoch.sri

+./seri-smt/sri/Seri/SMT/SMT.sri -> Seri/SMT/SMT.sri
+./seri-smt/sri/Seri/SMT/Array.sri -> Seri/SMT/Array.sri

+./seri-smt/sri/Seri/IO/SMT.sri -> Seri/SMT/SMT.sri (merge in)
+./seri-smt/sri/Seri/IO/IO.sri -> Prelude
+./seri-smt/sri/Seri/IO/Tests/Simple.sri -> Seri/Tests/HelloWorld.sri
+./seri-smt/sri/Seri/IO/Tests/Query.sri -> (delete)

+./seri-smt/sri/Seri/SMT/Tests/Tuple.sri
+./seri-smt/sri/Seri/SMT/Tests/Array.sri
+./seri-smt/sri/Seri/SMT/Tests/BCL3Small.sri
+./seri-smt/sri/Seri/SMT/Tests/Core.sri
+./seri-smt/sri/Seri/SMT/Tests/AllQ2.sri
+./seri-smt/sri/Seri/SMT/Tests/BCL.sri
+./seri-smt/sri/Seri/SMT/Tests/Sketch2QBF.sri
+./seri-smt/sri/Seri/SMT/Tests/AllQ.sri
+./seri-smt/sri/Seri/SMT/Tests/SquaresRaw.sri
+./seri-smt/sri/Seri/SMT/Tests/Sketch2QBF2.sri
+./seri-smt/sri/Seri/SMT/Tests/Bluespec.sri
+./seri-smt/sri/Seri/SMT/Tests/Sudoku2.sri
+./seri-smt/sri/Seri/SMT/Tests/If.sri
+./seri-smt/sri/Seri/SMT/Tests/Sudoku3.sri
+./seri-smt/sri/Seri/SMT/Tests/BCL/Tuple.sri
+./seri-smt/sri/Seri/SMT/Tests/BCL/Portal.sri
+./seri-smt/sri/Seri/SMT/Tests/BCL/FIFO.sri
+./seri-smt/sri/Seri/SMT/Tests/BCL/Reg.sri
+./seri-smt/sri/Seri/SMT/Tests/BCL3.sri
+./seri-smt/sri/Seri/SMT/Tests/Squares2/FIFO2.sri
+./seri-smt/sri/Seri/SMT/Tests/Squares2/Squares.sri
+./seri-smt/sri/Seri/SMT/Tests/Squares2/ModelChecker.sri
+./seri-smt/sri/Seri/SMT/Tests/Squares2/Reg.sri
+./seri-smt/sri/Seri/SMT/Tests/Squares2/Prelude.sri
+./seri-smt/sri/Seri/SMT/Tests/BCL2.sri
+./seri-smt/sri/Seri/SMT/Tests/HelloWorld.sri
+./seri-smt/sri/Seri/SMT/Tests/Query1.sri
+./seri-smt/sri/Seri/SMT/Tests/FIFO.sri
+./seri-smt/sri/Seri/SMT/Tests/Casenomatch.sri
+./seri-smt/sri/Seri/SMT/Tests/Squares/FIFO2.sri
+./seri-smt/sri/Seri/SMT/Tests/Squares/Squares.sri
+./seri-smt/sri/Seri/SMT/Tests/Squares/ModelChecker.sri
+./seri-smt/sri/Seri/SMT/Tests/Squares/Reg.sri
+./seri-smt/sri/Seri/SMT/Tests/Squares/Prelude.sri
+./seri-smt/sri/Seri/SMT/Tests/Bit.sri
+./seri-smt/sri/Seri/SMT/Tests/Query2.sri
+./seri-smt/sri/Seri/SMT/Tests/Sudoku.sri
+./seri-smt/sri/Seri/SMT/Tests/Complex.sri
+./seri-smt/sri/Seri/SMT/Tests/Share.sri
    -> Seri/SMT/Tests/...

Cool.

The other thing I want to look at is the data-files thing in cabal. It make
sense to just put all of the sri files in the seri package rather than
splitting it into two different packages. You just need the seri-smt package
to run any of them. I suppose ideally you could separate IO from SMT somehow.
But let me not worry about that now.

Looks like I can define: data-dir as sri, then data-files listed, then import
a package Paths_seri which will get me the info I want.

Looks like it defines a getDataDir function, which is exactly what I want.

Cool. Let me try this out.

I want to add a function in... Seri.hs? Sure. Seems reasonable to me.

Thu Nov  1 19:42:56 EDT 2012

Cool. I like that. What's the next thing?

I think the next step is to update sri file layout. This could be... a bit of
tedious work, because I think I make assumptions about where things are rather
a bit in the code.

Start with Prelude. Wish me luck.

