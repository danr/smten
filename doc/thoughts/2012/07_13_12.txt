
Fri Jul 13 09:20:03 EDT 2012

Goal for today:
1. get arrays working in smt, to the point where Myron should be able to use
them without trouble.

2. Add numeric types.
Start with just numbers which can be tested for equality.
Then think about how to add linear numeric type arithmetic, and how I can
solve those in the type solver.

Of course, if I feel like cleaning the code along the way (probably after
arrays are shipped), that would certainly be a good thing.


Fri Jul 13 09:41:25 EDT 2012

Problem: Equality of two arrays, in smt, where one of the arrays is free. The
problem is, we don't know the bound of the free array, so we can't inline away
smta_eqn, which is recursive, so it isn't defined.

One idea is, I could use the SMT solver to assert equality of arrays. Just ask
if there exists an index in bounds of the array for which the arrays are
unequal. There you have it, equality of arrays in smt.

Unfortunately, this doesn't give us a way to evaluate statically if the arrays
are equal, which we could do using the list definition.

Even if we left smt arrays entirely primitives, I don't think you could test
for equality in general using a yices expression. This may be the only way you
could check for equality.

You know what conclusion I'm arriving at? Dynamically sized unbounded objects
are really hard to work with in smt queries. Be they lists or arrays or
whatever. Because you need recursive functions to manipulate them, which
aren't allowed. And though inlining can work in some cases, it can't work in
general.

Now, if, on the other hand, we used a bounded representation, then we should
have no problem. And in this case, given that we kind of know our fifos are
limited to size 2... it seems silly to use an unbounded representation for
that.

Okay, so let me try this query based equality check.

Wait, first I want to check, so that was:
assert (arr2 == arr), where arr2 is free. But if we flip it the other way
around, then we ought to be able to statically inline everything. Let me see
if that works...

If it does... that would be sad.

No. That doesn't fix it.

We have another problem though, which is we can't realize a free fifo
variable. Perhaps that doesn't matter. Maybe I shouldn't worry about that now.
It's for two reasons: 1: we can't interpret a function 2: there's a bug in
realize: the declarations it looks up are the polymorphic definitions, but it
looks them up in the monomorphic environment, which doesn't work.

Let's not try to read the evidence. Let's just try to make the assertion and
see if it works or not.

Fri Jul 13 10:21:12 EDT 2012

Defining eq using Query doesn't work...

Because, the input to the query is a free variable, but the output from the
query isn't a function of that free variable. The free variable goes away.
Then if we do an assertion... the assertion doesn't propagate back up.

This is an interesting problem... It's a bit unintuitive a behavior if you ask
me.

Here's a case where using scoped queries to invert a "there exists" question
gives you something different from a "forall"! Surprising...

Hypothesis: it is not possible to test for equality of arrays if the bounds of
one of the arrays is unknown.

Well, but we should still be able to, if one of the arrays is unknown. But
certainly not if both of the arrays are unknown. But isn't always one of the
array bounds known?

Okay, so let's say instead of making the array free, I make just its contents
free, and the length is fixed. Shouldn't that solve all problems?

Fri Jul 13 10:40:51 EDT 2012

Okay, so that seems to fix things mostly.

I've hit a bug in, I suspect, the yices2 FFI. We crash in the garbage
collector.

I'm not sure what I can do about this. Just look over the FFI, and anything
that could cause problems.

Fri Jul 13 10:53:43 EDT 2012

Okay, so here's what I think the right solution is. Detect whenever I'm not
generating a declaration because of it being recursive, and give an error. At
least, try to do that. I fear it won't work for the list data type, but try it
and see what happens. That way, at least, there's a distinction between a bug
in my compiler, and something that I don't think I can support.

Fri Jul 13 11:26:10 EDT 2012

I don't know. It's still seg faulting :(. I just put in a stupid hack that
makes the seg fault go away. That will have to do for now.

Fri Jul 13 11:32:14 EDT 2012

I put in an error message for mutually recursive stuff. That looks to be okay
to me.

Next steps before shipping:
- pretty print let expressions.
- add sugar for arrays

Fri Jul 13 12:17:19 EDT 2012

I started adding "sugar" for arrays. Here's my observation: I should just
reuse the parser. Give the expressions in seri syntax and parse.

One reason that might not work is if you want to take arguments. But we can
add support for quasi quoting of anything that we can print pretty.

The idea is: you give an expression and a string with a hole. I put into that
hole the pretty printed expression, then reparse the whole thing.

I worry maybe there's something that pretty printing and parsing back in will
change in unpleasant ways, but then again, maybe it won't.

So, for example, I propose something like:

class (Pretty a) => With a where
    with :: [a] -> String -> String

Embeds an element into a hole.

And we can say things like:

parse (with [t] "SMTArray @1 -> Integer -> @1")
And get back the parsed expression.

That sounds cool to me.

If you wanted to mix both types and expressions, you need to nest:

parse (with [t] (with [e] ...)
Oh, that will cause annoying issues with escapes. Sadly.

How about:
with [("@1", t)] (with [("@2", e)] "(foo :: @1) @2"

Then you could give them names too.

Fri Jul 13 14:39:30 EDT 2012

Okay, array and let are shipped. Now to think about the next thing.

The next thing is ...

Numeric types.

Why?
Primarily: 
- bitvectors
- vectors in general

The basic support is, I think, trivial. But let's go through and see.

- Add to IR: NumT Integer, which is a numeric type.
- Add to parser: integer as a legal type.
- Add to pretty printer, and type solver the case for NumT.
There's nothing hard about it. It can be treated just like a ConT for now, in
fact.

In fact... we could just parse a number as a ConT whose string name is the
number, and then we would have "numeric" types.

Except, there's more to it than that, because you want to do things with
numeric types. Things like:

- Extract the integer value of a numeric type.
For example, we could have some class:
 Numeric a where
    valueof :: a -> Integer

Then you can say things have to be numeric.

Err... this would let you define your own instances of numeric, though, which
seems strange to me. What, do we provide builtin instances of Numeric for any
NumT?

- form types with arithmetic 
This is needed for primitives like:
concat :: Bit n -> Bit m -> Bit (n+m)
truncate :: Bit n -> Bit m, where m <= n
extend :: Bit m -> Bit n, where m <= n
 
Hmm... the yices primitives for bit vectors are poor motivators for this.
Because it looks like yices bit vectors are not really typed differently, but
rather constructed to have the right type, with dynamic checks for size.

Either that, or you need dependent types to do things like:
 extract :: (x : Bit n) (i : Integer) : Bit (n-i)

Perhaps better motivation comes from bluespec.

Relationship provisos:
 - Add, Mul, Div, Max, Min, Log
For defining types:
 - Exp
Example uses:
 Mul - used to say how many bits in a vector of N, M bit elements: N*M
     - or concat 
 Add 1 x - append
 0 - a valid numeric type
 Add m n - (++) of vectors
 Log m i - for when i indexes into something with m elements,
           or counting number of m elements: need i bits.
 Max - for zip
 Div x 2 - mapPairs function
 Div m x - toChunks

Fri Jul 13 16:00:20 EDT 2012

A brief survey didn't find any obvious work already done on this that I could
just steal from.

So, what do I want, then? What do I need to support?

Let's start by assuming I could do whatever crazy stuff in the compiler I
wanted. How would I want to express things, ideally?

I think you want a mini expression language for types:

numbers, +, *, -, /,
Maybe I can come up with symbols for min and max, maybe: & and |.
for exp: **.
for log: //.

Or something like that.

Then you have a way to access the value of a numeric type somehow...
valueof.

Then, maybe you want a way to say: this is a numeric type.

valueof :: numeric n -> Integer

That kind of thing?

Or, maybe the value of a numeric type is just the corresponding integer?
That's a little weird, but it could be cool. It's like, a numeric type is a
subset of the Integer type and can be lifted? I don't know.

I wonder if you also want constraints. If you can't always encode them
directly in the type signature of something.

Like, instead of:
 concat :: Bit n -> Bit m -> Bit (n+m)
 concat :: (k = n+m) => Bit n -> Bit m -> Bit k

That perhaps puts more constraints on things that you couldn't otherwise
specify. Like, maybe you want to say:

 take5 :: Bit n -> Bit 5

But, n has to be greater than 5, so we want a constraint:
 take5 :: (n > 5) => Bit n -> Bit 5.

And this suggests we may want comparison operators too in our constraints.

Hum...

And now there's been a call for modularity support in seri, which I think
would be very very very good to have. I should think about how that could be
made to work nicely.

All things to think about this weekend, and I'll get back to you next week.

