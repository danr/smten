
Sat Aug  4 12:09:57 EDT 2012

Debugging heap elaborator.

Observation:

The expression: (\x -> (x*x) + 1) 5;

Elaborates to: 
    __prim_add_Integer 25 (let { x = 5 ; in 1} );

Which itself elaborates to 26.

So, it looks like the trouble here is not so much trouble with some of the
elaboration rules. It's more that we don't finish elaborating fully when we
ought to.

Let me read through and double check that I always call elabH on r again after
performing some sort of reduction.

Sat Aug  4 12:17:34 EDT 2012

Looks to me like every branch which could make more progress does.

So switch to a better mode of debugging...

Perhaps I can trace through by hand? Maybe that will help?

Sure, it's worth a try.

Let me try to write a log of the reference values, to keep the history in
tact.

~1: HeapifyEH: (\x -> (x*x) +  1) 5
~2: HeapifyEH: (\x -> (x*x) + 1)
~3: HeapifyEH: 5
~1: AppEH ~2 ~3

elab ~2:

Sat Aug  4 12:25:46 EDT 2012

Aha! I know what debugging information I want to print out.

Any time we write a reference, print out:
~ID: value

Then I should see this created, and it should be obvious, hopefully, what's
going on. Let me try that.

Sat Aug  4 13:44:49 EDT 2012

Oh ho... hum?

For some reason we have HeapifyEH 25, which I don't expect.

Oh. That looks like it. integerEH and boolEH should use literals, not Heapify!
Because they are expected to be fully elaborated.

Okay, I can fix that.

Sat Aug  4 13:48:49 EDT 2012

Good. That was the first bug.

Let's see if I can find another.

Sat Aug  4 13:50:55 EDT 2012

I suspect the problem is with recursion. Let me try that out in my foo test.

Well, factorial works just fine... That's odd.

Sat Aug  4 13:54:08 EDT 2012

Aha, I bet the problem is with case statements.

Sat Aug  4 14:02:03 EDT 2012

No... We get stuck in an infinite loop somehow...

Here's the deal:

elab ~3 makes no real progress, but continues to elaborate in a loop.

First, let's figure out what ~3 is. Then let's figure out how it elaborates,
and why no progress is made. It's a pretty tight loop.


~3: RefEH ~20
~20: AppEH ~17 ~19
~19: AppEH ~18 ~7
~18: LamEH b :: Bool; ~9
~17: AppEH ~16 ~7
~16: LamEH b :: Bool; ~13
~13: LamEH a :: [Char]; ~12
~12: HeapifyEH case ((a :: [Char]), (b :: Bool)) of {
  ((msg :: [Char]), (True :: Bool)) ->
    (Seri.Lib.Prelude.return :: () -> Test ()) (() :: ());
  ((msg :: [Char]), (False :: Bool)) ->
    (Seri.Lib.Prelude.fail :: [Char] -> Test ()) (msg :: [Char]);
}
~9: HeapifyEH "0"
~7: HeapifyEH (True :: Bool)

Oh, something funny seems to be going on here...
Let me inline some stuff to see what's up.

~3:
~20: AppEH
~17:   (AppEH 
~16:      (\b ->
~13:            \a ->
~12:                   case (a, b) ...)
~7:       True)
~19:   (AppEH 
~18:      (\b -> "0")
~7:       True)

Okay, so that's a perfectly normal kind of an expression, right?
Except... it seems a little odd to me, is all.

((\b -> \a -> ...) True) ((\b -> "0") True)

No, that's okay. We did some reduction of b it looks like.

Good. Now, how does this elaborate?

|| elab ~3
|| elab ~17
|| elab ~16
(reduce b ~7 ~16
|| ~21: LamEH b :: Bool; ~12
|| ~22: AppEH ~21 ~7
|| ~23: LamEH a :: [Char]; ~22
|| ~17: RefEH ~23
|| elab ~17
(reduce a ~19 ~22)
|| ~24: LamEH a :: [Char]; ~21
|| ~25: AppEH ~24 ~19
|| ~26: LamEH a :: [Char]; ~7
|| ~27: AppEH ~26 ~19
|| ~28: AppEH ~25 ~27
|| ~3: RefEH ~28


After first reduction
~3:
~20: AppEH
~17:
~23:   (\a -> 
~22:        (AppEH
~21:          (\b -> case ... )
~7:           True))
~19:   (AppEH 
~18:      (\b -> "0")
~7:       True)


After second reduction
~3:
~28: AppEH
~25:   AppEH
~24:     (\a -> \b -> case ... )
~19:     (AppEH 
~18:        (\b -> "0")
~7:         True)
~27:   AppEH
~26:     (\a -> True)
~19:     (AppEH 
~18:        (\b -> "0")
~7:         True)

Okay, that actually looks correct. What's next?

|| elab ~3
|| elab ~25
|| elab ~24
(reduce a ~19 ~21 
|| ~29: LamEH a :: [Char]; ~12
|| ~30: AppEH ~29 ~19
|| ~31: LamEH b :: Bool; ~30
|| ~25: RefEH ~31
|| elab ~25

Looks good:
~3:
~28: AppEH
~25:
~31:  \b ->
~30:       App
~29:          (\a ->
~12:             case ...)
              ~19    
~27:   AppEH
~26:     (\a -> True)
~19:     (AppEH 
~18:        (\b -> "0")
~7:         True)

(reduce 
|| ~32: LamEH b :: Bool; ~29
|| ~33: AppEH ~32 ~27
|| ~34: LamEH b :: Bool; ~19
|| ~35: AppEH ~34 ~27
|| ~36: AppEH ~33 ~35

Which gets us back where we started? Or... it seems to be doing so, except
will still have the arg ~19 making its way inside...

Erg. It's still not clear to me what's going on. We are reducing always,
right? Or just going back and forth?

So I changed the way LamEH is reduced. Actually do a reduction, don't be lazy,
because it's being lazy that causes problems? I'm not sure. But it seems to
have fixed that issue. Let me start doing more tests, see how they go now.

Sat Aug  4 15:15:47 EDT 2012

So, everything looks to be working except:
- the array tests are slow
- arrupd hangs??

Yes, looks like arrupd hangs.

Sat Aug  4 15:29:56 EDT 2012

Let me look at some performance things. Where is all the time being spent?

- reading references
- testing for reducable (expected)

In fact, almost all the time is in checking for reducable. So the next thing I
should do is to build up my cache for that, as I proposed before.

Yup. 99% of the time is spent in reducable!

Not so much of that is spent in checking reducability of expressions it
seems...

We can compare references for equality. Reducable returns the same reference
if nothing has changed.

Why not have reducable check itself, after trying to reduce expressions, if
they have changed or not? If all the sub expressions are the same... That is,
if the expression I'm going to return is the same as the one I'm reducing,
then return the old one, for sharing purposes.

That would work fine, except for the question of what I should do when I run
into heapify. How to know if it is reducable? Well, as a first step, I can
call reducableE on that expression.

Umm... a cache would probably be better though. We could look up immediately
if something is reducable, no? Rather than having to traverse the entire
expression...

One idea is... what we really want to know is, for a given expression (or
reference to an expression), what are the free variables? If we knew that,
then I could just ask at reduction time:
If I'm reducing something that isn't free, I'm done. Otherwise, do the
reduction. What if I cached the free variables for each expression?

Erm. For heapified expressions, though, we would like to cache the
intermediate free variable stuff somehow.

Let's say I have the cache as a separate object. How should the cache look?
And can that cache be reused for both Exp and ExpH?

The cache should, for each node, the set of free variables.
In addition...

Node = Node [Name] Struct

Struct =
   Leaf
 | Case Node [Node]
 | App Node Node
 | Lam Node

Of course, when descending into a lambda, it should be obvious what change to
make (?). The free variables are those free in the parent, plus the bound
variable... if that's referred to. So no, it's not obvious how to go down. It
is obvious how to go up though: the free variables in the parent are those in
the child minus the bound. I'm not sure we need to optimize for that. Just an
observation.

Okay, so I'm confident I can make a cache.

I should have this be an argument to reduce. I should make reduce explicitly
lazy, with a ReduceEH expression, which takes a cache. So we should create the
cache when we do the reduction the first time? For the parent node?

Alternatively, each reference could keep track of information about its
expression... but again, we want a cache in order to support heapify easily
enough...

Perhaps heapify should take the cache as input? Then each other kind of
expression can just keep track of it's node? Or, each expression could keep an
entire cache, for consistency, and they can share? Erm...

Or we could just always assume reducable. It means less sharing...

Two kinds of sharing like this:
- beta reductions with different arguments: parts of the expression not
  involving the argument can be shared, parts involving the argument must be
  copied.
- inlining polymorphic declarations with different concrete types: parse of
  the expression not involving the type can be shared, parts involving the
  type must be copied.

Honestly, they both could have the same kind of sharing potential. Perhaps
first, just to get off the ground, I should assume reducable... and, well make
a best effort at sharing using equality. Equality of ExpH should be pretty
quick, because we don't have to traverse. Just check pointer equality and
such.

Yes. I think that's perhaps a better way to start? And we can use reducableE?

Well, but caching is better, because we don't even have to traverse an
expression if we know it contains no free variables with the given name. That
could be a big win...

I think I should figure out how to do the caching.

We do reductions on lambda bodies. Maybe we can store the cache with the
lambda? Store it with the lambda (for reduce), and store it with the HeapifyE
(for generating lambdas quickly).

Question: what changes the state of the cache?

Well, if we keep the cache only with lambda and heapify... what creates a
heapify?

VarE inlining: build the cache then
heapify: use the cache given
elaborateH: build the cache then

All those are easy.

LamEH:
 heapify: we have the cache
 reduceEH: reduce has the cache

I think all those should work
I'll have to think about the reduce ones.
If you reduce in a lambda that doesn't match, the returned lambda has the same
free, except no longer s. So I'll want a way to go through the entire cache
and delete s from it where appropriate, but other than that, it's fine.
For the reduceEH call... it's just a question about b, I can use the cache to
figure that out. Good. That should work out okay.

A little messy, but doable. Proposal is: have a cache, store the cache at
every LamEH and every HeapifyEH. This cache is used in heapify and reduce.

In reduce, we basically ask at the top given the cache: do we need this?

One concern is the cache will be big, duplicating a lot of information. I
wonder if we can store the information in diff form.

So we have a list at the top level. Now, the list of free for the children is
related to the list of free for the parent.

AppE a b: Some names are free in a, some free in b, some free in both.
We know those free in both from the parent. Maybe just store those free in a
that aren't free in b?

No. That's probably a waste. Just build up the sets. That will be fine, and
hopefully help with sharing.

Cool. I'll try this next when I get a chance.

