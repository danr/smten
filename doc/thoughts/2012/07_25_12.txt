
Wed Jul 25 09:34:12 EDT 2012

Let me try being more precise about...

Explicit math so I don't have ambiguous types in the expression.

But really, typecheck should make sure we don't have any VarT or VarNT which
is not bound in the type signature.

So check that:

null (avarTs (exp) \\ avarTs (type))
  
I should really do that first.

The trouble is... it's kind of annoying to traverse an entire expression for
avarTs. I'm getting tired of writing seri traversals.

Wed Jul 25 09:58:51 EDT 2012

Skipping the traversal, I'm still running into problems.

This time, with the type solver. I don't think ntid is enough to get around my
math problems. Because I'm coming up with a constraint:

#n = #(~32+1)

Now, I'd really like to solve this as:

#~32: #(n-1)

But we don't. We say, oh, now we know #n in terms of ~32, cool. Which isn't
what I want.

Can I be more clever in how I specify things?

Yes. Apparently I can use 
tdec :: #n -> #(n-1)

where I can't use:

tdec :: #(n+1) -> #n

Whatever. Let me introduce - then. I'll probably want it anyway.

Wed Jul 25 10:21:06 EDT 2012

Okay! Looks like it works, both in seri and in haskell now. It does require
some very... specific annotations of numeric types and such to work. I need to
fix the type checker not to allow ambiguous types.

But it works! We have a form of numeric types. I need to improve the type
checker. Math issues can be worked around.

What do you say? Pull it into the working tree? Anything more to do with
numeric types besides fix up the type checker? Should I put math into the
solver and type checker?

I see no need to for now.

Wed Jul 25 12:55:28 EDT 2012

Let me pull numeric types into master.

The next step is...

Well, I think the next step is performance? Figure out why seri is slow?

Or maintenance.

Anyway, I have bcl up and running. It can generate realistic queries for me.
Bigger queries. Then I can use that to drive performance improvements...

I'd really rather not until there's a real performance problem, honestly...
But low hanging fruit might be nice to get.

To make this work, it would be nice to separate the queries out from bcl, make
them fast on their own first. Once they are fast... but how fast do they need
to be?

Anyway, assuming the queries are obviously slower than we want, the trick
would be: have an easy way in bcl to dump the queries to a .sri file. This
means being able to read in pretty printed code. That would be useful for
other reasons too.

How about this... can I have another mode for the parser? Or just allow the
parser to accept otherwise illegal syntax?

The problems I'm going to have are:
- unique types allowed in declarations.
This is easy to allow in the parser.
The flattener may need to handle it specially, but we maybe want it to handle
it specially anyway, for dealing with sugar inside and outside of flattening.

- builtins declared.
They don't need to be.
An easy fix here would be: don't pretty print the builtins.
That should actually be a really easy fix.

- No top level module.
This would work fine if the parser inferred a top level main module. I'm not
sure it's exactly what we want.

The other option would be: don't parse in as a module, parse in as just a list
of declarations. I guess it's equivalent to parsing and throwing away the
import stuff.

I really would rather not have to handle it specially though, but flattening
will require that.

Oh well. Anyway, let me generate one of Myron's big queries manually, and see
how much work it is to manually turn it into something seriq2 will accept.

Wed Jul 25 13:14:03 EDT 2012

The other thing I can do is, just print them out as construct. In module form.
Pre-flattening. That might be even better. Let me try that.

Cool. I think that will work out just fine.

Wed Jul 25 13:28:44 EDT 2012

Problem with parser. We can't parse:

foo :: (Foo Integer -> ...)
Don't I have a test case for this?

Good. I've managed to replicate the error.

My suspicion: We expect a context, we think we are parsing a context, but then
it turns out to be a type, because -> is not allowed in a context.

How can I make it work?

Wed Jul 25 14:04:59 EDT 2012

Yes. I looked at the grammar info. Most of the reduce reduce conflicts are
because of this problem.

var '::' type
var '::' context type

But context and type look the same to start with.

I feel like what we could do is...
Parse a comma separated list of types, in parenthesis.
Then parse a '->' or '=>'?

How does the haskell parser handle this?

Aha. So they parse a context as a type. You don't need comma separation. Then,
given the type, your convert it to a context.

I should do that.

How to convert a type to a context?

untupT it, to get a list of what should be classes.
unappsT each of those, to get a class name and args.

Easy.

Shall I try it? I think so.

Well, the reduce/reduce conflicts go away, but now I have a problem with
instances with contexts. We assume we are getting a context, but we aren't, so
when we... well, we should shift when we get a where, right?

Not using 'opt' makes it work again, but introduces the conflict again too.
Now we can't tell the difference between a class and a context (before it was
a type and a context). Oh well. Maybe this helped make forward progress where
I wanted it, and I can deal with the reduce/reduce problem later.

Wed Jul 25 15:16:16 EDT 2012

Trouble. Looks like that yices1 bug is coming back to bite me. The one about
not knowing the data type declarations ahead of time when doing push and pop.

We can't redeclare after push/pop...

Wed Jul 25 15:44:45 EDT 2012

So, it looks like just the names of the tags are all that can't be redeclared.
Could I, somehow... pick a different set of name for tags, and redeclare
everything I need to for yices1?

For example, let's say I have a list of disallowed tags. When we compile for
yices1, any time I want to use a disallowed tag, I skip it, use an allowed
one.

It's very hacky, but ...

The other option is to declare all data types ahead of time. But I don't know
what those need to be, because I may not have all the info ahead of time...

Another option would be, don't declare any types inside push/pop. Only allow
assertions?

But what if we have nested queryS? We have the same problem.
But maybe in practice we don't have nested queryS?

The nice thing about not declaring any types inside push/pop is, it should
work for both yices1 and yices2 just fine.

How would it work in practice?

I'm inside a queryS. For every assertion I make, I can defer the assertion
into some side thing. Because assertions don't return results.

The problem really happens when I go to call query.. which calls check...
I have to execute the query, call check, to figure out what the next query
could be. So at that point I have to commit all the definitions.

Now let's say you go on to make another assertion after your query. Or better
yet, you go to make a new free variable after your query which is of a type we
haven't seen before. Then we are stuck.

That is... unless I am willy to: 1. pop. 2. define the data type. 3. reapply
all our former assertions (which won't work because we have to redefine more
stuff...) Sadness.

With the current interface, I can't even try to define all the data types at
the beginning.

What if I defer the first push to the first call to assert. Would that at
least fix things the way Myron is doing them?

Hmm... I think I know a way I can avoid the problem for now, for the way Myron
uses it. And it will work for both yices1 and yices2, without undue overhead.

Don't apply any assertions until you call check.

So, any time you get an assertion, no need to run it yet. Just add it to a
list.

Now, if you run into a queryS or a query, then before doing those things, we
then compile all the assertions...

No. The whole point is to have a context. So what I want to do is delay the
call to push until I want to do a check.

I may even want to do multiple pushes.

Okay, so how about this:
 assert: put it on a defer list
 queryS:
    - incr push count


ug. I don't know.

Let me wait. Perhaps things will get much nicer.

Let me turn instead back to this performance problem with the elaborator for
yices2. I have to sample queries which take longer than I would like. I can
turn on profiling, see how I can reduce them a bit.

Wed Jul 25 16:14:56 EDT 2012

I had a thought. The only reason we need to tell yices about data types, now
that we do full inlining, is so we can define free variables. That's it.

I can tell, given a queryS, what all the possible types I need are, by just
looking for all the types of the free function? Right? Yes. Because it is a
concrete expression. Now, it may do different things depending on the result,
but what it will not do is some type query I don't know about.

I think that's it. And I think that's a fairly easy, reasonable, yices1/yices2
applicable solution.

And, it should work with my interface just fine...

Okay, so here's the idea behind how it should work
To execute a QueryS:
 - traverse the query for the type of all calls to "free".
 - compile each type using yicesT, run the commands returned, ignore the type
   returned.
 - push
 - run the query
 - pop

It's that easy. The only hard part is this annoying part of finding all the
types for free. Again, it really would be nice to have a generic query...

I can use generics for the query. If it's slow, worry about that then.

Cool! Now, I'm tempted to try this now, because it's so easy...

Let me do it real quick like.

Trouble. I forgot about errors. We need to know the type of every error that
could fail, which, in general... before elaboration... could be too much.

So I think this solution fails in general.

In other words, for each case statement, we have to know it's input and output
type. But really we want just the case statements yices1 has to know about.

Could I elaborate the query first? Would that help simplify things? It's
already fully inlined, so simplification ... but simplification doesn't do
lambda reduction, does it? Maybe it does. Maybe if I elaborate it first, it
will actually work.

I don't understand. Why are we generating this err thing which I can't find in
the query?

Wed Jul 25 17:13:22 EDT 2012

Oh. I know the problem. The problem is, we are asking for the polymorphic
query before inlining. We really want to ask for the polymorphic query after
inlining and simplification.

Bugger. So much for that idea.

What if I ran a mock query?

Trouble is, we don't know how to deal with the result of check for a mock
query.

Oh well. So much for that idea.

