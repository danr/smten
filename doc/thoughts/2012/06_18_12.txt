
Mon Jun 18 12:16:21 EDT 2012

TypeChecking.


Case:
    case e of ms
 - e must type check
 - each match must type check
    - patterns must type check
    - bodies must type check under environment given by pattern
 - each pattern must have same type as e
 - each body must have same type

Application
    f x
 - f must type check
 - x must type check
 - f must be of type (a -> b)
 - x must be of type a.

Lambda
  \(n::t) -> e
 - e must type check under environment where n has type t.

Con
 - type should match the type of the constructor given in the environment.
    Specifically, they should be a subtype of the constructor types.

 Question: what about the primitive type constructors? Like tuple and list? Do
 have to have those be built in? Maybe I should provide somewhere for type
 checking just a list of the built in constructors that I can look up against.

Var Bound
 - verify type equals that in the environment

Var Declared
 - verify type is a subtype of whatever the declared variable is declared to
   be.

Var Instance
 - Type is a subtype of the type based on the instance.
    so, Class + Definition gives expected type, assert it is a subtype.

Pretty straight forward.

There are some utility functions I'll want, which make make things easier.

Assert Types Equal:
 - given two objects which have types and can be printed, assert they are
   equal, print out something pretty if they aren't.

 err... I'm not so sure. Maybe see what all I use first, then factor out the
common code.

Assert subtype:
 Given a type and a hopeful subtype, verify it is indeed a subtype.

I have enough now. I should just get to the grunt work.

Mon Jun 18 14:04:08 EDT 2012

Let me do a typecheck in flatten. Then I can let the errors drive things.

Mon Jun 18 14:12:34 EDT 2012

Nope, typecheck does not want to be in sugar. Because it gives us a bad
dependency on Sugar -> Typecheck -> Ppr -> Sugar.

Let me put it in elaborate then.

Mon Jun 18 14:19:51 EDT 2012

Okay, so now the structure is there. Time to fix the errors a bit at a time.
And ideally I should fix them the best way I can, and not hack all over the
place.

First question: how to checkdec a ValD?

- Typecheck the expression with an empty type environment.
- Verify the type of the expression is exactly equal to the type in the
  signature. Easy.

That's done. Next issue: ConE.

How do I look up the type of the constructor?
Well, I know it's type, hypothetically. Remember, I'm assuming a well typed
expresison. So, get it's type, look up the DataD, lookup the constructor, then
do the subtype check.

What do I already have in place for looking up constructors?

lookupDataD will give me the DataD. From that I can look for the Constructor
(maybe we should provide a way to look up a constructor?)

Given the Constructor and the dataD, I can form the expected type:
  forall a b c . t1 -> t2 -> ... d

So, what I want is, given a DataD and a constructor name, return the type of
the constructor function. That can go in Types.hs.

Now, what I should do for ConE is as follows:
1. Look up the DataD (verify it is there)
2. Ask what the type of the Constructor is
3. Assert that the concrete type of the constructor is a subtype of the
constructor type. Simple.

Mon Jun 18 16:24:11 EDT 2012

Problem: DataD for "(,)" doesn't exist in the environment.

Either I should hard code it in, or I should add it to the environment.

I feel like the easy way to make progress is to hard code it in.

What I want is a function which takes a constructor Sig in an environment, and
returns the name and type of that constructor.

Ug. This is sadly annoying.

Mon Jun 18 16:41:23 EDT 2012

Next step: check match.

How do we check a match?

1. Check the pattern, should return bindings from name to type.
2. Check the expression in the right type environment.

Mon Jun 18 16:43:45 EDT 2012

I should try to figure out a way to clean up type checking a bunch.

Mon Jun 18 16:54:48 EDT 2012

I really really wish it were cleaner. Maybe keep hacking at it to get a better
idea of what I need, then clean it up? Or should I actually think about things
ahead of time? Ug. Let me keep hacking. See how far I can get today.

Mon Jun 18 17:11:07 EDT 2012

So, here's another problem. Error messages.

I need to have context. So, ideally, um... show more context somehow? The
expression, the expression above that, and so on?

This would work if I used an either type, or an error type of some sort and
could append to the failure message.

Mon Jun 18 17:17:55 EDT 2012

Aha!. So this gives me an idea.

I'm feeling not great about how hackish this is, but, here's an opportunity to
clean up

There are many functions I write throughout Seri that return an error in
cases. Sometimes I return Maybe. Sometimes I return an arbitrary monad.
Sometimes I return an Either. But there are issues, because Either String
doesn't use Left msg for the fail implementation by default, which is really
annoying, and I can't catch an error in an arbitrary monad to add type
information to it, and Maybe doesn't give an error message.

So how about I define a single Error monad that I can use?

And have a function which converts to a generic monad. And a function that
converts to an Either. So, take a break from what all I'm working on to do
that.

Then I can use that monad to catch errors and annotate them more precisely in
error checking.

Sounds good to me.
    
Mon Jun 18 18:02:30 EDT 2012

Okay, so I have failable now. Let me try to use it for type checking.
1. Update from generic monad to Failable.
2. catch an error at the declaration level, printing out the whole declaration
for context.

Mon Jun 18 18:17:25 EDT 2012

Good. Next step: ClassD, InstanceD. What do I need to do to type check these?

ClassD: just check the types are fully applied, right? I'm not sure.
InstD: check the expressions type check and are subtypes of the corresponding
class types for them.

Let me skip the ClassD one for now. And do the InstD one.

We should already, or eventually, have a function that given a name, Class,
returns the expected type of that thing. Reuse that function here. Get the
expected type of the method, verify that matches the implementation. Easy.

Mon Jun 18 18:29:43 EDT 2012

How to look up what a method type should be?

Look up the class.
Look up... I might already have some code for this. Let me check.

There's something called lookupSig. 
Takes an environment, a class name, a method name, returns the type.
Note: this is the type in the class. But yes, that's what I want.

But, I have to look up the class declaration anyway.

Maybe better would be, given a ClassD, lookup a sig? That's more generally
useful perhaps? Sounds good to me.

Mon Jun 18 18:41:37 EDT 2012

Good. Next up: declared variables.

Let me look up the type in the environment with lookupvar. Verify that
matches.

Mon Jun 18 18:45:14 EDT 2012

Problem now: can't find DataD for []. Should I hard code that?
Yup.

Mon Jun 18 19:02:12 EDT 2012

Making progress. Just have to add more to figure out the bugs.

Mon Jun 18 19:26:34 EDT 2012

Okay, so now typecheck passes for the general tests, and stuff which is
elaborated. I don't really know if it's correct unless I give it failing test
cases, but this is a good start.

Mon Jun 18 19:27:45 EDT 2012

What next now? Should I assume type checking is correct?
Maybe I should write thoughts on how it could be made cleaner?
Or clean it up if I can.

It might be nice to have some unit test cases.

Hmm...

There was one thought on the library I'd like to put down.

There are a couple places we refer to the built in declarations and data
types.

As a reminder, those are:

 Integer, Char, Bool, (), tuple, list

Bool, (), tuple, and list could all be declared in the IR, they just aren't
supported in the syntax. Well, Bool is supported in the syntax. The reason I
want it built in is... I don't remember, but I remember trying it and running
into the issue. Something to do with the primitive comparison operations?

Perhaps flatten or somewhere else could add those declarations into the IR?
Or maybe we have them, we just don't print them out with pretty print? I don't
know. Something to think about.

Well, the type checker isn't so terribly awful. Getting type inference to work
would be very cool. Then I could ditch serif.

Note: the build system has been working out just swell.

Maybe I can get started on type inference then.

For type inference, I'm assuming you give all the top level declarations.
That's fine with me. So we really only need to run type inference on
expressions.

So, typeinfer :: Exp -> Exp
1. Generate new type variables for all the UnknownTs in the expression.
2. Generate a set of type constraints from the expression.
3. Solve the type constraints.
4. Substitute the solution back into the expression.

Somehow it would be nice to add a top level constraint so that the variable
types it chooses are consistent with the forall, if any, in the signature.

One thing that isn't figured out yet is how to come up with the UnknownVI.
Somehow that feels like a separate step to me though.

So, add a post processing phase, it figures out all the UnknownVI, after the
types have been figured out, based on the environment. This shouldn't be hard.
Good, so I can focus just on UnknownT for now.

Type constraints are of the form one type equals another.

Hey, this may actually not be so bad. The constraint solver can be reused from
the code I already have possibly.

Mon Jun 18 19:57:58 EDT 2012

Cool. This is exciting. Let me start off tomorrow morning first thing, and
given all the code I already have, I might be able to have type inference
going by the end of the day. Ditch serif. That cleans up a bunch of stuff.

