
Mon Jul 16 08:59:00 EDT 2012

What to do today?

All the big things to be worked on:
- support Myron in his integration.
- modularity support.
- numeric types support.
- check into ctsrd repository.

For the cstrd thing, I really need to just sit down with Nirav and ask:
 - is this the right license to use (the right grant number and such)
 - what is the name of the folder in the repository where I should put it.

And just check it in.

Mon Jul 16 09:09:26 EDT 2012

I emailed Nirav asking where to check it in. I'll deal with that when he
responds.

I'll deal with Myron's requests as he requests.

That leaves: modularity and numeric types.

What has priority? I think modularity is very important. I think numeric types
are somewhat important. Unfortunately, neither is easy.

The trouble with numeric types is, it's not well define what we want. So,
perhaps I should make a proposal and think about that first.

What we ideally want with numeric types, even if it isn't entirely easy to
implement:

Augment the types with:
 - numeric types: NumT Integer, and a syntax.
 - numeric type operations:
    NumOpT NumOp Type Type
    NumOp : Add, Mul, Div, Min, Max, Log, Exp
Augment class predicates with:
 - Type = Type (?) (using ~ like haskell?)
 - Type < Type (?) or other such operators?

Let me read about ~ in ghc.
    
Yes, ghc has ~ for equality constraints, for the same sort of reason as I
need: you can't tell locally that two things are equal? Um... maybe. I'm not
sure.

Mon Jul 16 10:02:16 EDT 2012

Ran into a bug.

If I use "error" for yices, even though error is going to get compiled away,
so that the string argument doesn't matter, we still think we need to declare
list for that. But we can't declare list, because it is recursively defined.

Well, I can work around this particular case I'm running into... but really I
should try to solve this better. Hum.

No. Actually, I can't work around it in this case.

Here's a hackish idea. Declare a list of characters...
No. That won't work.

Ug. Well, there's lots of options to think about. I'm not sure I like any of
them, but let me list them to be clear.

- ignore recursive declarations instead of throwing an error on them.
That will work for error, but it won't work in other cases when you would like
a nice error message.

- ignore recursive data declarations instead of throwing an error on them, but
  throw an error on recursive functions.
That will work for error, and it gives better errors, but it won't work in
other cases when you try to use recursive data declarations.

- ignore [Char] instead of throwing an error on it.
So strings are allowed, but again, bad things will happen if you try to use it
outside of a call to error where it gets thrown away.

- substitute all occurrences of error "foo" with yerror, or some such before
  doing inlining and monomorphization.
That would actually let us behave the way we want, but I feel like only the
yices compiler should have to know about this special thing, because it deals
with it.

Perhaps inlining and simplification should take place in the yices target
instead of the yices smt thing. Then it wouldn't be so bad for the yices
target to do this substitution, then do inlining and simplification.

This is a side point, but it would be really nice if we could inline as much
as possible as needed, and detect when we can't inline away something because
it is recursive, then throw an error that way.

Okay, let me look at how we call into the yices target, and see what interface
would be appropriate.

Yices 1:
 - declare all needed data types up front to work around that silly bug.
 Needed is based on the query, but we don't expect to be able to compile the
 query, because it should be simplified away as we make progress. This could
cause problems later on...
 - declare needed data types for a given object: exp or type, which is then
   also compiled.
But! We don't want to redeclare declarations of things every time. And the way
we avoid redeclaring things is by having SMT keep track of the mono
declarations already declared. It doesn't work to keep track of the yices
declarations and eliminate that way, because each time you compile something
using the yices target, it creates new names for error declarations and such,
so that would be very messy.


Honestly, inlining and simplification should be in the yices target, no? And
monomorphization too? And sorting?

Mon Jul 16 10:53:15 EDT 2012

Okay, here's the solution. We make the yices target interface a little more
general, and push more work into that.

Here's the interface I propose:

We have a yices target compilation monad.
You initialize the monad with a polymorphic environment.

It doesn't even need to be a monad. It can be a data type.

Then you call in sequence:
 yExp or yType, giving a specific expression or a specific type.
 It returns a list of new yices declarations needed for the expression or
 type, and the compiled expression or type.

The yices target performs sorting, inlining, monomorphization, all that. It
also replaces errors with an internal error thing.

For smt yices1, we can pass as the first expression the main query, to get all
the declarations we might need ahead of time. This is not ideal. It won't work
right in every case, but it's no worse than we have now and slightly better,
so that's a step in the right direction.

For smt yices2, we just use it as needed.

For stand alone yices compilation, you'll just call yExp once on the main
expression. Though I'm not sure, honestly, that standalone ycies compilation
makes sense, because we don't have a way to expression check, assert, etc...

And that should nicely solve our error problem and clean things up a bit.

The first step... Remove the failing case from the array test, verify things
work again. Rewrite the yices1 target using this plan. Verify it still works,
gather thoughts on if it is nicer or not.

Reintroduce the failing array test. Added the error replacement. Verify that
bug goes away. Then see what other issues there are. If we end up successful,
then make the change to yices2 too.

Oh, and you know what the great part about this is? It gives us a hook into
the code before optimizations. That means we can replace any special builtin
constructs that need to be replaced before optimizations. That's cool. That
should be very useful.

Okay. I have a plan. Let me get started.

Mon Jul 16 11:21:54 EDT 2012

I wrote up the interface to the new yices1 target. It looks okay.

Next I should ask myself, how will I implement it?

Given a new expression to compile, what will we do?

1. inline the expression as much as possible in the polymorphic environment.
2. simplify the expression.
3. monomorphize the expression and environment.
4. sort the environment.
5. eliminate already declared declarations at the monomorphic level.
6. compile all the declarations
7. compile the object

That's it. Fairly easy I should say...

Let me implement it.

Mon Jul 16 13:25:03 EDT 2012

I ran into a bug I don't understand. An infinite loop in simplification. It
happens when using this workaround to the yices1 bug with push and pop.

My tests no longer exercise the push and pop bug, I suspect because we do
inlining now. I think what I want to do is, get rid of the special code for
that bug fix until we run into the problem again. Deal with it later.

That should clean up the code a little, avoid the immediate bug, and let me
make forward progress. If we run into the bug again in the future, we could
try fixing the problem in yices1 directly, or just add back in this hack and
deal with the consequences then. Good. I like that plan.

Mon Jul 16 13:30:50 EDT 2012

Okay, now, with the new and improved yices1 code... Let me try out that error
thing.

Mon Jul 16 13:52:54 EDT 2012

Trouble... the error thing is fragile. For example:
 error $ "foo"

doesn't get caught! That causes problems.
We would like to simplify first. Okay, so let me just do it post
simplification.

Mon Jul 16 13:57:06 EDT 2012

Well... so we run into a problem with yices1 seg faulting. Bummer.
That's annoying. All that work, seemingly for nothing...

So, what I have to do is as follows.
1. generate as simple a failing yices1 case as I can.
Send it in to figure out what's wrong.
2. try the array test on yices2, see what shape that's it.

I really hate how fragile this is. If only I could figure out a way to do
recursive functions and recursive data types in general. Gar.

Mon Jul 16 14:14:23 EDT 2012

Ran into FFI bug again. Worked around it, again, by inserting putStr "". How
awful.

Anyway, yices2 can't handle the array thing, because it encounters a lambda in
the definition of newsub.

The lambda is almost exactly just a function update.

\i -> if i == k then v else f i

update f k v

The difference is, I do some error checking in mine. I suppose that doesn't
need to be there though, because the underlying function f should check it.

Okay, so let's say we had an update primitive. Then this should be easy. But
what's to say most SMT things will have an update primitive? And then, doesn't
that mean I have to define update for elaboration and such?

I could try to recognize update in the yices target? Then make sure to
carefully craft my code so the yices target recognizes update. Or try to
encapsulate that hand crafting in an update function which gets inlined?

My goodness. This is so... fragile.

I wonder if I can make it nicer. Perhaps using type classes in the front end?

Hmm...

Let's say I know what back end I want to target. Then it would be easy,
because I know for each back end what primitives are defined.

Okay, let's say we want to be more general. Then I want to make a generic
function which I know will work for any back end... hmm...

The problem is, we don't have any restriction currently about what is
supported or not. The language works as if anything is supported.

What I really want to do is be able to give a different implementation for
different constructs depending on the back end. Then, for example, I could do
something like:

class SMTUpdate s where
    update :: s -> ((a -> b) -> a -> b -> (a -> b))

instance SMTUpdate Default where
    update _ f k v = \x -> if x == k then v else f x

instance SMTUpdate Yices where
    update _ f k v = yices_prim_update f k v

instance SMTUpdate Foo where
    update _ = update Default


How is this different from specifying a primiive update function and
implementing it for each back end? Well, it lets us give an in-language
implementation, which is nice. It let's us share that easily.
    
I don't know. Do you think it's better to recognize specially crafted
expressions?

I think it's hard to say until I get more target back ends, which may not
happen any time soon. I think it is easier for the user if we can recognize
the expressions correctly in the compiler. It's harder for the user if we
can't.

Okay, so how about this. Let me just have an "update" recognizer in the yices
compiler. Ideally applied after simplification? That way we can recognize
things which are optimized into updates? Or is it better to do before
optimization, so the user can make it very clear when it wants you to
recognize something?

How hard is it to recognize the update function? How many ways could you
express it?

update f k v = \i -> if k == i then v else f i
                        i == k

Of course, trouble here is the notion of equality. If the user defines
equality differently from how yices does, then this won't behave right. It
will work for integers.
 
I wonder... for what we need, we really know an upper bound on the array, so
we might as well just use statically bounded arrays and not worry about any of
this.

On the flip side, I feel like function update could be leveraged to support
lists in yices.

A list is the pair: (head :: int, int -> a), assuming tail is 0.

head applies the function.
tail decrements the head pointer.
cons increments the head pointer and does a function update.
nil gives an arbitrary free function with head at 0.

This has given me an idea with regards to the errorize thing I do in yices1.
What if we supply an implementation for error, to make it no longer a
primitive? Change it to a ValD, and the implementation is given as:
error _ = ~error.

Then the elaborator will simplify away the string argument for us.

That idea comes up because I feel like I could give a different implementation
of list for yices which makes use of the update primitive. I just need to
rewrite the library a little bit. Though, it would work much better if we
didn't have constructors. How can I rewrite a constructor to be a function?

You know, if we had list implemented, we could implement arrays on top of
lists. But who knows how well that would work for other SMT solvers?

I don't know.

Alternatively... i could just recognize the name update and turn it into a
primitive before anything else in yices.

I don't know. Nothing makes sense to me now.

Perhaps I can go in more detail about what the problems I have are, and see if
that gets us anywhere.

The problem is, yices doesn't support everything seri supports in terms of
constructs. Specifically:
 - yices doesn't support mutually recursive data types
 - yices doesn't support recursive functions
 - yices2 doesn't support lambda expressions

This causes a problem, because it means you can express things in seri that
don't work in yices.

More generally, for any SMT backend, there will presumably be things you can
express in seri that you can't express in the backend. And these are likely
different for each backend. Though I suspect other backends have the same
trouble as yices does and more.

That's the first problem. The next problem is, yices has primitives which can
be used to support some of the things it otherwise couldn't. For example,
update can be used to support... well, update, which doesn't work as you would
naturally express it in seri, because it requires a lambda term. The bind here
is, it seems that if you express things in a very particular manner, than
things that otherwise wouldn't work in a given SMT backend may work in that
back end.

So, perhaps the real question is: how best to take advantage of specific SMT
backend features? Perhaps more importantly, should these be visible and
accessible to the user? The trouble is, what doesn't work that you can
express in seri is visible to the user, by trial and error.

I'm tempted to say: well, the problem will go away if we can just support
everything in the backend that you can describe in seri. Then we can add as
optimizations knowledge of these back end primitives, and you don't have to
worry so much. But I don't think that is reasonable. I don't think we'll ever
be able to support all the front end features in the back end.

I need discussion. I need another opinion. Let me write up my thoughts and
send them to Nirav.

The header is: there are some constructs that can't be supported in SMT back
ends. Recursive functions, recursive data types, lambda expressions, for
example.

There are extra features in some, such as update, which could be used to work
around the limited support otherwise. Question is... how should we deal with
this?

Note: static elaboration works fine. Trouble comes when we try to do things
with free variables inloved that the SMT has to know about.

Using array example, look at some options:

1. Don't support the feature in the backend.
So, implement array in the language, if it can be inlined away, good for you,
otherwise tough luck.

Down side: a feature that could be made to work in a backend doesn't.

2. Introduce primitives.
So, have an "update" primitive. This primitive will be supported by the yices
backend. Use it to implement array.

But:
- you also have to define the implementation of the primitive for elaboration.
Which is slightly annoying, considering you ought to be able to implement it
in the language... Well, maybe not so bad then? Just annoying.
- there's nothing that says you can implement this primitive in another SMT
  backend.
This suggests you want the primitives to be much higher level. For example,
have an array primitive. Now, for yices this is implemented using just the
update primitive and seri stuff. For another back end it could use a
completely different underlying primitive.

3. Try to recognize construct.
So, recognize when an update like thing is taking place in the yices compiler.

This lets you have the feature. It means your code has to be implemented in a
specific way which may not work in another back end. You do get to take
advantage of the default implementation wherever it works though.

...

Here's an idea. What if we have a specific library of SMT constructs. Things
such as:

SMTArray
SMTList
etc... (though really those are the only two I can think of at this point that
I would want).

These declare abstract data types which can be accessed only through
functions.

Now, we provide a different implementation for each back end: elaborate,
yices1, yices2, etc...

Now, a back end may or may not support one of these... if it doesn't... that's
unfortunate. The reason it is unfortunate is, depending on which you chose to
implement some other construct, that other construct may or may not work.

I feel like you could implement SMTList with SMTArray, or SMTArray with
SMTList, though.

Yes. Good. This is right. I think this is a reasonable solution.

Unfortunately, it feels a little silly until we try porting to another back
end. The only thing yices has that I want to take special advantage of is this
function update.

So, I propose this for a future vision. For the temporary vision, I propose I
declare an SMTList and SMTArray, both with abstract data types, and whose
implementation I have work using an update construct which is recognize by
yices in the back end. Now we can use these sorts of constructs, because we
know we are targeting yices.

In summary, I've gone full circle and decided to recognize update, and
recognize it just for integers, after simplification. And use this to
implement first SMTArray, and then SMTList abstract data types.

Here's the update construct I'll try to recognize in yices:

update :: (Integer -> a) -> Integer -> a -> (Integer -> a);
update ...

So, just replace the definition of update with my own... or rather, turn it
into a primitive. Before simplification.

Okay, so let me try this out. Get it working for yices2 first?
Oh, bugger. For it to work for yices2, I need to switch yices2 over to the
same sort of interface I switched yices1 over to.

Shall I?

I think that would be a good idea. I can try doing a diff like thing to make
it easier. I hope.

