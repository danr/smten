
Fri Jun 29 08:19:32 EDT 2012

I want to try evidence parsing. I think it shouldn't be too hard.

We want a function which takes as input a name of a free variable and it's
type, and in the YicesMonad returns it's value. Perhaps call it...

realize :: String -> Type -> YicesMonad Exp

The way it works is as follows:
- if the Type is an integer, use the FFI call to look up the value and return
  it. (This requires we add the get integer thing to the ffi interface)
- if the Type is a function type, tough luck. We can't handle it yet.
- if the Type is a variable type, something wrong is going on.
- otherwise the type should be an applied type constructor:
1. Extract the type constructor name
2. For each data constructor for the given type:
    3. send a push command to yices
    4. allocate a free variable for each argument to the data constructor
    5. assert the data constructor applied to its arguments equals the free
       variable being realized
    6. check the result
        7. If satisfiable, for each argument, realize the argument. Then
           pop and return the construction.
        8. Otherwise, pop and continue to the next data constructor

All very straight forward, no? Good. Let me try it.

Fri Jun 29 08:32:29 EDT 2012

I'll have to dig in deeper to figure out how to do the FFI interface for
getting integers. For example, how to pass a pointer argument, and how to
represent a c long in haskell. Let me come back to that. Because the rest of
the algorithm should be easy enough given I have the right abstraction for
getting an integer value.

Fri Jun 29 08:45:09 EDT 2012

Well, I made some little progress anyway. I'll keep working on it later.

Fri Jun 29 09:49:48 EDT 2012

Okay, so I have the code for it. What remains is the FFI thing. Let me see if
it compiles now though.

Oh, and there's one more thing I'll need. I'll need to call it. So I need the
overall expression traversal (generics?) which replaces free variables.

Yes. I should use generics. I'll implement this when I get to the office.

Fri Jun 29 12:00:04 EDT 2012

It works! That's pretty cool. Nifty.

I could clean up the debug output a bit, and maybe don't need to dump the
model now that we have the evidence, but ... cool. Time for lunch.

Fri Jun 29 12:25:25 EDT 2012

Here's what I want to do for the rest of the day.
- read about yices2, try to understand it's interface, how to use it, what all
  needs to change from the yices1 usage.
- clean up. The interfaces, the documentation, the behavior.

I think that's a fine goal for today. No need to go into modularity yet.
Though it's okay for me to think about that.

Cool. First step: a look at yices2.

Notes:
- No support for algebraic data types.
So looks like I'll want to implement them using scalars for constructor tags
and tuples. Too bad there aren't unions, but it should be plenty doable.
- No support for lambdas

The C api is pretty decent. It might be nice to use that.

Really I've hit upon the big things. Algebraic data types and lambdas
(function definitions).

Algebraic data types can be implemented using tuples and scalars. The first
field is the constructor flag. Then we can have a field for each tuple of
constructor args after that. Hopefully that works out fine.

The harder part is the lambdas. Without lambdas, we have to inline every thing
we can. So we'll have some pretty big expressions. Probably want to inline and
simplify. And, for those things that are recursive, introduce a free term
for the result after we get tired of expanding it. I think it's doable, but it
will be rather a bit of work.

The good news, I suppose, is that it seems yices2 is a subset of yices1. So I
could try getting these things to work in yices1 if I wanted to test out the
ideas behind them.

I don't think bluespec will be able to give us something that let's us fall
back to yices2 if pvs doesn't work. I think the right direction to go would be
to implement yices2 support directly.

Hmm... Perhaps lambda isn't so hard to deal with. We break it down into two
steps: inlining and approximating.

Inlining is just a form of elaboration which does simplification inside if
statements and such, and has some bound on recursive inlining so it doesn't
get stuck. Given an expression in an environment, inline and simplify as much
as possible. It should reduce to a normal form of some sort aside from the
recursive functions. I can make this a generic seri utility.

Approximating is specific to the yices target. It says, given a seri expression,
whenever you reference a declared variable, create an uninterpreted term for
that variable. Easy.

I think moving to yices2 makes sense as a general direction to take next.
Sounds like a week's worth of work, ish, to me.

Anyway, let me start cleaning up seri as best I can.

