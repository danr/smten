
Mon Jul  2 08:23:56 EDT 2012

How to do inlining for yices2.

I think it should actually be very easy.

1. Inline step.
Given an expression, an environment, and an inline depth, inline each name up
to the given depth. This is a simple generic transformation on the expression.
No monads or anything needed.

And that's it. There is fear that this will be doing many unnecessary inlines,
but because haskell is lazy, that shouldn't actually be the case.

The big question is, where should I implement this inlining? As another
target. Perhaps Seri/Target/Inline.hs. It doesn't need it's own folder.

Cool. I can wait a little bit before implementing this. Wait until I have a
way to test it better.

What all I plan to do today? I think yices2 is a valuable use of my time.
Clearly Peter wants it. It's not so hard a thing. And I suspect if we run into
problems with our queries, the first bit of advice we'll get is: switch to
yices2. So, yices2 is the focus, and, of course, supporting Myron in his
transition to seri whenever he needs it.

Things to do:
- wrap Y.check in Seri.SMT.Yices in something that prints to the debug file
  more nicely. This is a cleanup step.
- Implement enough of the yices2 FFI to support:
    - sending of commands in the yices2 abstract syntax to yices

That will be a good start.

Mon Jul  2 10:03:35 EDT 2012

Okay, so I have an initial FFI up and running that I can make use of. Enough
is there, I think, that I can use the interface as is, adding to things ad
TODOs are encountered.

So, we have (lazily) a yices2 FFI. What are all the steps remaining to support
a yices2 back end?

Ideally we support both yices1 and yices2 at the same time. There's no reason
we can't do this, it will just be annoying to have to maintain both of them.

Yices2 steps:
+ implement a Yices2 target
Same as yices1 target, except uses yices2 syntax and performs approximation
(assumes totally inlined).
+ implement SMT.Yices2
Same as yices1, but uses the yices2 interface.
- implement inlining
- implement simplification
Because the inlined expressions will be pretty big otherwise.
Note: This is a simplification which does not look up anything in the
environment, so it doesn't need to worry about recursive functions or anything
like that. All that was taken at the inline phase.

Hey, cool, this should be pretty easy. And I can do initial tests without
inlining, though that's probably a bit boring. Let me try it, and see what
happens. Start without inlining or simplification. Add inlining. Then add
simplification. Then I'll be done. I'll have yices2 up and running.

Mon Jul  2 10:27:22 EDT 2012

Oops! Forgot a major thing. Representing algebraic data types in yices.
Well, I know how I want to represent them: as a tuple with one field for the
tag, and one field for the values of each (non-empty?) constructor.

Fine. Let me assume that representation, and see how hard it is to implement
the yices2 compiler then.

Mon Jul  2 10:49:05 EDT 2012

Another problem: constructor applications. How to deal with those?

I should unfold them completely. (I hope we don't have partial constructor
application). Then, perhaps define an uninterpreted value for every data type,
just for the convenience of constructing new ones. Do the construction via an
update.

Well, I actually need to get rid of partial application entirely too. So maybe
I assume I do that in a separate step? Or have a case statement. If it's a
function, make a function. If it's a constructor, make an update. That sounds
good to me.
 
Mon Jul  2 11:05:16 EDT 2012

Trouble. In order to do a constructor, I have to know where in the tuple the
data constructor is. So, looks like I want to pass the environment into the
yices compiler. That seems fair enough.

Mon Jul  2 11:37:15 EDT 2012

Okay! So I have a rough draft of the yices2 compiler. The only issue currently
known that I'll have to figure out is supporting a tupleE with no arguments.
Either I can make it, like, bool, which just is never referenced? That might
be easiest, since we don't have a builtin void type, and I don't know if we
have defined an uninterpreted unit type yet.

Or... I could just not have a field for that. Doesn't that make more sense?
Cleaner. Simpler for yices2. Easier to read...

Sure. Let me do try that.

Mon Jul  2 11:56:22 EDT 2012

There! Good. I like that. I think it will be clean.

So now I have the rough draft of the yices2 compiler.

What's the next step? Can I try it out yet? Or should I implement the driver
first?

Let me implement the driver first. Once I have the driver, I can implement a
seriq2 which uses yices2 instead of yices1, and try it on all my examples to
see what happens. That should expose bugs in the yices2 compiler, and the
driver, and force us to do simplification and finally inlining to get the
results I want.

I bet I can get this working by the end of the day. That would be cool.

Mon Jul  2 12:59:54 EDT 2012

I have the rough draft of SMT.Yices2.

So now I should be able to set up seriq2, and try Query1 using it. See if it
works.

Mon Jul  2 14:19:37 EDT 2012

First annoying problem:
 - selectE and updateTupleE take integers. I can't pass a function or a
   defined thing for the index.
 - updateTupleE has an off by one error. But I suppose if I always use
   updateTupleE, and it adjusts, then that should be okay.

This means that, at compile time, I have to know the index. Oh well. I suppose
that's not too hard to do. Let me get to it.

Mon Jul  2 14:47:52 EDT 2012

Cool. So Query1 works as desired. Good.

Next issue: Need to support primitive integer operations.

Mon Jul  2 15:09:32 EDT 2012

Here's a problem. We need to give the yices compiler the monomorphic
environment, not the polymorphic. Well, I suppose that's not so hard. 

Mon Jul  2 15:14:28 EDT 2012

Well, it appears to be working.

I'm slightly concerned that our approximations, which happen because we don't
inline, will lead to quiet unexpected behavior and annoyance. Should I have it
be an error for now? I would feel better doing that.

Anyway, I'll check this in as it is now. Then I have it be an error to do any
approximation. Then I'll implement inlining. Then I'll implement
simplification (because otherwise we'll end up trying to compile lambdas,
which would be bad).

Mon Jul  2 15:58:41 EDT 2012

Good. Now I have inlining. Now I'm running into the lambda problem.

The trouble is, I'm seeing funny stuff. Stuff like:

if (lam1 == lam2) ...

Why would that happen? We should never be testing for equality of lambdas.

Perhaps it will be more obvious when I try to do simplification, which is the
next step.

Hmm... Something happened. It's not working anymore. I don't understand.

Are there problems with my build system?

Looks like a mix between the lambda issue and perhaps reading a don't care
integer value from a model, so let me get rid of the lambda issue first by
implementing simplification.



