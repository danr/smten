
Fri Jun 14 09:09:42 EDT 2013

First issue: cases0 for bit vector.

I wonder if it's just we need to add the case for ite.

Can I come up with an example?

I suppose the example would be:

    p <- free_Bool
    assert (toInteger (if p then 3 else 4 :: Bit #8) == 3)

Here 'toInteger' is not supported, but the argument is a mux, so we should be
able to do a cases on it just fine.

Let me write up this test case and see how it works.

In fact, this can be a Core test case.

Well, that certainly reproduced the issue.

It does side-step the issue of high level debug, which I'll certainly want at
some point.

That is: some way to show the symbolic expression with all original primitives
(including cases) in tact.

Fortunately for debug, my fix didn't fix the problem in arch-extract.

I really should add support for the Debug solver.

Okay. I know the goal:
 * print a pretty version of the symbolic expression including all original
   primitives.

For now, I can limit it to assertions. This means we shouldn't have any
functions or things like that.

There are a number of issues it is worth thinking about:
* How should I express sharing in the pretty formula?
  - don't?
      I fear this will lead to massive queries, and be misleading.
  - use 'let' expressions like the master branch does?
      This can be done, but it's hard to read the query.
  - label every expression with a name?
      That, I think, will be way too messy.
  - label shared expressions with a name?
      This is hard to do, should be easy to read, but will still generate
      massive expressions.
  - label shared expressions with a name the first time,
    And every subsequent time, refer to the expression by name instead of
    value.
  - abbreviate expressions the second time with ...?

Well, when you list it like that, I think it's pretty clear what I would like
from the users perspective:

Annotate an expression which is shared with a name the first time it appears.
The next times it appears, just use the name.

I think this will be easier to read than let expressions, because things will
be defined inline rather than pulled out of the expression.


* how do express to the debug unit what the name and argument to primitives are?
I could add to each primitive another function: Dbg, which gives the debug
output for the primitive. It's... a little dissatisfying to need to add a new
function to the primitives for any traversal I want to perform.

* how to make the debug output pretty?
  I'm thinking in terms of inserting newlines and such so the thing is
  actually readable.

The show monad will not be good enough here for this reason.

I think the second point has many ramifications to consider. It would be nice
to have a representation for objects which is explicit, that we can do a
generic traversal over. Rather than expressing each traversal explicitly.

One challenge is, we want to traverse for each type.
One challenge is: there are performance concerns with higher-order traversals.

But modularity looks better...

There is a choice to make. Either
1. all objects are represented in the same structure.
2. objects are reach represented in their own structure.

I'm tending towards (2), because if you do (1), we can't have different
structure for functions or the symbolic monad. In particular, I think
functions are important for performance.

If we have (2), then, in order to do a traversal, we either need:
 - abstract deconstructors which can decompose the object into:
     - a concrete thing
     - an error
     - a primitive with arguments.

Or we need:
 - an traversal function implemented for that object.

I don't know which is more efficient.

I wonder if we could somehow use specialization to make a generic traversal
function as efficient as a list of concrete traversal functions. Perhaps by
associating a type with each traversal function, and specializing every object
for the traversals I know I want to do.

Let me think along the lines of the later. First think about how I could
describe a generic traversal function at all.

The examples we have so far for traversal functions are:
 * realize :: Assignment -> a -> a
 * cases :: a -> Cases a
 * debug :: a -> Debug

The basic structure is: recurse and combine?

Let's start with realize.
Assume we keep the assignment 'm' with the function f...

What is the function 'f' allowed to see though?

I don't know. I don't know how to make it work the way I want to. I'm not sure
what I want it to do.

Well, maybe hold off on the general traversal thing for now, and just add a
debug traversal like I have cases and realize.

Let me start with not worrying about sharing. Just dump the full expression,
wasteful as that is.

Things I can have in the expression:
 * constructors
 * applications
 * primitives - which may be case.

In fact, you can think of constructors as like primitives too. I think of
everything as functions, including case. But for the user, it would be much
nicer to express case as case.

Another problem here: I don't necessarily have information about the name of
the function. If it comes from frhs, which all but the cases do, I don't have
that info at all.

Gar.
 
Fri Jun 14 10:28:47 EDT 2013

So, I output some more info about the failing bit vector.

It looks like the problem is we are not propagating error properly?

Yes. It's a bug in error handling. And it's a stupid bug.

fromMaybe :: a -> Maybe a -> a
fromMaybe d x = case x of 
                   Nothing -> d
                   Just v -> v

Is leading to a superfluous error. If I get rid of the possibility for error,
then the problem goes away.

I should be able to reproduce this problem.

The issue is not properly propagating errors.

For example, ...

Say I call fromMaybe. This leads to a __caseJust, which has an error branch.

I ask for the cases of __caseJust, because it is an unsupported primitive. So
I ask for the cases of the argument to __caseJust. One of the arguments is
error. Even though I know that should never happen.

So, this is not an issue with propagation of errors. It is a problem of cases
of error.

So, how should I handle that?

If we assume all primitives are strict, then bad things will happen to case
primitives!

Treat error as a concrete case?

Let me first capture this problem in a test case.

Fri Jun 14 11:01:23 EDT 2013

Okay! I finally captured it in a test case. Good.

The problem is caseFoo should not be strict in all its arguments?

No. The trouble is... one of the cases is Error? And so I should treat it as
such explicitly?

Sure. Let me try that.

This is bad, because I'm taking a cross product now which includes Error.

Hmm...

Anyway, that fixes the problem I was seeing there.

But now I'm getting: handle error in assert.

This is bad. It means I'm introducing an error variable where really I ought
not to need an error variable, because the case is unreachable. Grumble
grumble.

It means it could be very useful to do a pruning step which prunes away all
these unreachable errors from the code before I generate it.

Fri Jun 14 11:14:00 EDT 2013

Trouble with bit errors: I don't have a way to enforce that the Bit type is
numeric.

An instance of SmtenHS1 asserts that Bit will work for anything, but here I'm
saying it will only work for numeric n.

Hmm...

Well, I suppose I could give an instance of numeric to everything?

That seems fair enough to me. Because we check statically that we only call it
in the right place.

Then I don't even have to include requirements for 'Numeric'...

No. I think that's destined for trouble.

Or I could just say:
 - make valueof a method of SmtenHS, and give a default instance which is
   undefined.

Yes. That ought to solve it.

Fri Jun 14 11:57:21 EDT 2013

Fine, but we still have the issue with fromMaybe, because I abstract the
error, then ask for the cases of it?

So, I need to try and replicate this error.

Some good news: arch-extract seems to be running now.

I'll let it run a while and see what happens to it.

The thing with errors, however... is still rather dissatisfying.
As is the thing with debug.


Fri Jun 14 12:25:10 EDT 2013

Let me try to give now a high level summary of smten status?

I don't know. There are lots of loose ends I don't think I can plug up.

Let's say this.

There are correctness concerns.
 * dealing with errors the right way
   currently arch-extract on "example" fails for some reason.

There are functional concerns.
 * we need high-level debugging of queries.

There are code concerns.
 * There is a lot of repeated code going on here.

There are performance concerns.
 * Change how we deal with cases to avoid the 'error'?
 * These should be driven by applications:
    ** shampi: overhead of DoubleCheck
    ** arch-extract: figure out what it's doing to take so long
        Currently dominated by conflict free checks.
        Is it a smten problem? A user problem?
    ** Sudoku.Enum: why does it take so long?

Basically, I know I want to merge with the master branch.
Let me just do that. There are too many things I like about this branch to
give up now. If I want to go back to what I had before, I should do it by
circling, not by reverting.

Preservation of sharing should be motivated by applications.

Fri Jun 14 12:33:20 EDT 2013

I merged with the master branch. It's done. I wasn't going to do anything
different anyway.

Status with arch-extract: It runs 30 minutes, then runs into the bit-vector
symbolic cases1 bug.

This is the fromMaybe issue we had with "example".
So, maybe if I run it without that, it will make enough progress.

In the meantime, clearly I need to fix this bug.
Which means, first, I need to replicate the bug.

I know it has something to do with fromMaybe.
Something to do with cases and abstraction of errors?

The problem is: Bit_Var.

So, we have a cases Bit_Var, instead of cases Error.

That should be easy enough to capture in a test case.

Fri Jun 14 12:46:07 EDT 2013

I caught it in a test case. Cool.

You know what the problem is? I'm treating all the arguments to __caseJust as
strict arguments. So I think I have to know the value of the default case
before I can do anything. But that's the wrong way to do it.

I could put a hack here, and claim any bit vector can be made into a concrete
thing for cases, but that's wrong. It doesn't address the fundamental issue.

So, I have this primitive. Let's use __caseNothing just for the fun of it.
 __caseNothing x y n

We see 'x' is symbolic, so we keep it as a primitive.

Now, say I want to make an SMT formula for this.

It's unsupported, so I'll need to look at all the cases of 'x'.

But, in the current implementation, I'm actually looking at all the cases of 
(x * y * n). That's terrible.

In other words, I feel like this should really be a unary primitive.

Won't that fix things?

Yup! That fixes everything Cool.

That makes me feel much better.

Now then... what is the status?

I have a bunch of suspected bugs and other issues. I think they are mostly
written down.

We need support for the high level debug solver, certainly.

As far as performance is concerned, I should investigate arch-extract. Because
that's the big one.

Most of the time now seems to be spent in conflict-free analysis.

I'm going to let it run for a while and see how far it gets.

Fri Jun 14 13:33:27 EDT 2013

While arch-extract chugs along, I'd like to spend some time thinking about
this case issue.

What is the case issue?

We only match against one constructor at a time. As a consequence, we always
need a default case. But what if there is no default case in practice?

We may still need to match, because we need a way to get at the argument to
the constructor.

So, what we end up having now is a bunch of things like

  case x of
    Foo a -> f a
    _ -> case x of
            Bar b -> f b
            _ -> error "unhandled case"

This is bad for two reasons.
1. We do a case on 'x' twice.
It seems like it would be more efficient to do a single case. Less primitives.
Less cases in the generated haskell. Less code.
2. We introduce unnecessary errors.

I don't know if this is bad at the SMT level?
For concrete things, we will never see the error. So it's just clutter.

If the argument is symbolic, and we don't know that we can't reach that error,
then we introduce a new free variable.

That could be bad, because any free variable makes it harder for the SMT
solver, and makes it harder to DoubleCheck, if we can somehow take advantage
of lack of abstractions to make DoubleCheck go faster.

So, even though I don't see it being a major, exponential improvement, or
anything like that, it would certainly be much cleaner, and at least a little
faster, if we represented case expressions better.

Namely, as a list of all the options.

We have to represent all the options at once. We may as well represent every
branch explicitly for every case expression. There is some duplication, but
because only one will be picked...

Perhaps that could be bad for things though.

The question is: do we want to represent the default case explicitly, or not.
If it leads to duplication... well, if we preserve sharing it won't lead to
duplication. So fine.

I propose we represent case expressions with each constructor listed
explicitly.

Now, what are the question to address here? I think there are, perhaps, two
big ones:

1. How can I effectively desugar pattern matching into this representation.
I want to avoid things like:
    case x of
        Foo -> 3
        Bar -> case x of
                  Foo -> error "unhandled case"
                  Bar -> 4
                  Sludge -> case x of
                               Foo -> error "unhandled case"
                               Bar -> error "unhandled case"
                               Sludge -> 5
        Sludge -> case x of
                  Foo -> error "unhandled case"
                  Bar -> 4
                  Sludge -> case x of
                               Foo -> error "unhandled case"
                               Bar -> error "unhandled case"
                               Sludge -> 5

Make sure we get instead:
    case x of
      Foo -> 3
      Bar -> 4
      Sludge -> 5

2. How do we generate haskell code for this kind of case?
This should be pretty easy.
Instead of __caseJust and __caseNothing, we have __caseMaybe.
It takes as arguments the function for each case.
We treat the primitive now as taking many arguments. So we'll probably want to
generate the code for that primitive in the code generate instead of using the
primcase library.

That's easy.

Cool. Then I should try now to focus on (1).

I wonder if I can do this, somehow, in a compositional kind of way.

1. Pattern Match. It either matches or it doesn't.
The interesting kind of match is a constructor match.

So matching against a constructor means you match or you don't.

I wonder... Perhaps we could take a different approach?

Keep the same __caseJust, __caseNothing.
But this time allow there to be irrefutable versions.
Call them __surelyJust, __surelyNothing, or something.

Those are easy enough to generate code for.

And now, in the process of desugaring pattern matches I can keep track of, for
each case argument, the set of constructors it could possibly be.

Inside a match of that constructor, it can only be that constructor.
 (In which case, it doesn't really make sense to match again, because we
  already have the variables corresponding to the match value, but maybe that
  doesn't matter.)
Outside a match of that constructor, it can't be that constructor.

Then, when you match against a constructor, we can see: do we have variables
for this match already, or is it impossible to match?

If we have variables already, use them. If it is impossible to match, go
straight to the default.

Perhaps, for the default, we can have a 'nodefault' option? Some special token
that we recognize?

The question is, what happens after we match the last thing we know we can
match?

Or, perhaps, we go from above. As soon as we enter a constructor, we filter
out any matches beneath it which we know could not occur.

If it leads to an empty list, then we use the default value from above?

No. That's not quite right.

Hmm...

I don't know.

Hmm... Maybe the way to do it is this.

Going into a case expression for a given argument, at first you know:

* it must be one of the constructors given the data type.

Some times we learn things:
* it can't be this constructor, because we just failed to match it.
* it must be this constructor, because we already matched it.

So, for any case expression, at any given location, we have an enumeration of
what constructors the argument could possibly be.

Transform the case as follows:
 * remove out all those constructor matches which we know can't be met.
 * remove all those 'default' matches which we know can't be met
     (because every constructor has a previous match).

Hmm... The sequentiality of the matches, I feel like, is a good thing to
preserve and keep track of. Let's say I still keep a sequence of matches.

case x of
  p -> yv
  _ -> n

If we know x will match p, do an irrefutable match.
If we know x will not match p, use n.
Otherwise, have the case. In the yes branch, update the info. In the no branch
update the info.

There. That's it. Simple. Easy.

What we do when pattern matching is as follows: With each case argument we
keep track of information about what may or may not match. We update that
information as we go.

The key thing to make it work is to have this irrefutable kind of a pattern
match.

This approach does not avoid doing the match multiple times.

If we inlined __caseFoo, however, then it ought to expose that info to haskell
for the concrete case, and all is happy. So I think that is worth doing as a
first step to get almost all of the benefit.

I'm not really convinced this will make so much of a performance difference.
It just seems like the right thing to do.

The change to make: 
Well, to start with, we'll want information about the datatype before we do
desugaring. But once we have that, change patM and all those things to take,
rather than Exp as an argument, a bundle of Exp and match information.

Yup! That's totally doable. Cool. That's a plan. After I change the front end
to have the environment available at desugar time.

Change CaseE Exp Exp Exp to CaseE Exp Exp (Maybe Exp) to represent the
irrefutable match.

Fri Jun 14 14:30:56 EDT 2013

Anyway, what's next?

Working now on two things:
- smten via performance of arch-extract
- popl paper.

For the first, I'm almost certain the problem is we spend all our time in
Check. If so, then the problem is with the query generated. If so, then I'll
want to look at the query generated. In which case, I'll need high level
debug.

So, first step here is to just verify it really is SMTCheck where we spend all
our time. The next step is to figure out how to get debugging working.

For the popl paper next step is just to read the cfp and past papers.

Let me see if I can do a little bit of everything.

First step: verify time in arch-extract is indeed dominated by the SMT solver
check time.

Fri Jun 14 15:11:04 EDT 2013

75% of the time is in Yices2 Check.
20% of the time is in assert.

So it seems like we are generating a large query which is hard for Yices2, as
I said.

So it's clear what I need to do next: figure out how to support high level
debugging.

Let me start thinking about it then.

It will be important to express sharing in the debug output. I'm sure.

I do like the following approach:
* identify any shared expression the first time it is used.
* the next time it is used, use the identifier.

How to identify an expression?
By number, presumably.

    _4:{foo bar sludge}

I think that's fine.

The kinds of things I will be printing:
* variables
* primitive applications
* case expressions

We should not have lambdas.
We should not have lets (assuming I'll use the approach I've said above to
indicate sharing).

If it's noticeably easier, perhaps I don't need to indicate sharing the first
time around. Just the second time and there-after?

Or! How about this:

Always dump the entire query, just annotate shared things the second time we
see them. That should make it clear what is being shared?

I don't know.

Or...

Use 'where'.

I like this idea.

First time we see something: print it out.
Any subsequent time we see something: just print the identifier.
At the bottom of the assertion, print out the contents of all the shared
things for reference.

Good.

Now, how to format the output?

* var - is atomic. Just output it where-ever we are.
* case: I suggest the following format:
    case (arg) of {
      Con a b -> y ;
      _ -> n
    }

In particular: always indent constructors by 2 from where the case was.
* application: the trouble is what to do if any of the arguments are long.

How about: if it can all fit within some number of characters:
    f x y z ....

Put it all one one line.

If it can't all fit within some number of characters, spread across lines:
   f x
     y
     z
     ...

With the indent.

I think that's good.

No type info needed.
We probably do need to qualify type constructors with smten qualification.

Good. Then I know what I want.

I would split it into two parts:
1. how to get the information to send to the debug unit.
2. how to generate the pretty string given that info.

I'm thinking an API like:
  var :: String -> Debug
  app :: Debug -> [Debug] -> Debug
  op :: String -> Debug -> Debug -> Debug
  case :: String -> [String] -> Debug -> Debug -> Debug

We'll also want some sort of cache for sharing.

It might be good to recognize syntax like strings and lists and ifs.

I really wish I could have Debug, realize, cases be separate traversals
somehow, rather than embedding them inside the objects.

Oh well.

Fri Jun 14 18:12:35 EDT 2013

I'm going to try to make progress on debug, even though I don't have worked
out how it should work out.

I do know I want the following:
* a debug method in SmtenHS
* an opaque Debug type
* functions for expressing debug things
    constructor, application, case, variable, literal, etc...

So I'll start there, and work from there.

Don't worry about primitives to start.
Don't worry about sharing to start.
Don't worry about prettiness of printing to start.

Sounds like a plan to me.

Fri Jun 14 18:58:04 EDT 2013

Good. We have a half reasonable start.

The biggest thing first:
 * case expressions should take multiple lines.

In particular:
case ... of {
  K -> ...
  _ -> ...
}

For this to work reasonably, we need to have a notion of location or context.
In particular, we need to know what the current tab indent is.

Let me give this a try then.

I used the pretty package to do this for me, because I don't really feel like
figuring out how to do it for now.

Now, how about recognizing 'if' specially?

Fri Jun 14 19:16:54 EDT 2013

Good.

Now what?

