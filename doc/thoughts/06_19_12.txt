
Tue Jun 19 10:50:54 EDT 2012

Goal for today: implement type inference.

The way to test type inference is to take as input the srif files, then output
the sri files, and compare that to what serif does. Err... Except there are
slight differences when it comes to modularity and such, so that may be
inconvenient. But something like that.

It would be good to have a way to pretty print with and without the type
annotations, for testing purposes.

So maybe the way to test type checking initially is to ...

Why don't I just make unit tests? Those will be reusable, and specific.
So, parse some simple declarations from a string, run type inference, run type
check, verify the result is correct. I can use this to test both type
inference and type checking, which will be very useful.

Throughout all of this, it seems like allowing explicit type annotations in
the parser and pretty printer will be very valuable for testing purposes. So
don't get rid of those yet.

Good. So it's settled then. Test using HUnit, by giving a type annotated
expression and a non-type annotated expression and comparing the results.
Maybe give poorly typed expressions and verify they don't type check.

Sounds like a great plan. Let me get started.

Step 1: Generate new type variables for all the UnknownTs in the expression.
You know? I think this could be part of generating the type constraints from
the expression. Just allocate a new type variable every time we encounter an
UnknownT? Does that work? Hmm... perhaps I ought to keep it separate stages.

With generics it's really easy to do anyway.

Tue Jun 19 11:00:23 EDT 2012

Okay, rough draft for that part is implemented.

Next step: Generate a set of type constraints from the expression.

Tue Jun 19 11:24:32 EDT 2012

In generating the type constraints for type inference, it seems like I'm
duplicating a lot of the type checking code. But, the type inference code
looks much cleaner.

Could I combine them? Reuse the same code? Or at least parts?

The part to combine would be the generation of constraints.

In the type inference, I generate a bunch of constraints, then I try to solve
them. In the type checking, I generate a bunch of constraints, and I require
that they are already satisfied.

One thing that's worrisome though, is error messages. The type checking
attempts to give good messages, but would it if I use the constraint based
method?

Maybe if I can figure out how to make it clear where the constraint came from.

How about this. Keep them separate for now. Finish up doing the type inference
as cleanly as I can. Then, when if the type inference really turns out to be
clean, and I can figure out a good way to use it for type checking, then I can
switch over then.

Hmm... Maybe we could annotate each constraint with where it came from, or an
error message to print out if it isn't satisfied. Then type inference: solve
the constraints. Type checking: verify the constraints, and print the error on
error.

Anyway, back to type inference. 

I need to add the constraints that all the bound patterns have the right type
in match expressions, because I had forgotten that.

Tue Jun 19 11:42:55 EDT 2012

I think I should have something in Types.
Given a pattern, returns the binding from Name to Type.

Tue Jun 19 11:57:25 EDT 2012

Cool. Things are getting cleaner. I like that.

Next thing to figure out: what to do about ConE and declared variables and
such?

The requirement is that, the type of ConE being used is a subtype of the type
of ConE in the environment.

This can be checked easily enough I think.
Get the type of the ConE from the environment. Replace all VarT's with newly
allocated VarT's in a consistent way. Then assert that the new type has the
same type as the ConE instance. Simple.

Yes, I'm thinking more and more now that Type checking and type inference are
really the same at the core, and should reuse a lot of the code. The only
thing stopping me is figuring out how to come up with good error messages.

But for each kind of constraint, I have all the info I need when I create the
constraint. So that's not a problem. The only question is about how context
works...

Anyway, keep going. I can think of this as a rewrite of type checking if I
want.

Fine. How to do ConE the right way?

I need the following:
 - given the name of a constructor (can't rely on it's type now)
    return the type of the constructor in the environment 

Basically this means lookup up all the DataD, and all the constructors within
then. That's maybe not so bad. How about this, add this to environment.

Env Name -> Failable Type

Look up the type of a data constructor.

Tue Jun 19 12:35:51 EDT 2012

Okay, I have that. Now to use it...

I need to pass the environment to type check.
What if we can't find the constructor in the environment? Then shouldn't type
inference fail?

The answer is yes. It should fail. So it should return a type Failable, and it
should take an environment.

Which means, we should have a FailableT monad. This would be useful in the
Parser too. It would clean up the code for type inference.

Okay, let me do this. Define FailableT, use it in the parser, switch to using
it in TypeInfer, and continue forth.

Tue Jun 19 12:46:56 EDT 2012

Do I need a transformer? How about just nest them?

Failable (m a)

Then I can call fail. But then what I want to lift?

liftf :: m a -> Failable (m a)
liftf ...

Is that what I really want? Yes, I think so.

Try that?

Yes.

Tue Jun 19 13:22:25 EDT 2012

The end solution was to use StateT PS Failable. That works swell in the
parser, it cleans things up nicely, and I don't have to worry about FailableT.

Next: back to the type inference..

I should add Decs to the environment.

Tue Jun 19 13:32:54 EDT 2012

Good. Now then, I have the type of the data constructor. Next I want to
allocate new type variables for it.

Tue Jun 19 13:46:59 EDT 2012

Next step: what to do for declared variables?

Well, it's obvious, no? Look up the declared variable, retype it, and do the
assert that way.

Same with instance, right?

Tue Jun 19 13:58:49 EDT 2012

There. That's fine. Expression constraint generation is all in place.
I'm slightly worried about the Variable info. I wonder, do I really need that?
Isn't that easy to infer? I don't know. I won't worry about it for now.

Next I need a way to constrain patterns.

Tue Jun 19 14:05:37 EDT 2012

There, that wasn't so bad.

Next step? 

The constraint solver.

Tue Jun 19 14:28:54 EDT 2012

Okay, so I've got an initial version of that based on past code.

All that's left is to substitute the solution back into the expression.

Tue Jun 19 14:32:43 EDT 2012

Code for that is there. Now all I need is to pull all the pieces together and
see if it works, or what all the problems are.

Tue Jun 19 14:36:53 EDT 2012

Here's how to test it:

Write a program called 'type', which takes serif and outputs sri. Then hard
code an expected input and output. That can test the type checked cases.
That's a good start.

Tue Jun 19 16:32:02 EDT 2012

Now it all compiles. Let me start with some simple examples from the library,
ideally working up to all the test cases.

Tue Jun 19 16:38:43 EDT 2012

First problem: how to handle an UnknownVI? What?
How to look up a Bound variable... why is that coming up?

Tue Jun 19 16:43:48 EDT 2012

Found that bug. Next problem: how to deal with UnknownVI...

First question: do I need VI at all? Or is really just for convenience in
compilers and such?

To figure out if a variable is bound, it seems like you need to pass the list
of bound variables down as you go. That could be annoying. Wouldn't it be
nicer to only do that once, and keep the results cached for others to do?

I dunno. Let me leave it in for now, and consider it's removal as a separate
step. The logic for figuring out if the variable is bound, declared, or an
instance.

Okay, so when do I want to look this up? How about a preprocessing step?

Keeps track of bound variables going down.
Look up unbound variables in ValDs first, in ClassDs second.

But! To figure out which instance it is, we need the type inference. So, let's
do type inference first. Then look this stuff up, and it should be possible to
figure out what instance (though a little complicated). I can make that a todo
for now.

So then, post inference is decided.

Tue Jun 19 17:05:22 EDT 2012

This would be much easier if I had a function for the environment which takes
a name and returns a Maybe VarInfo. Yes, let me assume I have that.

Tue Jun 19 17:11:04 EDT 2012

Okay, now for the fun part... or, leave it as todo. Yes, that's nice...

Good. Next issue: picking the right names for the variables based on the top
level forall.

Well, I could just use a symbol which makes the type inferernce's variables
lesser known, and add the top level constraint. Shouldn't that do it?

It's worth a try.

The trouble is... this makes it harder for methods, because I have to look up
the type signature. Do I have a way to do that already?

lookupSig takes the class name and the method name. That's what we'll want to
use, yes, then make the assignments from the class definition... ug. I don't
much feel like this now. Let me put another TODO and come back to it later.

Tue Jun 19 17:23:15 EDT 2012

It didn't work. It didn't substitute a and b and such.

Why not? Either the order is wrong, or it just won't.

Let me look at the solution to the system, see what I find.

Tue Jun 19 17:31:55 EDT 2012

Wow! It actually works. That's pretty cool.

Next I just need to test some more examples out, see what I find.

