Fri Jan 10 13:58:52 EST 2014
Sketch is not as fast on reimpl as on master. Why not?

Earlier we had identified the problem as loss of sharing in symapp for Char
and Int.

One approach is memoization. I thought this worked before, but it seems not
to work now. What's going on?

First thing: verify it doesn't work now.

foo.sk: Now works efficiently.
miniTest48.sk: Still blows up. This time in memory, whereas before it didn't.
miniTest49.sk: Blows up in memory.
miniTest52.sk: Blows up in memory.

Let's look at some profiles.
  VarE takes 40% time, split between an iteF and  PRIM_CHAR_EQ.

The Char and Int primitives still have a hefty amount of time, but not nearly
so overwhelming. But some ites are taking a lot of time.

We have got to be loosing concreteness somewhere. I wonder if its like the
arch-extract problem: somehow unreachable _|_ is getting mixed in with things,
making it not concrete?

I also note: foo.sk blows up if you change it slightly so that the pointers
change, even if the values are the same. Now especially due to that added memo
table.

It's not clear to me what the problem with sketch is after adding memoization,
but I think it's pretty clear memorization is not a good long term approach to
handling the original problem: namely that symapp looses sharing. Is that fair
to say?

The real problem is we are loosing concreteness:
  if p then 4 else 4
Is becoming symbolic, instead of remaining 4. I suspect that is propagating in
bad ways.

Thus, I think the other approach should be taken. Namely, I have to look at
Int and Char to recognize concreteness of values.

Now there is an issue: looking can be  bad if I just want to realize
something, but it is important to do things right if I am using something in a
formula. I wonder if this deserves some more thought.

What if we changed the representation of Symbolic.
Instead of (Formula, Value)...
Or rather, the idea is to distinguish between:
A. Value as something which may be realized, and hence should be as lazy as
   possible.
B. Value as something used in a formula, which should be as eager as it needs
to be to reduce the number of queries needed.

The key part being, we know when we convert a Value into a Formula?

Sat Jan 11 16:14:25 EST 2014

I fixed the surface sketch issue. But there's another now.

miniTest48:
  iteF: 70% time
  from ite2: 70% alloc
  from ite1
  from ite0
  from VarE

There aren't that many ite2's implemented, so I should be able to figure out
what's causing this, I hope.

The ite2 is ite of a function. I suspect this is the state monad function.
It's leading to allocation of tons of Expr.

Sat Jan 11 18:22:14 EST 2014

Simplified things some more. Important seems to be:
 * variable assignment.
     This blows up:
        foo = bar;
        return foo;
     This does not:
        return bar;
 * the number of cases.
    Here the number of cases is based on an Int.

Can I make a hypothesis for a smten test case?
It's like the issue we had before...

Looks something like:
1. Make a symbolic Int from 0 to n
2. Make a boolean based on that int.
3. Have a State monad either: nop or nop, conditioned on that boolean.
4. Insert the condition into a map.
5. Read from the map, and assert it's the same as the boolean.

Let me try, see if this triggers it.

Nope. Not good enough.

Sun Jan 12 09:54:03 EST 2014

Interesting progress: the presence or absence of the global variable
declaration int N = 1 makes a difference, even though the variable is not
used. Why would that matter?

More specific: if N is IntV 1, it's fine, but if N is cast from BitV True
using ICast, it blows up.

I don't understand.

The problem seems to be having typeofV return a different result depending on
the value of the IntV. Except, we know we are only calling this with (BitV
True), right? So how can that matter?

Note: we weren't properly handling unreachable for Ite of Char and Int, but
even after fixing that, we still have the same problem.

It seems to be tied up in type equality of the result? No.

I don't understand.

Mon Jan 13 16:19:05 EST 2014

Requirements for the bug to occur:
 * there exists a global variable whose value is icasted.
    (even though the global variable is never referenced)
 * icast returns a different result depending on the value of the
   Int field for an IntV value.
    (even though the value doesn't have the IntV constructor)
 * Shr is performed (as opposed to Shl)

if ({true} >> x) {}
return (x == x)
 
Question: what if we perform a right shift where the number of elements
shifted is greater than the number there?

For example:  3 bits, shifted by 5.
That result should be 3 bits, but here the result is 5!

That's a bug in sketch. Is it the problem here?

Let me fix the definition of shift right so that doesn't happen.

That didn't fix the problem I was seeing though.

It appears the array access is important?

It looks like it depends on array access out of bounds.
If I do (av !! idx), with only the assertion to guard the error, things blow
up. If I explicitly give an error based on the index instead of calling (av !!
idx), nothing bad happens.

But, that change breaks other things.

I don't understand why.
It also doesn't fix the problems with miniTest48 we were having.


Perhaps the issue is this. We 'assert False', but with a special
implementation of 'assert' which keeps executing, even after the assertion
fails. You would think, instead, that if the result is 'False', then you
should just give up. Like, use an error monad, not a monad that happens to
keep track of some predicate as it goes. Otherwise you will trigger calls to
_|_ when you shouldn't.

This is an interesting observation. It suggests to me that something funky is
going on with the way my version of sketch is implemented, and that perhaps I
should sort that out first.

What this suggests to me is, it is, perhaps, not a great use of my time to try
and identify the sketch performance bug. Rather, I should focus on the sketch
implementation itself. Clean that up. Then see if it works and why or why not.

An alternative would be to look into hardware model checkers and the CAV
synthesis competition based on those. That avoids issues with sketch being
such a crazy language to have to deal with.

