

module Smten.SMT.Tests.Share (test) where

import Smten.SMT.Symbolic
import Smten.SMT.Tests.Test

dbg :: String -> Solver 
dbg s = Debug ("build/test/" ++ s ++ ".dbg") Yices2

test :: IO ()
test = do
    symtesteq "Share.Simple" (Just 1) [dbg "Share.Simple"] $ do
        x <- free
        assert ((\a -> a + a == (10 :: Integer)) (x + x + x + x + x))
        return x 

    symtesteq "Share.Samectx" (Just 1) [dbg "Share.Samectx"] $ do
        p <- free
        x <- free
        assert ((\a -> (if p then a + a
                            else 0) == (10 :: Integer)) (x+x+x+x+x))
        return x

    symtesteq "Share.Diffctx" (Just 1) [dbg "Share.Diffctx"] $ do
        p <- free
        x <- free
        assert ((\a -> (if p then a + a
                            else a - a) == (10 :: Integer)) (x+x+x+x+x))
        return x

    symtesteq "Share.CaseDesugar" (Just (1 :: Integer)) [dbg "Share.CaseDesugar"] $ do
        x <- free
        a <- free
        b <- free
        c <- free
        d <- free
        assert $ 5 == case () of
                        _ | a, b, c, d -> 5
                          | otherwise -> (x + x + x + x + x)
        assert (not d)
        return x

    symtesteq "Share.AppEval" (Just (1 :: Integer)) [dbg "Share.AppEval"] $ do
        let f = \x -> 0
            g = \x -> x + x + x + x + x
        p <- free
        q <- free
        z <- free
        assert $ 5 == (case () of
                        _ | p, q -> f
                          | otherwise -> g
                      ) z
        assert (not q)
        return z

