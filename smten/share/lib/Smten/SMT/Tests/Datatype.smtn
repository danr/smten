
module Smten.SMT.Tests.Datatype (test) where

import Smten.SMT.Symbolic
import Smten.SMT.Tests.Test

data MyEnum = E1 | E2 | E3 | E4
    deriving (Eq, Free)

rotateenum :: MyEnum -> MyEnum
rotateenum E1 = E2
rotateenum E2 = E1
rotateenum E3 = E4
rotateenum _ = E3

data MyStruct = MyStruct MyEnum Bool
    deriving (Eq, Free)

changestruct :: MyStruct -> MyStruct
changestruct (MyStruct e True) = MyStruct (rotateenum e) False
changestruct (MyStruct e _) = MyStruct e True

data MyMix = Mix1 Bool Bool
           | Mix2 Bool
    deriving (Eq, Free)

mixval :: MyMix -> MyEnum
mixval (Mix1 True _) = E1
mixval (Mix1 _ _) = E2
mixval (Mix2 True) = E3
mixval _ = E4

test :: IO ()
test = do
    symtesteq "Datatype.Enum" (Just E4) [Yices1, Yices2, STP] $ do
        a <- free
        assert (rotateenum a == E3)
        return a

    symtesteq "Datatype.Struct" (Just (MyStruct E1 True)) [Yices1, Yices2, STP] $ do
        b <- free
        assert (changestruct b == MyStruct E2 False)
        return b
    
    symtesteq "Datatype.Mix" (Just (Mix2 True)) [Yices1, Yices2, STP] $ do
        c <- free
        assert (mixval c == E3)
        return c

    symtesteq "DataType.Caseoflet" (Just False) [Yices1, Yices2, STP] $ do
        d <- free
        assert (case (let v = d || d
                      in if v then E1 else E2) of
                   E1 -> False
                   E2 -> True
                 )
        return d

