
module Smten.SMT.Tests.Nest where

import Prelude
import Smten.SMT.Symbolic
import Smten.Tests.Test

qtest :: SMT ()
qtest = do
    r <- nest $ do
        use $ assert False
        query (return ())
    test "nest.unsat" (r == Nothing)

    a <- use free
    use $ (used a >>= assert)
    ra <- query $ used a
    test "nest.nowsat" (ra == Just True)

    b <- use free
    c <- use free
    bc <- use $ do
            vb <- used b
            vc <- used c
            assert (vb /= vc)
            return (vb, vc)
    rbc <- query $ used bc
    test "nest.prep" $
        case rbc of
            Just (vb, vc) -> vb /= vc
            _ -> False

    rbc1 <- nest $ do
        use $ (used b >>= assert)
        query $ used bc
    test "nest.s1" (rbc1 == Just (True, False))

    rbc2 <- nest $ do
        use $ (used c >>= assert)
        query $ used bc
    test "nest.s2" (rbc2 == Just (False, True))

    nest $ do
      use $ do
        x <- free
        assert x
    rd <- query (return ())
    test "nest.popvar" (rd == Just ())

    -- This case was causing issues with STP.
    nest $ do
        xr <- use free
        b <- query $ do
            x <- used xr
            assert (not x)
        test "nest.bug.nx" (b == Just ())

        c <- query $ do
            x <- used xr
            assert (x && x)
        test "nest.bug.xx" (c == Just ())

    -- Another case causing issues with STP.
--    nest $ do
--        xr <- use free
--        ur <- use (return ())
--
--        nest $ do
--            y <- query $ do
--                   x <- used xr
--                   assert (not x)
--            test "nest.bug2.y" (y == Just ())
--
--            use $ do
--                x <- used xr
--                assert (x && x)
--            v <- query_Used ur
--            test "nest.bug2.v" (v == Just ())
        
    
main :: IO ()
main = do
    runSMT Yices1 (Just "build/test/Nest.yices1.dbg") qtest
    runSMT Yices2 (Just "build/test/Nest.yices2.dbg") qtest
    --runSMT STP (Just "build/test/Nest.stp.dbg") qtest
    putStrLn "NEST PASSED"

