
module Smten.SMT.Tests.Integer (testinteger) where

import Smten.SMT.Symbolic
import Smten.SMT.Tests.Test

testinteger :: IO ()
testinteger = do
    symtesteq "Integer.Trivial" (Just 0) [Yices1, Yices2] $ do
        a <- free 
        assert (a == 0)
        return (a :: Integer)

    symtesteq "Integer.Eq" (Just (4, 4)) [Yices1, Yices2] $ do
        b <- free
        c <- free
        assert (b == c)
        assert (b == 4)
        return (b :: Integer, c :: Integer)

    symtesteq "Integer.Add" (Just (6, 8)) [Yices1, Yices2] $ do
        d <- free
        e <- free
        assert ((d + 2) == e)
        assert (e == 8)
        return (d :: Integer, e :: Integer)

    symtesteq "Integer.Sub" (Just (10, 8)) [Yices1, Yices2] $ do
        f <- free
        g <- free
        assert ((f - 2) == g)
        assert (g == 8)
        return (f :: Integer, g :: Integer)

    symtesteq "Integer.Compare" (Just 7) [Yices1, Yices2] $ do
        h <- free
        assert (h < 8)
        assert (h > 6)
        return (h :: Integer)

    symtesteq "Integer.Compare2" (Just 7) [Yices1, Yices2] $ do
        i <- free
        assert (i >= 7)
        assert (i <= 7)
        return (i :: Integer)

    -- Test more complex
    symtesteq "Integer.Complex" (Just (5, 3)) [Yices1, Yices2] $ do
        x <- free
        y <- free
        assert ((x + y) == 8)
        assert ((x - y) == 2)
        return (x :: Integer, y :: Integer)

