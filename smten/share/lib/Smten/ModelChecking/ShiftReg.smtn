
module Smten.ModelChecking.ShiftReg where

import Smten.SMT.Symbolic
import Smten.ModelChecking.Bounded

data SRState = SRState {
    x0 :: Bool,
    x1 :: Bool,
    x2 :: Bool
} deriving (Free, Show)

srtrans_bad :: SRState -> SRState -> Bool
srtrans_bad a b = (x0 b == x1 a) && (x1 b == x2 a) && (x2 b == True)

srtrans_good :: SRState -> SRState -> Bool
srtrans_good a b = (x0 b == x1 a) && (x1 b == x2 a) && (x2 b == False)

srinit :: SRState -> Bool
srinit = const True

shiftregm :: Model SRState
shiftregm = Model srinit srtrans_bad

allzero :: SRState -> Bool
allzero s = not (x0 s) && not (x1 s) && not (x2 s)

shiftregf :: LTL SRState
shiftregf = Globally (Prop (not . allzero))

