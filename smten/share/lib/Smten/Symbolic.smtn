
module Smten.Symbolic where

import Smten.Bit.Dynamic

data Symbolic a = 


foreign import hs "Smten.Runtime.Symbolic.return_symbolic"
    return_symbolic :: a -> Symbolic a

foreign import hs "Smten.Runtime.Symbolic.bind_symbolic"
    bind_symbolic :: Symbolic a -> (a -> Symbolic b) -> Symbolic b

foreign import hs "Smten.Runtime.Symbolic.fail_symbolic"
    fail_symbolic :: Symbolic a

foreign import hs "Smten.Runtime.Symbolic.free_Bool"
    free_Bool :: Symbolic Bool

foreign import hs "Smten.Runtime.Symbolic.free_Integer"
    free_Integer :: Symbolic Integer

foreign import hs "Smten.Runtime.Symbolic.free_Bit"
    free_Bit :: Integer -> Symbolic Bit

instance Functor Symbolic where
  fmap f x = x >>= return . f

instance Monad Symbolic where
  return = return_symbolic
  (>>=) = bind_symbolic

assert :: Bool -> Symbolic ()
assert p = if p then return () else fail_symbolic

data Solver = Yices1 | Yices2 | STP
            | Debug FilePath Solver
            | DebugLL FilePath Solver
    deriving (Show)

foreign import hs "Smten.Runtime.Symbolic.run_symbolic"
    run_symbolic :: Solver -> Symbolic a -> IO (Maybe a)

class Free a where
    free :: Symbolic a

deriving instance Free ()

instance Free Integer where
    free = free_Integer

instance Free Bool where
    free = free_Bool

