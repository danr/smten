
module Smten.Tests.SMT.Bit (tests) where

import Smten.Bit.Static
import Smten.Symbolic
import Smten.Tests.SMT.Test

tests :: IO ()
tests = do
    symtesteq "Bit.Cmp" (Just 7) [Yices1, Yices2, STP] $ do
        a <- free
        assert (a < 8)
        assert (a > 6)
        return (a :: Bit #8)

    -- TODO: STP fails this test!
    symtesteq "Bit.SignExt1" (Just 3) [Yices1, Yices2] $ do
        a <- free
        assert (bv_sign_extend (a :: Bit #3) == (0x3 :: Bit #5))
        return a

    -- TODO: STP fails this test!
    symtesteq "Bit.SignExt2" (Just 4) [Yices1, Yices2] $ do
        a <- free
        assert (bv_sign_extend (a :: Bit #3) == (0x1c :: Bit #5))
        return a

    symtesteq "Bit.Simple" (Just 0) [Yices1, Yices2, STP] $ do
        a <- free
        assert (a == 0)
        return (a :: Bit #5)

    symtesteq "Bit.Eq" (Just (5, 5)) [Yices1, Yices2, STP] $ do
        b <- free
        c <- free
        assert (b == c)
        assert (c == 5)
        return (b :: Bit #5, c :: Bit #5)

    symtesteq "Bit.Add" (Just 6) [Yices1, Yices2, STP] $ do
        d <- free
        assert ((d + 3) == 1)
        return (d :: Bit #3)

    symtesteq "Bit.Sub" (Just 1) [Yices1, Yices2, STP] $ do
        e <- free
        assert ((e - 3) == 6)
        return (e :: Bit #3)

    symtesteq "Bit.Not" (Just 0x0A) [Yices1, Yices2, STP] $ do
        f <- free
        assert (bv_not f == 0x15)
        return (f :: Bit #5)

    -- TODO: this fails for STP
    symtesteq "Bit.And" (Just 0x5) [Yices1, Yices2] $ do
        g <- free
        assert (bv_and g 0xA == 0x0)
        assert (bv_or g 0xA == 0xF)
        return (g :: Bit #4)

    symtesteq "Bit.Concat" (Just 3) [Yices1, Yices2, STP] $ do
        h <- free
        assert (bv_concat (0x5 :: Bit #3) h == 0x17)
        return (h :: Bit #2)

    -- TODO: this fails for Yices1!
    symtesteq "Bit.Lsh" (Just 3) [Yices2, STP] $ do
        i <- free
        assert (bv_shl (0x15 :: Bit #8) i == 0xA8)
        return (i :: Bit #8)

    symtesteq "Bit.Extract" (Just 0xAB) [Yices1, Yices2, STP] $ do
        i <- free
        assert (bv_extract i 0 == (0xB :: Bit #4))
        assert (bv_extract i 4 == (0xA :: Bit #4))
        return (i :: Bit #8)

    symtesteq "Bit.Truncate" (Just 0xAB) [Yices1, Yices2, STP] $ do
        i <- free
        assert (bv_truncate i == (0xB :: Bit #4))
        assert (bv_extract i 4 == (0xA :: Bit #4))
        return (i :: Bit #8)

    putStrLn "SMT.Bit PASSED"

