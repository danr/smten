
module Smten.SMT.Tests.Array where

import Prelude
import Smten.SMT.Array
import Smten.SMT.SMT

arr :: SMTArray Integer
arr = smta_upd (smta_upd (smta_upd (smta_new 3) 0 42) 1 12) 2 19

arrayworks :: Bool
arrayworks = and [
    42 == smta_sub arr 0,
    12 == smta_sub arr 1,
    19 == smta_sub arr 2]

-- Return the sum of the first n elements in the array.
arrsum :: Integer -> SMTArray Integer -> Integer
arrsum 0 _ = 0
arrsum n arr = smta_sub arr (n-1) + arrsum (n-1) arr

qmain :: Query (Answer (Integer, Integer, Integer, Integer))
qmain = do
    assert arrayworks

    x <- free
    assert (arr == (smta_upd arr 1 x))
    
    arr2 <- smta_free 3
    assert (arr2 == arr)

    y <- free
    assert (y == smta_sub arr2 2)

    -- Test operations on free arrays.
    -- z should be 2.
    af <- smta_free 2
    assert (arrsum 2 (smta_upd af 0 5) == 7)
    z <- free
    assert (z == smta_sub af 1)

    -- free update index
    w <- free
    assert ((w >= 0) && (w < 3))
    assert (arrsum 3 (smta_upd arr w 0) == 61)

    query (x, y, z, w)

main :: IO ()
main = do
    putStr "yices1..."
    r1 <- runYices1 (Just "build/test/Array.yices1.dbg") qmain
    putStrLn (show r1)

    putStr "yices2..."
    r2 <- runYices2 (Just "build/test/Array.yices2.dbg") qmain
    putStrLn (show r2)
