
module Smten.SMT.Tests.Sketch2QBF where

import Prelude
import Smten.SMT.Symbolic

-- Answer the question:
--   Does there exist a value 'c' such that for all 'x', p(x, c) is satisfied?
--
--   Based on algorithm in section 5.4 of
--   "Combinatorial Sketching for Finite Programs", in ASPLOS06
--
--  You provide at least one initial concrete value for 'x', it returns a
--  value for 'c' if it can.
--
--  x has type a
--  c has type b
sketch2qbf' :: (Free a, Free b) => [a] -> (b -> a -> Bool) -> SMT (Maybe b)
sketch2qbf' xs p = do
  -- Find some concrete 'c' which satisfies the predicate for all existing
  -- examples.
  rc <- query $ do
      c <- free
      assert (all (p c) xs)
      return c
  case rc of
    Nothing -> return Nothing
    Just cv -> do
      -- Find a counter example
      rx <- query $ do
          x <- free
          assert (not (p cv x))
          return x
      case rx of
        Nothing -> return (Just cv)
        Just xv -> sketch2qbf' (xv:xs) p

sketch2qbf :: (Free a, Free b) => (b -> a -> Bool) -> SMT (Maybe b)
sketch2qbf = sketch2qbf' []
  
