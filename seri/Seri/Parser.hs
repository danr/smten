
module Seri.Parser (
    -- * The Seri Language
    -- $doc
    parse
    ) where

import Seri.Parser.Grammar

-- $doc
-- The Seri language is a subset of haskell. The following lists the
-- differences between the Seri language and haskell as defined in the 
-- Haskell 98 Language Report.
--
-- [@Things to implement eventually, perhaps@]
--
-- - Explicit module exports are not allowed.
--
-- - Qualified imports are not allowed.
--
-- - Importing a module under a different name using 'as' is not allowed.
--
-- - Import specifications are not supported.
--
-- - Type synonyms are not allowed to have arguments
--
-- - Contexts are not allowed in data declarations
--
-- - Only Eq is supported in deriving clauses for data declarations.
--   (deriving Free is also supported, specific to Seri)
--
-- - Newtype declarations are not supported
--
-- - Contexts in class declarations are not supported
--
-- - Empty class declarations are not supported
--
-- - Default class methods implementations are not supported.
--
-- - Multiple vars for a single type signature are not supported.
-- 
-- - fixity declarations are not supported.
--
-- - Qualified names are not supported.
--
-- - Unparenthesized contexts are not supported
--
-- - ! in constructor declarations are not supported
--
-- - infix constructors are not supported, except for (:).
--
-- - 'where' clauses in expressions are not supported.
--
-- - pattern guards are not supported.
--
-- - left and right sections are not supported.
--
-- - irrefutable patterns are not supported
-- 
-- - variable operators, such as (a `foo` b) are not supported.
--
-- - float literals are not supported.
--
-- - recursive let expressions are not supported(?). Currently let expressions
--   are sequential, not recursive.
--
-- [@Things meant to be different from haskell@]
--
-- - Extra semicolons are often allowed.
--
-- - Multi-param type classes are supported.
--
-- - variable signatures not accompanied by an implementation are allowed,
-- indicating a primitive variable.
--
-- - Empty data declarations are supported, indicating a primitive type.
--
-- - Numeric types are supported, introduced with the # symbol.
--
-- - deriving of Free is supported
--
--
-- [@Other Notes@]
--
-- - record constructors define variables for an undefined version of the
-- constructor (for Foo {}), and for updating (for x { foo = bar }).
-- This is not part of the haskell spec, but is used for implementation
-- purposes so label construction and update really is just syntactic sugar.
-- You probably shouldn't rely on this behavior.

