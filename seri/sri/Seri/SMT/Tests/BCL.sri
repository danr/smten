
module Seri.SMT.Tests.BCL where {

import Prelude;
import Seri.SMT.SMT;

data FIFO a =
    FIFO Integer Integer Integer (Integer -> a) Bool Bool
;
__FIFO_undef :: FIFO a;
__FIFO_undef = (FIFO :: Integer -> Integer -> Integer -> (Integer -> a) -> Bool -> Bool -> FIFO a) (undefined :: Integer) (undefined :: Integer) (undefined :: Integer) (undefined :: Integer -> a) (undefined :: Bool) (undefined :: Bool)
;
max_cnt :: FIFO a -> Integer;
max_cnt = (\(a :: FIFO a) ->
             case (a :: FIFO a) of {
               (FIFO :: FIFO a) (x :: Integer) (_ :: Integer) (_ :: Integer) (_ :: Integer -> a) (_ :: Bool) (_ :: Bool) ->
                 (x :: Integer);
             })
;
enq_idx :: FIFO a -> Integer;
enq_idx = (\(a :: FIFO a) ->
             case (a :: FIFO a) of {
               (FIFO :: FIFO a) (_ :: Integer) (x :: Integer) (_ :: Integer) (_ :: Integer -> a) (_ :: Bool) (_ :: Bool) ->
                 (x :: Integer);
             })
;
deq_idx :: FIFO a -> Integer;
deq_idx = (\(a :: FIFO a) ->
             case (a :: FIFO a) of {
               (FIFO :: FIFO a) (_ :: Integer) (_ :: Integer) (x :: Integer) (_ :: Integer -> a) (_ :: Bool) (_ :: Bool) ->
                 (x :: Integer);
             })
;
arr :: FIFO a -> Integer -> a;
arr = (\(a :: FIFO a) ->
         case (a :: FIFO a) of {
           (FIFO :: FIFO a) (_ :: Integer) (_ :: Integer) (_ :: Integer) (x :: Integer -> a) (_ :: Bool) (_ :: Bool) ->
             (x :: Integer -> a);
         })
;
mod_enq :: FIFO a -> Bool;
mod_enq = (\(a :: FIFO a) ->
             case (a :: FIFO a) of {
               (FIFO :: FIFO a) (_ :: Integer) (_ :: Integer) (_ :: Integer) (_ :: Integer -> a) (x :: Bool) (_ :: Bool) ->
                 (x :: Bool);
             })
;
mod_deq :: FIFO a -> Bool;
mod_deq = (\(a :: FIFO a) ->
             case (a :: FIFO a) of {
               (FIFO :: FIFO a) (_ :: Integer) (_ :: Integer) (_ :: Integer) (_ :: Integer -> a) (_ :: Bool) (x :: Bool) ->
                 (x :: Bool);
             })
;
__max_cnt_update :: Integer -> FIFO a -> FIFO a;
__max_cnt_update = (\(a :: Integer) ->
                      (\(b :: FIFO a) ->
                         case ((a :: Integer), (b :: FIFO a)) of {
                           ((max_cnt :: Integer),
                            (FIFO :: FIFO a) (_ :: Integer) (enq_idx :: Integer) (deq_idx :: Integer) (arr :: Integer -> a) (mod_enq :: Bool) (mod_deq :: Bool)) ->
                             (FIFO :: Integer -> Integer -> Integer -> (Integer -> a) -> Bool -> Bool -> FIFO a) (max_cnt :: Integer) (enq_idx :: Integer) (deq_idx :: Integer) (arr :: Integer -> a) (mod_enq :: Bool) (mod_deq :: Bool);
                         }))
;
__enq_idx_update :: Integer -> FIFO a -> FIFO a;
__enq_idx_update = (\(a :: Integer) ->
                      (\(b :: FIFO a) ->
                         case ((a :: Integer), (b :: FIFO a)) of {
                           ((enq_idx :: Integer),
                            (FIFO :: FIFO a) (max_cnt :: Integer) (_ :: Integer) (deq_idx :: Integer) (arr :: Integer -> a) (mod_enq :: Bool) (mod_deq :: Bool)) ->
                             (FIFO :: Integer -> Integer -> Integer -> (Integer -> a) -> Bool -> Bool -> FIFO a) (max_cnt :: Integer) (enq_idx :: Integer) (deq_idx :: Integer) (arr :: Integer -> a) (mod_enq :: Bool) (mod_deq :: Bool);
                         }))
;
__deq_idx_update :: Integer -> FIFO a -> FIFO a;
__deq_idx_update = (\(a :: Integer) ->
                      (\(b :: FIFO a) ->
                         case ((a :: Integer), (b :: FIFO a)) of {
                           ((deq_idx :: Integer),
                            (FIFO :: FIFO a) (max_cnt :: Integer) (enq_idx :: Integer) (_ :: Integer) (arr :: Integer -> a) (mod_enq :: Bool) (mod_deq :: Bool)) ->
                             (FIFO :: Integer -> Integer -> Integer -> (Integer -> a) -> Bool -> Bool -> FIFO a) (max_cnt :: Integer) (enq_idx :: Integer) (deq_idx :: Integer) (arr :: Integer -> a) (mod_enq :: Bool) (mod_deq :: Bool);
                         }))
;
__arr_update :: (Integer -> a) -> FIFO a -> FIFO a;
__arr_update = (\(a :: Integer -> a) ->
                  (\(b :: FIFO a) ->
                     case ((a :: Integer -> a), (b :: FIFO a)) of {
                       ((arr :: Integer -> a),
                        (FIFO :: FIFO a) (max_cnt :: Integer) (enq_idx :: Integer) (deq_idx :: Integer) (_ :: Integer -> a) (mod_enq :: Bool) (mod_deq :: Bool)) ->
                         (FIFO :: Integer -> Integer -> Integer -> (Integer -> a) -> Bool -> Bool -> FIFO a) (max_cnt :: Integer) (enq_idx :: Integer) (deq_idx :: Integer) (arr :: Integer -> a) (mod_enq :: Bool) (mod_deq :: Bool);
                     }))
;
__mod_enq_update :: Bool -> FIFO a -> FIFO a;
__mod_enq_update = (\(a :: Bool) ->
                      (\(b :: FIFO a) ->
                         case ((a :: Bool), (b :: FIFO a)) of {
                           ((mod_enq :: Bool),
                            (FIFO :: FIFO a) (max_cnt :: Integer) (enq_idx :: Integer) (deq_idx :: Integer) (arr :: Integer -> a) (_ :: Bool) (mod_deq :: Bool)) ->
                             (FIFO :: Integer -> Integer -> Integer -> (Integer -> a) -> Bool -> Bool -> FIFO a) (max_cnt :: Integer) (enq_idx :: Integer) (deq_idx :: Integer) (arr :: Integer -> a) (mod_enq :: Bool) (mod_deq :: Bool);
                         }))
;
__mod_deq_update :: Bool -> FIFO a -> FIFO a;
__mod_deq_update = (\(a :: Bool) ->
                      (\(b :: FIFO a) ->
                         case ((a :: Bool), (b :: FIFO a)) of {
                           ((mod_deq :: Bool),
                            (FIFO :: FIFO a) (max_cnt :: Integer) (enq_idx :: Integer) (deq_idx :: Integer) (arr :: Integer -> a) (mod_enq :: Bool) (_ :: Bool)) ->
                             (FIFO :: Integer -> Integer -> Integer -> (Integer -> a) -> Bool -> Bool -> FIFO a) (max_cnt :: Integer) (enq_idx :: Integer) (deq_idx :: Integer) (arr :: Integer -> a) (mod_enq :: Bool) (mod_deq :: Bool);
                         }))
;
notEmpty_val_FIFO_a :: FIFO a -> Bool;
notEmpty_val_FIFO_a = (\(a :: FIFO a) ->
                         case (a :: FIFO a) of {
                           (fifo :: FIFO a) ->
                             ((/=) :: Integer -> Integer -> Bool) ((enq_idx :: FIFO a -> Integer) (fifo :: FIFO a)) ((deq_idx :: FIFO a -> Integer) (fifo :: FIFO a));
                         })
;
notFull_val_FIFO_a :: FIFO a -> Bool;
notFull_val_FIFO_a = (\(a :: FIFO a) ->
                        case (a :: FIFO a) of {
                          (fifo :: FIFO a) ->
                            let {
                              (ei :: Integer) = (enq_idx :: FIFO a -> Integer) (fifo :: FIFO a) ;
                              (ma :: Integer) = (max_cnt :: FIFO a -> Integer) (fifo :: FIFO a) ;
                              (di :: Integer) = (deq_idx :: FIFO a -> Integer) (fifo :: FIFO a) ;
                            } in if ((==) :: Integer -> Integer -> Bool) (ei :: Integer) (ma :: Integer)
                                   then ((/=) :: Integer -> Integer -> Bool) (di :: Integer) 0
                                   else ((/=) :: Integer -> Integer -> Bool) (di :: Integer) (((+) :: Integer -> Integer -> Integer) (ei :: Integer) 1);
                        })
;
first_val_FIFO_a :: FIFO a -> a;
first_val_FIFO_a = (\(a :: FIFO a) ->
                      case (a :: FIFO a) of {
                        (fifo :: FIFO a) ->
                          (arr :: FIFO a -> Integer -> a) (fifo :: FIFO a) ((deq_idx :: FIFO a -> Integer) (fifo :: FIFO a));
                      })
;
clear_FIFO_a :: FIFO a -> (Bool, FIFO a, ());
clear_FIFO_a = (\(a :: FIFO a) ->
                  case (a :: FIFO a) of {
                    (fifo :: FIFO a) ->
                      ((True :: Bool),
                       (__enq_idx_update :: Integer -> FIFO a -> FIFO a) 0 ((__deq_idx_update :: Integer -> FIFO a -> FIFO a) 0 (fifo :: FIFO a)),
                       (() :: ()));
                  })
;
deq_FIFO_a :: FIFO a -> (Bool, FIFO a, ());
deq_FIFO_a = (\(a :: FIFO a) ->
                case (a :: FIFO a) of {
                  (fifo :: FIFO a) ->
                    let {
                      (di :: Integer) = (deq_idx :: FIFO a -> Integer) (fifo :: FIFO a) ;
                      (ma :: Integer) = (max_cnt :: FIFO a -> Integer) (fifo :: FIFO a) ;
                      (new_di :: Integer) = if ((==) :: Integer -> Integer -> Bool) (di :: Integer) (ma :: Integer)
                                              then 0
                                              else ((+) :: Integer -> Integer -> Integer) (di :: Integer) 1 ;
                    } in ((notEmpty_val_FIFO_a :: FIFO a -> Bool) (fifo :: FIFO a),
                          (__deq_idx_update :: Integer -> FIFO a -> FIFO a) (new_di :: Integer) ((__mod_deq_update :: Bool -> FIFO a -> FIFO a) (True :: Bool) (fifo :: FIFO a)),
                          (() :: ()));
                })
;
enq_FIFO_a :: a -> FIFO a -> (Bool, FIFO a, ());
enq_FIFO_a = (\(a :: a) ->
                (\(b :: FIFO a) ->
                   case ((a :: a), (b :: FIFO a)) of {
                     ((x :: a), (fifo :: FIFO a)) ->
                       let {
                         (ei :: Integer) = (enq_idx :: FIFO a -> Integer) (fifo :: FIFO a) ;
                         (ma :: Integer) = (max_cnt :: FIFO a -> Integer) (fifo :: FIFO a) ;
                         (ar :: Integer -> a) = (arr :: FIFO a -> Integer -> a) (fifo :: FIFO a) ;
                         (new_ei :: Integer) = if ((==) :: Integer -> Integer -> Bool) (ei :: Integer) (ma :: Integer)
                                                 then 0
                                                 else ((+) :: Integer -> Integer -> Integer) (ei :: Integer) 1 ;
                         (new_ar :: Integer -> a) = (\(idx :: Integer) ->
                                                       if ((==) :: Integer -> Integer -> Bool) (idx :: Integer) (ei :: Integer)
                                                         then (x :: a)
                                                         else (ar :: Integer -> a) (idx :: Integer)) ;
                       } in ((notFull_val_FIFO_a :: FIFO a -> Bool) (fifo :: FIFO a),
                             (__enq_idx_update :: Integer -> FIFO a -> FIFO a) (new_ei :: Integer) ((__arr_update :: (Integer -> a) -> FIFO a -> FIFO a) (new_ar :: Integer -> a) ((__mod_enq_update :: Bool -> FIFO a -> FIFO a) (True :: Bool) (fifo :: FIFO a))),
                             (() :: ()));
                   }))
;
first_guard_FIFO_a :: FIFO a -> Bool;
first_guard_FIFO_a = (\(a :: FIFO a) ->
                        case (a :: FIFO a) of {
                          (fifo :: FIFO a) ->
                            (True :: Bool);
                        })
;
notFull_guard_FIFO_a :: FIFO a -> Bool;
notFull_guard_FIFO_a = (\(a :: FIFO a) ->
                          case (a :: FIFO a) of {
                            (fifo :: FIFO a) ->
                              (True :: Bool);
                          })
;
notEmpty_guard_FIFO_a :: FIFO a -> Bool;
notEmpty_guard_FIFO_a = (\(a :: FIFO a) ->
                           case (a :: FIFO a) of {
                             (fifo :: FIFO a) ->
                               (True :: Bool);
                           })
;
merge_p_FIFO_a :: FIFO a -> FIFO a -> FIFO a;
merge_p_FIFO_a = (\(a :: FIFO a) ->
                    (\(b :: FIFO a) ->
                       case ((a :: FIFO a), (b :: FIFO a)) of {
                         ((a :: FIFO a), (b :: FIFO a)) ->
                           let {
                             (enq_f :: FIFO a) = if (mod_enq :: FIFO a -> Bool) (a :: FIFO a)
                                                   then (a :: FIFO a)
                                                   else (b :: FIFO a) ;
                             (deq_f :: FIFO a) = if (mod_deq :: FIFO a -> Bool) (b :: FIFO a)
                                                   then (b :: FIFO a)
                                                   else (a :: FIFO a) ;
                             (di :: Integer) = (deq_idx :: FIFO a -> Integer) (deq_f :: FIFO a) ;
                           } in (__deq_idx_update :: Integer -> FIFO a -> FIFO a) (di :: Integer) ((__mod_deq_update :: Bool -> FIFO a -> FIFO a) ((mod_deq :: FIFO a -> Bool) (deq_f :: FIFO a)) (enq_f :: FIFO a));
                       }))
;
count_FIFO_a :: FIFO a -> Integer;
count_FIFO_a = (\(a :: FIFO a) ->
                  case (a :: FIFO a) of {
                    (fifo :: FIFO a) ->
                      let {
                        (ei :: Integer) = (enq_idx :: FIFO a -> Integer) (fifo :: FIFO a) ;
                        (di :: Integer) = (deq_idx :: FIFO a -> Integer) (fifo :: FIFO a) ;
                        (ma :: Integer) = (max_cnt :: FIFO a -> Integer) (fifo :: FIFO a) ;
                      } in if ((<) :: Integer -> Integer -> Bool) (ei :: Integer) (di :: Integer)
                             then ((+) :: Integer -> Integer -> Integer) (((-) :: Integer -> Integer -> Integer) (((+) :: Integer -> Integer -> Integer) (ma :: Integer) 1) (di :: Integer)) (ei :: Integer)
                             else ((-) :: Integer -> Integer -> Integer) (ei :: Integer) (di :: Integer);
                  })
;
sub_FIFO_a :: FIFO a -> Integer -> a;
sub_FIFO_a = (\(a :: FIFO a) ->
                (\(b :: Integer) ->
                   case ((a :: FIFO a), (b :: Integer)) of {
                     ((fifo :: FIFO a), (idx :: Integer)) ->
                       let {
                         (ma :: Integer) = (max_cnt :: FIFO a -> Integer) (fifo :: FIFO a) ;
                         (sum :: Integer) = ((+) :: Integer -> Integer -> Integer) ((deq_idx :: FIFO a -> Integer) (fifo :: FIFO a)) (idx :: Integer) ;
                         (off :: Integer) = if ((>) :: Integer -> Integer -> Bool) (sum :: Integer) (ma :: Integer)
                                              then ((-) :: Integer -> Integer -> Integer) (((-) :: Integer -> Integer -> Integer) (sum :: Integer) (ma :: Integer)) 1
                                              else (sum :: Integer) ;
                       } in (arr :: FIFO a -> Integer -> a) (fifo :: FIFO a) (off :: Integer);
                   }))
;
eq_FIFO_a :: (Eq a) => FIFO a -> FIFO a -> Bool;
eq_FIFO_a = (\(a :: FIFO a) ->
               (\(b :: FIFO a) ->
                  case ((a :: FIFO a), (b :: FIFO a)) of {
                    ((a :: FIFO a), (b :: FIFO a)) ->
                      let {
                        (a_cnt :: Integer) = (count_FIFO_a :: FIFO a -> Integer) (a :: FIFO a) ;
                        (b_cnt :: Integer) = (count_FIFO_a :: FIFO a -> Integer) (b :: FIFO a) ;
                      } in ((&&) :: Bool -> Bool -> Bool) (((==) :: Integer -> Integer -> Bool) ((max_cnt :: FIFO a -> Integer) (a :: FIFO a)) ((max_cnt :: FIFO a -> Integer) (b :: FIFO a))) (((&&) :: Bool -> Bool -> Bool) (((==) :: Integer -> Integer -> Bool) (a_cnt :: Integer) (b_cnt :: Integer)) (((&&) :: Bool -> Bool -> Bool) (if ((>) :: Integer -> Integer -> Bool) (a_cnt :: Integer) 0
                                                                                                                                                                                                                                                                                                                                               then ((==) :: a -> a -> Bool) ((sub_FIFO_a :: FIFO a -> Integer -> a) (a :: FIFO a) 0) ((sub_FIFO_a :: FIFO a -> Integer -> a) (b :: FIFO a) 0)
                                                                                                                                                                                                                                                                                                                                               else (True :: Bool)) (((&&) :: Bool -> Bool -> Bool) (if ((>) :: Integer -> Integer -> Bool) (a_cnt :: Integer) 1
                                                                                                                                                                                                                                                                                                                                                                                                       then ((==) :: a -> a -> Bool) ((sub_FIFO_a :: FIFO a -> Integer -> a) (a :: FIFO a) 1) ((sub_FIFO_a :: FIFO a -> Integer -> a) (b :: FIFO a) 1)
                                                                                                                                                                                                                                                                                                                                                                                                       else (True :: Bool)) (if ((>) :: Integer -> Integer -> Bool) (a_cnt :: Integer) 2
                                                                                                                                                                                                                                                                                                                                                                                                                               then ((==) :: a -> a -> Bool) ((sub_FIFO_a :: FIFO a -> Integer -> a) (a :: FIFO a) 2) ((sub_FIFO_a :: FIFO a -> Integer -> a) (b :: FIFO a) 2)
                                                                                                                                                                                                                                                                                                                                                                                                                               else (True :: Bool)))));
                  }))
;
class DefaultValue a where {
  defaultValue :: a
}
;
instance DefaultValue Integer where {
  defaultValue = 0;
}
;
ctor_FIFO_a :: (DefaultValue a) => Integer -> FIFO Integer;
ctor_FIFO_a = (\(a :: Integer) ->
                 case (a :: Integer) of {
                   (sz :: Integer) ->
                     (FIFO :: Integer -> Integer -> Integer -> (Integer -> Integer) -> Bool -> Bool -> FIFO Integer) (sz :: Integer) 0 0 ((\(x :: Integer) ->
                                                                                                                                             (defaultValue :: Integer))) (False :: Bool) (False :: Bool);
                 })
;
clear_dirty_bits_FIFO_a :: FIFO a -> FIFO a;
clear_dirty_bits_FIFO_a = (\(a :: FIFO a) ->
                             case (a :: FIFO a) of {
                               (a :: FIFO a) ->
                                 (FIFO :: Integer -> Integer -> Integer -> (Integer -> a) -> Bool -> Bool -> FIFO a) ((max_cnt :: FIFO a -> Integer) (a :: FIFO a)) ((enq_idx :: FIFO a -> Integer) (a :: FIFO a)) ((deq_idx :: FIFO a -> Integer) (a :: FIFO a)) ((arr :: FIFO a -> Integer -> a) (a :: FIFO a)) (False :: Bool) (False :: Bool);
                             })
;
dimension_FIFO_a :: FIFO a -> FIFO a -> Bool;
dimension_FIFO_a = (\(a :: FIFO a) ->
                      (\(b :: FIFO a) ->
                         case ((a :: FIFO a), (b :: FIFO a)) of {
                           ((conc :: FIFO a), (free :: FIFO a)) ->
                             ((&&) :: Bool -> Bool -> Bool) (((==) :: Integer -> Integer -> Bool) ((max_cnt :: FIFO a -> Integer) (conc :: FIFO a)) ((max_cnt :: FIFO a -> Integer) (free :: FIFO a))) (((&&) :: Bool -> Bool -> Bool) ((not :: Bool -> Bool) (((<) :: Integer -> Integer -> Bool) ((enq_idx :: FIFO a -> Integer) (conc :: FIFO a)) 0)) (((&&) :: Bool -> Bool -> Bool) ((not :: Bool -> Bool) (((>) :: Integer -> Integer -> Bool) ((enq_idx :: FIFO a -> Integer) (conc :: FIFO a)) ((max_cnt :: FIFO a -> Integer) (conc :: FIFO a)))) (((&&) :: Bool -> Bool -> Bool) ((not :: Bool -> Bool) (((<) :: Integer -> Integer -> Bool) ((deq_idx :: FIFO a -> Integer) (conc :: FIFO a)) 0)) (((&&) :: Bool -> Bool -> Bool) ((not :: Bool -> Bool) (((>) :: Integer -> Integer -> Bool) ((deq_idx :: FIFO a -> Integer) (conc :: FIFO a)) ((max_cnt :: FIFO a -> Integer) (conc :: FIFO a)))) (((&&) :: Bool -> Bool -> Bool) ((not :: Bool -> Bool) (((<) :: Integer -> Integer -> Bool) ((enq_idx :: FIFO a -> Integer) (free :: FIFO a)) 0)) (((&&) :: Bool -> Bool -> Bool) ((not :: Bool -> Bool) (((>) :: Integer -> Integer -> Bool) ((enq_idx :: FIFO a -> Integer) (free :: FIFO a)) ((max_cnt :: FIFO a -> Integer) (free :: FIFO a)))) (((&&) :: Bool -> Bool -> Bool) ((not :: Bool -> Bool) (((<) :: Integer -> Integer -> Bool) ((deq_idx :: FIFO a -> Integer) (free :: FIFO a)) 0)) ((not :: Bool -> Bool) (((>) :: Integer -> Integer -> Bool) ((deq_idx :: FIFO a -> Integer) (free :: FIFO a)) ((max_cnt :: FIFO a -> Integer) (free :: FIFO a)))))))))));
                         }))
;
mkUGSizedFIFOF__FIFO__Int_32_ctor :: Integer -> FIFO Integer;
mkUGSizedFIFOF__FIFO__Int_32_ctor = (\(a :: Integer) ->
                                       case (a :: Integer) of {
                                         (sz :: Integer) ->
                                           (FIFO :: Integer -> Integer -> Integer -> (Integer -> Integer) -> Bool -> Bool -> FIFO Integer) (sz :: Integer) 0 0 ((\(x :: Integer) ->
                                                                                                                                                                   0)) (False :: Bool) (False :: Bool);
                                       })
;
mkUGSizedFIFOF__FIFO__Int_32_clear_dirty_bits :: FIFO Integer -> FIFO Integer;
mkUGSizedFIFOF__FIFO__Int_32_clear_dirty_bits = (\(a :: FIFO Integer) ->
                                                   case (a :: FIFO Integer) of {
                                                     (a :: FIFO Integer) ->
                                                       (clear_dirty_bits_FIFO_a :: FIFO Integer -> FIFO Integer) (a :: FIFO Integer);
                                                   })
;
mkUGSizedFIFOF__FIFO__Int_32_idfn :: FIFO Integer -> FIFO Integer;
mkUGSizedFIFOF__FIFO__Int_32_idfn = (\(a :: FIFO Integer) ->
                                       case (a :: FIFO Integer) of {
                                         (a :: FIFO Integer) ->
                                           (a :: FIFO Integer);
                                       })
;
mkUGSizedFIFOF__FIFO__Int_32_dimension :: FIFO Integer -> FIFO Integer -> Bool;
mkUGSizedFIFOF__FIFO__Int_32_dimension = (dimension_FIFO_a :: FIFO Integer -> FIFO Integer -> Bool)
;
mkUGSizedFIFOF__FIFO__Int_32_eq :: FIFO Integer -> FIFO Integer -> Bool;
mkUGSizedFIFOF__FIFO__Int_32_eq = (eq_FIFO_a :: FIFO Integer -> FIFO Integer -> Bool)
;
notEmpty_val_mkUGSizedFIFOF__FIFO__Int_32 :: FIFO Integer -> Bool;
notEmpty_val_mkUGSizedFIFOF__FIFO__Int_32 = (notEmpty_val_FIFO_a :: FIFO Integer -> Bool)
;
notFull_val_mkUGSizedFIFOF__FIFO__Int_32 :: FIFO Integer -> Bool;
notFull_val_mkUGSizedFIFOF__FIFO__Int_32 = (notFull_val_FIFO_a :: FIFO Integer -> Bool)
;
notEmpty_guard_mkUGSizedFIFOF__FIFO__Int_32 :: FIFO Integer -> Bool;
notEmpty_guard_mkUGSizedFIFOF__FIFO__Int_32 = (notEmpty_guard_FIFO_a :: FIFO Integer -> Bool)
;
notFull_guard_mkUGSizedFIFOF__FIFO__Int_32 :: FIFO Integer -> Bool;
notFull_guard_mkUGSizedFIFOF__FIFO__Int_32 = (notFull_guard_FIFO_a :: FIFO Integer -> Bool)
;
clear_mkUGSizedFIFOF__FIFO__Int_32 :: FIFO Integer -> (Bool,
                                                       FIFO Integer,
                                                       ());
clear_mkUGSizedFIFOF__FIFO__Int_32 = (clear_FIFO_a :: FIFO Integer -> (Bool,
                                                                       FIFO Integer,
                                                                       ()))
;
first_val_mkUGSizedFIFOF__FIFO__Int_32 :: FIFO Integer -> Integer;
first_val_mkUGSizedFIFOF__FIFO__Int_32 = (first_val_FIFO_a :: FIFO Integer -> Integer)
;
first_guard_mkUGSizedFIFOF__FIFO__Int_32 :: FIFO Integer -> Bool;
first_guard_mkUGSizedFIFOF__FIFO__Int_32 = (first_guard_FIFO_a :: FIFO Integer -> Bool)
;
deq_mkUGSizedFIFOF__FIFO__Int_32 :: FIFO Integer -> (Bool,
                                                     FIFO Integer,
                                                     ());
deq_mkUGSizedFIFOF__FIFO__Int_32 = (deq_FIFO_a :: FIFO Integer -> (Bool,
                                                                   FIFO Integer,
                                                                   ()))
;
enq_mkUGSizedFIFOF__FIFO__Int_32 :: Integer -> FIFO Integer -> (Bool,
                                                                FIFO Integer,
                                                                ());
enq_mkUGSizedFIFOF__FIFO__Int_32 = (enq_FIFO_a :: Integer -> FIFO Integer -> (Bool,
                                                                              FIFO Integer,
                                                                              ()))
;
merge_p_mkUGSizedFIFOF__FIFO__Int_32 :: FIFO Integer -> FIFO Integer -> FIFO Integer;
merge_p_mkUGSizedFIFOF__FIFO__Int_32 = (merge_p_FIFO_a :: FIFO Integer -> FIFO Integer -> FIFO Integer)
;
data Reg a =
    Reg Bool a
;
__Reg_undef :: Reg a;
__Reg_undef = (Reg :: Bool -> a -> Reg a) (undefined :: Bool) (undefined :: a)
;
db :: Reg a -> Bool;
db = (\(a :: Reg a) ->
        case (a :: Reg a) of {
          (Reg :: Reg a) (x :: Bool) (_ :: a) ->
            (x :: Bool);
        })
;
val :: Reg a -> a;
val = (\(a :: Reg a) ->
         case (a :: Reg a) of {
           (Reg :: Reg a) (_ :: Bool) (x :: a) ->
             (x :: a);
         })
;
__db_update :: Bool -> Reg a -> Reg a;
__db_update = (\(a :: Bool) ->
                 (\(b :: Reg a) ->
                    case ((a :: Bool), (b :: Reg a)) of {
                      ((db :: Bool), (Reg :: Reg a) (_ :: Bool) (val :: a)) ->
                        (Reg :: Bool -> a -> Reg a) (db :: Bool) (val :: a);
                    }))
;
__val_update :: a -> Reg a -> Reg a;
__val_update = (\(a :: a) ->
                  (\(b :: Reg a) ->
                     case ((a :: a), (b :: Reg a)) of {
                       ((val :: a), (Reg :: Reg a) (db :: Bool) (_ :: a)) ->
                         (Reg :: Bool -> a -> Reg a) (db :: Bool) (val :: a);
                     }))
;
clear_dirty_bits_Reg_a :: Reg a -> Reg a;
clear_dirty_bits_Reg_a = (\(a :: Reg a) ->
                            case (a :: Reg a) of {
                              (a :: Reg a) ->
                                (Reg :: Bool -> a -> Reg a) (False :: Bool) ((val :: Reg a -> a) (a :: Reg a));
                            })
;
dimension_Reg_a :: Reg a -> Reg a -> Bool;
dimension_Reg_a = (\(a :: Reg a) ->
                     (\(b :: Reg a) ->
                        case ((a :: Reg a), (b :: Reg a)) of {
                          ((conc :: Reg a), (free :: Reg a)) ->
                            (True :: Bool);
                        }))
;
merge_p_Reg_a :: Reg a -> Reg a -> Reg a;
merge_p_Reg_a = (\(a :: Reg a) ->
                   (\(b :: Reg a) ->
                      case ((a :: Reg a), (b :: Reg a)) of {
                        ((a :: Reg a), (b :: Reg a)) ->
                          if (db :: Reg a -> Bool) (a :: Reg a)
                            then (a :: Reg a)
                            else (b :: Reg a);
                      }))
;
_write_Reg_a :: a -> Reg a -> (Bool, Reg a, ());
_write_Reg_a = (\(a :: a) ->
                  (\(b :: Reg a) ->
                     case ((a :: a), (b :: Reg a)) of {
                       ((x :: a), (reg :: Reg a)) ->
                         ((True :: Bool),
                          (Reg :: Bool -> a -> Reg a) (True :: Bool) (x :: a),
                          (() :: ()));
                     }))
;
_read_Reg_a :: Reg a -> a;
_read_Reg_a = (\(a :: Reg a) ->
                 case (a :: Reg a) of {
                   (reg :: Reg a) ->
                     (val :: Reg a -> a) (reg :: Reg a);
                 })
;
_read_guard_Reg_a :: Reg a -> Bool;
_read_guard_Reg_a = (\(a :: Reg a) ->
                       case (a :: Reg a) of {
                         (reg :: Reg a) ->
                           (True :: Bool);
                       })
;
eq_Reg_a :: (Eq a) => Reg a -> Reg a -> Bool;
eq_Reg_a = (\(a :: Reg a) ->
              (\(b :: Reg a) ->
                 case ((a :: Reg a), (b :: Reg a)) of {
                   ((a :: Reg a), (b :: Reg a)) ->
                     ((==) :: a -> a -> Bool) ((val :: Reg a -> a) (a :: Reg a)) ((val :: Reg a -> a) (b :: Reg a));
                 }))
;
mkReg__Reg__Int_32_eq :: Reg Integer -> (Reg Integer) -> Bool;
mkReg__Reg__Int_32_eq = (eq_Reg_a :: (Reg Integer) -> (Reg Integer) -> Bool)
;
mkReg__Reg__Int_32_ctor :: Integer -> (Reg Integer);
mkReg__Reg__Int_32_ctor = (\(a :: Integer) ->
                             case (a :: Integer) of {
                               (x :: Integer) ->
                                 (Reg :: Bool -> Integer -> (Reg Integer)) (False :: Bool) (x :: Integer);
                             })
;
mkReg__Reg__Int_32_clear_dirty_bits :: Reg Integer -> (Reg Integer);
mkReg__Reg__Int_32_clear_dirty_bits = (clear_dirty_bits_Reg_a :: (Reg Integer) -> (Reg Integer))
;
mkReg__Reg__Int_32_idfn :: Reg Integer -> (Reg Integer);
mkReg__Reg__Int_32_idfn = (\(a :: (Reg Integer)) ->
                             case (a :: (Reg Integer)) of {
                               (a :: (Reg Integer)) ->
                                 (a :: (Reg Integer));
                             })
;
mkReg__Reg__Int_32_dimension :: Reg Integer -> (Reg Integer) -> Bool;
mkReg__Reg__Int_32_dimension = (dimension_Reg_a :: (Reg Integer) -> (Reg Integer) -> Bool)
;
_write_mkReg__Reg__Int_32 :: Integer -> (Reg Integer) -> (Bool,
                                                        (Reg Integer),
                                                        ());
_write_mkReg__Reg__Int_32 = (_write_Reg_a :: Integer -> (Reg Integer) -> (Bool,
                                                                        (Reg Integer),
                                                                        ()))
;
_read_val_mkReg__Reg__Int_32 :: Reg Integer -> Integer;
_read_val_mkReg__Reg__Int_32 = (_read_Reg_a :: (Reg Integer) -> Integer)
;
_read_guard_mkReg__Reg__Int_32 :: Reg Integer -> Bool;
_read_guard_mkReg__Reg__Int_32 = (_read_guard_Reg_a :: (Reg Integer) -> Bool)
;
merge_p_mkReg__Reg__Int_32 :: Reg Integer -> (Reg Integer) -> (Reg Integer);
merge_p_mkReg__Reg__Int_32 = (merge_p_Reg_a :: (Reg Integer) -> (Reg Integer) -> (Reg Integer))
;
mkReg__Reg_Bool_eq :: Reg Bool -> Reg Bool -> Bool;
mkReg__Reg_Bool_eq = (eq_Reg_a :: Reg Bool -> Reg Bool -> Bool)
;
mkReg__Reg_Bool_ctor :: Bool -> Reg Bool;
mkReg__Reg_Bool_ctor = (\(a :: Bool) ->
                          case (a :: Bool) of {
                            (x :: Bool) ->
                              (Reg :: Bool -> Bool -> Reg Bool) (False :: Bool) (x :: Bool);
                          })
;
mkReg__Reg_Bool_clear_dirty_bits :: Reg Bool -> Reg Bool;
mkReg__Reg_Bool_clear_dirty_bits = (clear_dirty_bits_Reg_a :: Reg Bool -> Reg Bool)
;
mkReg__Reg_Bool_idfn :: Reg Bool -> Reg Bool;
mkReg__Reg_Bool_idfn = (\(a :: Reg Bool) ->
                          case (a :: Reg Bool) of {
                            (a :: Reg Bool) ->
                              (a :: Reg Bool);
                          })
;
mkReg__Reg_Bool_dimension :: Reg Bool -> Reg Bool -> Bool;
mkReg__Reg_Bool_dimension = (dimension_Reg_a :: Reg Bool -> Reg Bool -> Bool)
;
_write_mkReg__Reg_Bool :: Bool -> Reg Bool -> (Bool, Reg Bool, ());
_write_mkReg__Reg_Bool = (_write_Reg_a :: Bool -> Reg Bool -> (Bool,
                                                               Reg Bool,
                                                               ()))
;
_read_val_mkReg__Reg_Bool :: Reg Bool -> Bool;
_read_val_mkReg__Reg_Bool = (_read_Reg_a :: Reg Bool -> Bool)
;
_read_guard_mkReg__Reg_Bool :: Reg Bool -> Bool;
_read_guard_mkReg__Reg_Bool = (_read_guard_Reg_a :: Reg Bool -> Bool)
;
merge_p_mkReg__Reg_Bool :: Reg Bool -> Reg Bool -> Reg Bool;
merge_p_mkReg__Reg_Bool = (merge_p_Reg_a :: Reg Bool -> Reg Bool -> Reg Bool)
;
data Portal a b =
    Portal Bool (Integer -> a) Integer Integer
;
__Portal_undef :: Portal a b;
__Portal_undef = (Portal :: Bool -> (Integer -> a) -> Integer -> Integer -> Portal a b) (undefined :: Bool) (undefined :: Integer -> a) (undefined :: Integer) (undefined :: Integer)
;
dbx :: Portal a b -> Bool;
dbx = (\(a :: Portal a b) ->
         case (a :: Portal a b) of {
           (Portal :: Portal a b) (x :: Bool) (_ :: Integer -> a) (_ :: Integer) (_ :: Integer) ->
             (x :: Bool);
         })
;
istream :: Portal a b -> Integer -> a;
istream = (\(a :: Portal a b) ->
             case (a :: Portal a b) of {
               (Portal :: Portal a b) (_ :: Bool) (x :: Integer -> a) (_ :: Integer) (_ :: Integer) ->
                 (x :: Integer -> a);
             })
;
ptr :: Portal a b -> Integer;
ptr = (\(a :: Portal a b) ->
         case (a :: Portal a b) of {
           (Portal :: Portal a b) (_ :: Bool) (_ :: Integer -> a) (x :: Integer) (_ :: Integer) ->
             (x :: Integer);
         })
;
pid :: Portal a b -> Integer;
pid = (\(a :: Portal a b) ->
         case (a :: Portal a b) of {
           (Portal :: Portal a b) (_ :: Bool) (_ :: Integer -> a) (_ :: Integer) (x :: Integer) ->
             (x :: Integer);
         })
;
__dbx_update :: Bool -> Portal a b -> Portal a b;
__dbx_update = (\(a :: Bool) ->
                  (\(b :: Portal a b) ->
                     case ((a :: Bool), (b :: Portal a b)) of {
                       ((dbx :: Bool),
                        (Portal :: Portal a b) (_ :: Bool) (istream :: Integer -> a) (ptr :: Integer) (pid :: Integer)) ->
                         (Portal :: Bool -> (Integer -> a) -> Integer -> Integer -> Portal a b) (dbx :: Bool) (istream :: Integer -> a) (ptr :: Integer) (pid :: Integer);
                     }))
;
__istream_update :: (Integer -> a) -> Portal a b -> Portal a b;
__istream_update = (\(a :: Integer -> a) ->
                      (\(b :: Portal a b) ->
                         case ((a :: Integer -> a), (b :: Portal a b)) of {
                           ((istream :: Integer -> a),
                            (Portal :: Portal a b) (dbx :: Bool) (_ :: Integer -> a) (ptr :: Integer) (pid :: Integer)) ->
                             (Portal :: Bool -> (Integer -> a) -> Integer -> Integer -> Portal a b) (dbx :: Bool) (istream :: Integer -> a) (ptr :: Integer) (pid :: Integer);
                         }))
;
__ptr_update :: Integer -> Portal a b -> Portal a b;
__ptr_update = (\(a :: Integer) ->
                  (\(b :: Portal a b) ->
                     case ((a :: Integer), (b :: Portal a b)) of {
                       ((ptr :: Integer),
                        (Portal :: Portal a b) (dbx :: Bool) (istream :: Integer -> a) (_ :: Integer) (pid :: Integer)) ->
                         (Portal :: Bool -> (Integer -> a) -> Integer -> Integer -> Portal a b) (dbx :: Bool) (istream :: Integer -> a) (ptr :: Integer) (pid :: Integer);
                     }))
;
__pid_update :: Integer -> Portal a b -> Portal a b;
__pid_update = (\(a :: Integer) ->
                  (\(b :: Portal a b) ->
                     case ((a :: Integer), (b :: Portal a b)) of {
                       ((pid :: Integer),
                        (Portal :: Portal a b) (dbx :: Bool) (istream :: Integer -> a) (ptr :: Integer) (_ :: Integer)) ->
                         (Portal :: Bool -> (Integer -> a) -> Integer -> Integer -> Portal a b) (dbx :: Bool) (istream :: Integer -> a) (ptr :: Integer) (pid :: Integer);
                     }))
;
mkPortal___Portal__Int_32__Int_32_ctor :: Integer -> Integer -> Integer -> Portal Integer Integer;
mkPortal___Portal__Int_32__Int_32_ctor = (\(a :: Integer) ->
                                            (\(b :: Integer) ->
                                               (\(c :: Integer) ->
                                                  case ((a :: Integer),
                                                        (b :: Integer),
                                                        (c :: Integer)) of {
                                                    ((,,) :: (Integer,
                                                              Integer,
                                                              Integer)) (tx_sz :: Integer) (rx_sz :: Integer) (id :: Integer) ->
                                                      (Portal :: Bool -> (Integer -> Integer) -> Integer -> Integer -> Portal Integer Integer) (False :: Bool) (undefined :: Integer -> Integer) 0 (id :: Integer);
                                                  })))
;
mkPortal___Portal__Int_32__Int_32_dimension :: Portal Integer Integer -> Portal Integer Integer -> Bool;
mkPortal___Portal__Int_32__Int_32_dimension = (\(a :: Portal Integer Integer) ->
                                                 (\(b :: Portal Integer Integer) ->
                                                    case ((a :: Portal Integer Integer),
                                                          (b :: Portal Integer Integer)) of {
                                                      ((a :: Portal Integer Integer),
                                                       (b :: Portal Integer Integer)) ->
                                                        (True :: Bool);
                                                    }))
;
mkPortal___Portal__Int_32__Int_32_eq :: Portal Integer Integer -> Portal Integer Integer -> Bool;
mkPortal___Portal__Int_32__Int_32_eq = (\(a :: Portal Integer Integer) ->
                                          (\(b :: Portal Integer Integer) ->
                                             case ((a :: Portal Integer Integer),
                                                   (b :: Portal Integer Integer)) of {
                                               ((a :: Portal Integer Integer),
                                                (b :: Portal Integer Integer)) ->
                                                 (True :: Bool);
                                             }))
;
mkPortal___Portal__Int_32__Int_32_clear_dirty_bits :: Portal Integer Integer -> Portal Integer Integer;
mkPortal___Portal__Int_32__Int_32_clear_dirty_bits = (\(a :: Portal Integer Integer) ->
                                                        case (a :: Portal Integer Integer) of {
                                                          (a :: Portal Integer Integer) ->
                                                            (a :: Portal Integer Integer);
                                                        })
;
mkPortal___Portal__Int_32__Int_32_idfn :: Portal Integer Integer -> Portal Integer Integer;
mkPortal___Portal__Int_32__Int_32_idfn = (\(a :: Portal Integer Integer) ->
                                            case (a :: Portal Integer Integer) of {
                                              (a :: Portal Integer Integer) ->
                                                (a :: Portal Integer Integer);
                                            })
;
merge_p_mkPortal___Portal__Int_32__Int_32 :: Portal Integer Integer -> Portal Integer Integer -> Portal Integer Integer;
merge_p_mkPortal___Portal__Int_32__Int_32 = (\(a :: Portal Integer Integer) ->
                                               (\(b :: Portal Integer Integer) ->
                                                  case ((a :: Portal Integer Integer),
                                                        (b :: Portal Integer Integer)) of {
                                                    ((a :: Portal Integer Integer),
                                                     (b :: Portal Integer Integer)) ->
                                                      (a :: Portal Integer Integer);
                                                  }))
;
peek_val_mkPortal___Portal__Int_32__Int_32 :: Portal Integer Integer -> Integer;
peek_val_mkPortal___Portal__Int_32__Int_32 = (\(a :: Portal Integer Integer) ->
                                                case (a :: Portal Integer Integer) of {
                                                  (a :: Portal Integer Integer) ->
                                                    0;
                                                })
;
peek_guard_mkPortal___Portal__Int_32__Int_32 :: Portal Integer Integer -> Bool;
peek_guard_mkPortal___Portal__Int_32__Int_32 = (\(a :: Portal Integer Integer) ->
                                                  case (a :: Portal Integer Integer) of {
                                                    (a :: Portal Integer Integer) ->
                                                      (True :: Bool);
                                                  })
;
canPop_val_mkPortal___Portal__Int_32__Int_32 :: Portal Integer Integer -> Bool;
canPop_val_mkPortal___Portal__Int_32__Int_32 = (\(a :: Portal Integer Integer) ->
                                                  case (a :: Portal Integer Integer) of {
                                                    (a :: Portal Integer Integer) ->
                                                      (True :: Bool);
                                                  })
;
canPop_guard_mkPortal___Portal__Int_32__Int_32 :: Portal Integer Integer -> Bool;
canPop_guard_mkPortal___Portal__Int_32__Int_32 = (\(a :: Portal Integer Integer) ->
                                                    case (a :: Portal Integer Integer) of {
                                                      (a :: Portal Integer Integer) ->
                                                        (True :: Bool);
                                                    })
;
canPush_val_mkPortal___Portal__Int_32__Int_32 :: Portal Integer Integer -> Bool;
canPush_val_mkPortal___Portal__Int_32__Int_32 = (\(a :: Portal Integer Integer) ->
                                                   case (a :: Portal Integer Integer) of {
                                                     (a :: Portal Integer Integer) ->
                                                       (True :: Bool);
                                                   })
;
canPush_guard_mkPortal___Portal__Int_32__Int_32 :: Portal Integer Integer -> Bool;
canPush_guard_mkPortal___Portal__Int_32__Int_32 = (\(a :: Portal Integer Integer) ->
                                                     case (a :: Portal Integer Integer) of {
                                                       (a :: Portal Integer Integer) ->
                                                         (True :: Bool);
                                                     })
;
pop_mkPortal___Portal__Int_32__Int_32 :: Portal Integer Integer -> (Bool,
                                                                    Portal Integer Integer,
                                                                    ());
pop_mkPortal___Portal__Int_32__Int_32 = (\(a :: Portal Integer Integer) ->
                                           case (a :: Portal Integer Integer) of {
                                             (a :: Portal Integer Integer) ->
                                               ((True :: Bool),
                                                (a :: Portal Integer Integer),
                                                (() :: ()));
                                           })
;
push_mkPortal___Portal__Int_32__Int_32 :: Integer -> Portal Integer Integer -> (Bool,
                                                                                Portal Integer Integer,
                                                                                ());
push_mkPortal___Portal__Int_32__Int_32 = (\(a :: Integer) ->
                                            (\(b :: Portal Integer Integer) ->
                                               case ((a :: Integer),
                                                     (b :: Portal Integer Integer)) of {
                                                 ((x :: Integer), (a :: Portal Integer Integer)) ->
                                                   ((True :: Bool),
                                                    (a :: Portal Integer Integer),
                                                    (() :: ()));
                                               }))
;
crank_mkPortal___Portal__Int_32__Int_32 :: Portal Integer Integer -> (Bool,
                                                                      Portal Integer Integer,
                                                                      ());
crank_mkPortal___Portal__Int_32__Int_32 = (\(a :: Portal Integer Integer) ->
                                             case (a :: Portal Integer Integer) of {
                                               (a :: Portal Integer Integer) ->
                                                 ((True :: Bool),
                                                  (a :: Portal Integer Integer),
                                                  (() :: ()));
                                             })
;
canCrank_val_mkPortal___Portal__Int_32__Int_32 :: Portal Integer Integer -> Bool;
canCrank_val_mkPortal___Portal__Int_32__Int_32 = (\(a :: Portal Integer Integer) ->
                                                    case (a :: Portal Integer Integer) of {
                                                      (a :: Portal Integer Integer) ->
                                                        (True :: Bool);
                                                    })
;
canCrank_guard_mkPortal___Portal__Int_32__Int_32 :: Portal Integer Integer -> Bool;
canCrank_guard_mkPortal___Portal__Int_32__Int_32 = (\(a :: Portal Integer Integer) ->
                                                      case (a :: Portal Integer Integer) of {
                                                        (a :: Portal Integer Integer) ->
                                                          (True :: Bool);
                                                      })
;
fst3 :: (a, b, c) -> a;
fst3 = (\(a :: (a, b, c)) ->
          case (a :: (a, b, c)) of {
            ((,,) :: (a, b, c)) (x :: a) (_ :: b) (_ :: c) ->
              (x :: a);
          })
;
snd3 :: (a, b, c) -> b;
snd3 = (\(a :: (a, b, c)) ->
          case (a :: (a, b, c)) of {
            ((,,) :: (a, b, c)) (_ :: a) (x :: b) (_ :: c) ->
              (x :: b);
          })
;
trd3 :: (a, b, c) -> c;
trd3 = (\(a :: (a, b, c)) ->
          case (a :: (a, b, c)) of {
            ((,,) :: (a, b, c)) (_ :: a) (_ :: b) (x :: c) ->
              (x :: c);
          })
;
instance (Eq a, Eq b, Eq c) => Eq (a, b, c) where {
  (==) = (\(a :: (a, b, c)) ->
            (\(b :: (a, b, c)) ->
               case ((a :: (a, b, c)), (b :: (a, b, c))) of {
                 ((a :: (a, b, c)), (b :: (a, b, c))) ->
                   ((&&) :: Bool -> Bool -> Bool) (((==) :: a -> a -> Bool) ((fst3 :: (a,
                                                                                       b,
                                                                                       c) -> a) (a :: (a,
                                                                                                       b,
                                                                                                       c))) ((fst3 :: (a,
                                                                                                                       b,
                                                                                                                       c) -> a) (b :: (a,
                                                                                                                                       b,
                                                                                                                                       c)))) (((&&) :: Bool -> Bool -> Bool) (((==) :: b -> b -> Bool) ((snd3 :: (a,
                                                                                                                                                                                                                  b,
                                                                                                                                                                                                                  c) -> b) (a :: (a,
                                                                                                                                                                                                                                  b,
                                                                                                                                                                                                                                  c))) ((snd3 :: (a,
                                                                                                                                                                                                                                                  b,
                                                                                                                                                                                                                                                  c) -> b) (b :: (a,
                                                                                                                                                                                                                                                                  b,
                                                                                                                                                                                                                                                                  c)))) (((==) :: c -> c -> Bool) ((trd3 :: (a,
                                                                                                                                                                                                                                                                                                             b,
                                                                                                                                                                                                                                                                                                             c) -> c) (a :: (a,
                                                                                                                                                                                                                                                                                                                             b,
                                                                                                                                                                                                                                                                                                                             c))) ((trd3 :: (a,
                                                                                                                                                                                                                                                                                                                                             b,
                                                                                                                                                                                                                                                                                                                                             c) -> c) (b :: (a,
                                                                                                                                                                                                                                                                                                                                                             b,
                                                                                                                                                                                                                                                                                                                                                             c)))));
               }));
  (/=) = (\(a :: (a, b, c)) ->
            (\(b :: (a, b, c)) ->
               case ((a :: (a, b, c)), (b :: (a, b, c))) of {
                 ((a :: (a, b, c)), (b :: (a, b, c))) ->
                   (not :: Bool -> Bool) (((==) :: (a, b, c) -> (a,
                                                                 b,
                                                                 c) -> Bool) (a :: (a,
                                                                                    b,
                                                                                    c)) (b :: (a,
                                                                                               b,
                                                                                               c)));
               }));
}
;
data TmkSizedFIFOF___FIFOFF__Int_32_BCC =
    TmkSizedFIFOF___FIFOFF__Int_32_BCC (FIFO Integer)
;
__mkSizedFIFOF___FIFOFF__Int_32_BCC_undef :: TmkSizedFIFOF___FIFOFF__Int_32_BCC;
__mkSizedFIFOF___FIFOFF__Int_32_BCC_undef = (TmkSizedFIFOF___FIFOFF__Int_32_BCC :: (FIFO Integer) -> TmkSizedFIFOF___FIFOFF__Int_32_BCC) (undefined :: (FIFO Integer))
;
mkSizedFIFOF___FIFOFF__Int_32_BCC_f :: TmkSizedFIFOF___FIFOFF__Int_32_BCC -> FIFO Integer;
mkSizedFIFOF___FIFOFF__Int_32_BCC_f = (\(a :: TmkSizedFIFOF___FIFOFF__Int_32_BCC) ->
                                         case (a :: TmkSizedFIFOF___FIFOFF__Int_32_BCC) of {
                                           (TmkSizedFIFOF___FIFOFF__Int_32_BCC :: TmkSizedFIFOF___FIFOFF__Int_32_BCC) (x :: FIFO Integer) ->
                                             (x :: FIFO Integer);
                                         })
;
__mkSizedFIFOF___FIFOFF__Int_32_BCC_f_update :: FIFO Integer -> TmkSizedFIFOF___FIFOFF__Int_32_BCC -> TmkSizedFIFOF___FIFOFF__Int_32_BCC;
__mkSizedFIFOF___FIFOFF__Int_32_BCC_f_update = (\(a :: FIFO Integer) ->
                                                  (\(b :: TmkSizedFIFOF___FIFOFF__Int_32_BCC) ->
                                                     case ((a :: FIFO Integer),
                                                           (b :: TmkSizedFIFOF___FIFOFF__Int_32_BCC)) of {
                                                       ((mkSizedFIFOF___FIFOFF__Int_32_BCC_f :: FIFO Integer),
                                                        (TmkSizedFIFOF___FIFOFF__Int_32_BCC :: TmkSizedFIFOF___FIFOFF__Int_32_BCC) (_ :: FIFO Integer)) ->
                                                         (TmkSizedFIFOF___FIFOFF__Int_32_BCC :: FIFO Integer -> TmkSizedFIFOF___FIFOFF__Int_32_BCC) (mkSizedFIFOF___FIFOFF__Int_32_BCC_f :: FIFO Integer);
                                                     }))
;
mkSizedFIFOF___FIFOFF__Int_32_BCC_ctor :: Integer -> TmkSizedFIFOF___FIFOFF__Int_32_BCC;
mkSizedFIFOF___FIFOFF__Int_32_BCC_ctor = (\(_elam1 :: Integer) ->
                                            (TmkSizedFIFOF___FIFOFF__Int_32_BCC :: FIFO Integer -> TmkSizedFIFOF___FIFOFF__Int_32_BCC) ((mkUGSizedFIFOF__FIFO__Int_32_ctor :: Integer -> FIFO Integer) (_elam1 :: Integer)))
;
mkSizedFIFOF___FIFOFF__Int_32_BCC_dimension :: TmkSizedFIFOF___FIFOFF__Int_32_BCC -> TmkSizedFIFOF___FIFOFF__Int_32_BCC -> Bool;
mkSizedFIFOF___FIFOFF__Int_32_BCC_dimension = (\(a :: TmkSizedFIFOF___FIFOFF__Int_32_BCC) ->
                                                 (\(b :: TmkSizedFIFOF___FIFOFF__Int_32_BCC) ->
                                                    let {
                                                      (f_rv :: Bool) = (mkUGSizedFIFOF__FIFO__Int_32_dimension :: FIFO Integer -> FIFO Integer -> Bool) ((mkSizedFIFOF___FIFOFF__Int_32_BCC_f :: TmkSizedFIFOF___FIFOFF__Int_32_BCC -> FIFO Integer) (a :: TmkSizedFIFOF___FIFOFF__Int_32_BCC)) ((mkSizedFIFOF___FIFOFF__Int_32_BCC_f :: TmkSizedFIFOF___FIFOFF__Int_32_BCC -> FIFO Integer) (b :: TmkSizedFIFOF___FIFOFF__Int_32_BCC)) ;
                                                    } in ((&&) :: Bool -> Bool -> Bool) (f_rv :: Bool) (True :: Bool)))
;
mkSizedFIFOF___FIFOFF__Int_32_BCC_eq :: TmkSizedFIFOF___FIFOFF__Int_32_BCC -> TmkSizedFIFOF___FIFOFF__Int_32_BCC -> Bool;
mkSizedFIFOF___FIFOFF__Int_32_BCC_eq = (\(a :: TmkSizedFIFOF___FIFOFF__Int_32_BCC) ->
                                          (\(b :: TmkSizedFIFOF___FIFOFF__Int_32_BCC) ->
                                             let {
                                               (f_rv :: Bool) = (mkUGSizedFIFOF__FIFO__Int_32_eq :: FIFO Integer -> FIFO Integer -> Bool) ((mkSizedFIFOF___FIFOFF__Int_32_BCC_f :: TmkSizedFIFOF___FIFOFF__Int_32_BCC -> FIFO Integer) (a :: TmkSizedFIFOF___FIFOFF__Int_32_BCC)) ((mkSizedFIFOF___FIFOFF__Int_32_BCC_f :: TmkSizedFIFOF___FIFOFF__Int_32_BCC -> FIFO Integer) (b :: TmkSizedFIFOF___FIFOFF__Int_32_BCC)) ;
                                             } in ((&&) :: Bool -> Bool -> Bool) (f_rv :: Bool) (True :: Bool)))
;
mkSizedFIFOF___FIFOFF__Int_32_BCC_clear_dirty_bits :: TmkSizedFIFOF___FIFOFF__Int_32_BCC -> TmkSizedFIFOF___FIFOFF__Int_32_BCC;
mkSizedFIFOF___FIFOFF__Int_32_BCC_clear_dirty_bits = (\(a :: TmkSizedFIFOF___FIFOFF__Int_32_BCC) ->
                                                        let {
                                                          (f_new :: FIFO Integer) = (mkUGSizedFIFOF__FIFO__Int_32_clear_dirty_bits :: FIFO Integer -> FIFO Integer) ((mkSizedFIFOF___FIFOFF__Int_32_BCC_f :: TmkSizedFIFOF___FIFOFF__Int_32_BCC -> FIFO Integer) (a :: TmkSizedFIFOF___FIFOFF__Int_32_BCC)) ;
                                                        } in (TmkSizedFIFOF___FIFOFF__Int_32_BCC :: FIFO Integer -> TmkSizedFIFOF___FIFOFF__Int_32_BCC) (f_new :: FIFO Integer))
;
mkSizedFIFOF___FIFOFF__Int_32_BCC_idfn :: TmkSizedFIFOF___FIFOFF__Int_32_BCC -> TmkSizedFIFOF___FIFOFF__Int_32_BCC;
mkSizedFIFOF___FIFOFF__Int_32_BCC_idfn = (\(a :: TmkSizedFIFOF___FIFOFF__Int_32_BCC) ->
                                            let {
                                              (f_new :: FIFO Integer) = (mkUGSizedFIFOF__FIFO__Int_32_idfn :: FIFO Integer -> FIFO Integer) ((mkSizedFIFOF___FIFOFF__Int_32_BCC_f :: TmkSizedFIFOF___FIFOFF__Int_32_BCC -> FIFO Integer) (a :: TmkSizedFIFOF___FIFOFF__Int_32_BCC)) ;
                                            } in (TmkSizedFIFOF___FIFOFF__Int_32_BCC :: FIFO Integer -> TmkSizedFIFOF___FIFOFF__Int_32_BCC) (f_new :: FIFO Integer))
;
instance Eq TmkSizedFIFOF___FIFOFF__Int_32_BCC where {
  (==) = (\(a :: TmkSizedFIFOF___FIFOFF__Int_32_BCC) ->
            (\(b :: TmkSizedFIFOF___FIFOFF__Int_32_BCC) ->
               (True :: Bool)));
  (/=) = (\(a :: TmkSizedFIFOF___FIFOFF__Int_32_BCC) ->
            (\(b :: TmkSizedFIFOF___FIFOFF__Int_32_BCC) ->
               (not :: Bool -> Bool) (((==) :: TmkSizedFIFOF___FIFOFF__Int_32_BCC -> TmkSizedFIFOF___FIFOFF__Int_32_BCC -> Bool) (a :: TmkSizedFIFOF___FIFOFF__Int_32_BCC) (b :: TmkSizedFIFOF___FIFOFF__Int_32_BCC))));
}
;
merge_p_mkSizedFIFOF___FIFOFF__Int_32_BCC :: TmkSizedFIFOF___FIFOFF__Int_32_BCC -> TmkSizedFIFOF___FIFOFF__Int_32_BCC -> TmkSizedFIFOF___FIFOFF__Int_32_BCC;
merge_p_mkSizedFIFOF___FIFOFF__Int_32_BCC = (\(_a :: TmkSizedFIFOF___FIFOFF__Int_32_BCC) ->
                                               (\(_b :: TmkSizedFIFOF___FIFOFF__Int_32_BCC) ->
                                                  (TmkSizedFIFOF___FIFOFF__Int_32_BCC :: FIFO Integer -> TmkSizedFIFOF___FIFOFF__Int_32_BCC) ((merge_p_mkUGSizedFIFOF__FIFO__Int_32 :: FIFO Integer -> FIFO Integer -> FIFO Integer) ((mkSizedFIFOF___FIFOFF__Int_32_BCC_f :: TmkSizedFIFOF___FIFOFF__Int_32_BCC -> FIFO Integer) (_a :: TmkSizedFIFOF___FIFOFF__Int_32_BCC)) ((mkSizedFIFOF___FIFOFF__Int_32_BCC_f :: TmkSizedFIFOF___FIFOFF__Int_32_BCC -> FIFO Integer) (_b :: TmkSizedFIFOF___FIFOFF__Int_32_BCC)))))
;
f_upd__Void_mkSizedFIFOF___FIFOFF__Int_32_BCC :: ((FIFO Integer) -> (Bool,
                                                                   FIFO Integer,
                                                                   ())) -> TmkSizedFIFOF___FIFOFF__Int_32_BCC -> (Bool,
                                                                                                                 TmkSizedFIFOF___FIFOFF__Int_32_BCC,
                                                                                                                 ());
f_upd__Void_mkSizedFIFOF___FIFOFF__Int_32_BCC = (\(a :: FIFO Integer -> (Bool,
                                                                         FIFO Integer,
                                                                         ())) ->
                                                   (\(s :: TmkSizedFIFOF___FIFOFF__Int_32_BCC) ->
                                                      let {
                                                        (tup :: (Bool,
                                                                 FIFO Integer,
                                                                 ())) = (a :: FIFO Integer -> (Bool,
                                                                                               FIFO Integer,
                                                                                               ())) ((mkSizedFIFOF___FIFOFF__Int_32_BCC_f :: TmkSizedFIFOF___FIFOFF__Int_32_BCC -> FIFO Integer) (s :: TmkSizedFIFOF___FIFOFF__Int_32_BCC)) ;
                                                      } in ((fst3 :: (Bool,
                                                                      FIFO Integer,
                                                                      ()) -> Bool) (tup :: (Bool,
                                                                                            FIFO Integer,
                                                                                            ())),
                                                            (__mkSizedFIFOF___FIFOFF__Int_32_BCC_f_update :: FIFO Integer -> TmkSizedFIFOF___FIFOFF__Int_32_BCC -> TmkSizedFIFOF___FIFOFF__Int_32_BCC) ((snd3 :: (Bool,
                                                                                                                                                                                                                FIFO Integer,
                                                                                                                                                                                                                ()) -> FIFO Integer) (tup :: (Bool,
                                                                                                                                                                                                                                              FIFO Integer,
                                                                                                                                                                                                                                              ()))) (s :: TmkSizedFIFOF___FIFOFF__Int_32_BCC),
                                                            (trd3 :: (Bool,
                                                                      FIFO Integer,
                                                                      ()) -> ()) (tup :: (Bool,
                                                                                          FIFO Integer,
                                                                                          ())))))
;
f_notEmpty_val_mkSizedFIFOF___FIFOFF__Int_32_BCC :: TmkSizedFIFOF___FIFOFF__Int_32_BCC -> Bool;
f_notEmpty_val_mkSizedFIFOF___FIFOFF__Int_32_BCC = (\(st :: TmkSizedFIFOF___FIFOFF__Int_32_BCC) ->
                                                      (notEmpty_val_mkUGSizedFIFOF__FIFO__Int_32 :: FIFO Integer -> Bool) ((mkSizedFIFOF___FIFOFF__Int_32_BCC_f :: TmkSizedFIFOF___FIFOFF__Int_32_BCC -> FIFO Integer) (st :: TmkSizedFIFOF___FIFOFF__Int_32_BCC)))
;
f_notEmpty_guard_mkSizedFIFOF___FIFOFF__Int_32_BCC :: TmkSizedFIFOF___FIFOFF__Int_32_BCC -> Bool;
f_notEmpty_guard_mkSizedFIFOF___FIFOFF__Int_32_BCC = (\(st :: TmkSizedFIFOF___FIFOFF__Int_32_BCC) ->
                                                        (notEmpty_guard_mkUGSizedFIFOF__FIFO__Int_32 :: FIFO Integer -> Bool) ((mkSizedFIFOF___FIFOFF__Int_32_BCC_f :: TmkSizedFIFOF___FIFOFF__Int_32_BCC -> FIFO Integer) (st :: TmkSizedFIFOF___FIFOFF__Int_32_BCC)))
;
f_notFull_val_mkSizedFIFOF___FIFOFF__Int_32_BCC :: TmkSizedFIFOF___FIFOFF__Int_32_BCC -> Bool;
f_notFull_val_mkSizedFIFOF___FIFOFF__Int_32_BCC = (\(st :: TmkSizedFIFOF___FIFOFF__Int_32_BCC) ->
                                                     (notFull_val_mkUGSizedFIFOF__FIFO__Int_32 :: FIFO Integer -> Bool) ((mkSizedFIFOF___FIFOFF__Int_32_BCC_f :: TmkSizedFIFOF___FIFOFF__Int_32_BCC -> FIFO Integer) (st :: TmkSizedFIFOF___FIFOFF__Int_32_BCC)))
;
f_notFull_guard_mkSizedFIFOF___FIFOFF__Int_32_BCC :: TmkSizedFIFOF___FIFOFF__Int_32_BCC -> Bool;
f_notFull_guard_mkSizedFIFOF___FIFOFF__Int_32_BCC = (\(st :: TmkSizedFIFOF___FIFOFF__Int_32_BCC) ->
                                                       (notFull_guard_mkUGSizedFIFOF__FIFO__Int_32 :: FIFO Integer -> Bool) ((mkSizedFIFOF___FIFOFF__Int_32_BCC_f :: TmkSizedFIFOF___FIFOFF__Int_32_BCC -> FIFO Integer) (st :: TmkSizedFIFOF___FIFOFF__Int_32_BCC)))
;
f_clear_mkSizedFIFOF___FIFOFF__Int_32_BCC :: TmkSizedFIFOF___FIFOFF__Int_32_BCC -> (Bool,
                                                                                   TmkSizedFIFOF___FIFOFF__Int_32_BCC,
                                                                                   ());
f_clear_mkSizedFIFOF___FIFOFF__Int_32_BCC = (\(st :: TmkSizedFIFOF___FIFOFF__Int_32_BCC) ->
                                               (f_upd__Void_mkSizedFIFOF___FIFOFF__Int_32_BCC :: (FIFO Integer -> (Bool,
                                                                                                                   FIFO Integer,
                                                                                                                   ())) -> TmkSizedFIFOF___FIFOFF__Int_32_BCC -> (Bool,
                                                                                                                                                                 TmkSizedFIFOF___FIFOFF__Int_32_BCC,
                                                                                                                                                                 ())) (clear_mkUGSizedFIFOF__FIFO__Int_32 :: FIFO Integer -> (Bool,
                                                                                                                                                                                                                              FIFO Integer,
                                                                                                                                                                                                                              ())) (st :: TmkSizedFIFOF___FIFOFF__Int_32_BCC))
;
f_first_val_mkSizedFIFOF___FIFOFF__Int_32_BCC :: TmkSizedFIFOF___FIFOFF__Int_32_BCC -> Integer;
f_first_val_mkSizedFIFOF___FIFOFF__Int_32_BCC = (\(st :: TmkSizedFIFOF___FIFOFF__Int_32_BCC) ->
                                                   (first_val_mkUGSizedFIFOF__FIFO__Int_32 :: FIFO Integer -> Integer) ((mkSizedFIFOF___FIFOFF__Int_32_BCC_f :: TmkSizedFIFOF___FIFOFF__Int_32_BCC -> FIFO Integer) (st :: TmkSizedFIFOF___FIFOFF__Int_32_BCC)))
;
f_first_guard_mkSizedFIFOF___FIFOFF__Int_32_BCC :: TmkSizedFIFOF___FIFOFF__Int_32_BCC -> Bool;
f_first_guard_mkSizedFIFOF___FIFOFF__Int_32_BCC = (\(st :: TmkSizedFIFOF___FIFOFF__Int_32_BCC) ->
                                                     ((&&) :: Bool -> Bool -> Bool) ((notEmpty_val_mkUGSizedFIFOF__FIFO__Int_32 :: FIFO Integer -> Bool) ((mkSizedFIFOF___FIFOFF__Int_32_BCC_f :: TmkSizedFIFOF___FIFOFF__Int_32_BCC -> FIFO Integer) (st :: TmkSizedFIFOF___FIFOFF__Int_32_BCC))) (((&&) :: Bool -> Bool -> Bool) ((first_guard_mkUGSizedFIFOF__FIFO__Int_32 :: FIFO Integer -> Bool) ((mkSizedFIFOF___FIFOFF__Int_32_BCC_f :: TmkSizedFIFOF___FIFOFF__Int_32_BCC -> FIFO Integer) (st :: TmkSizedFIFOF___FIFOFF__Int_32_BCC))) ((notEmpty_guard_mkUGSizedFIFOF__FIFO__Int_32 :: FIFO Integer -> Bool) ((mkSizedFIFOF___FIFOFF__Int_32_BCC_f :: TmkSizedFIFOF___FIFOFF__Int_32_BCC -> FIFO Integer) (st :: TmkSizedFIFOF___FIFOFF__Int_32_BCC)))))
;
f_deq_mkSizedFIFOF___FIFOFF__Int_32_BCC :: TmkSizedFIFOF___FIFOFF__Int_32_BCC -> (Bool,
                                                                                 TmkSizedFIFOF___FIFOFF__Int_32_BCC,
                                                                                 ());
f_deq_mkSizedFIFOF___FIFOFF__Int_32_BCC = (\(st :: TmkSizedFIFOF___FIFOFF__Int_32_BCC) ->
                                             let {
                                               (gv :: Bool) = ((&&) :: Bool -> Bool -> Bool) ((notEmpty_val_mkUGSizedFIFOF__FIFO__Int_32 :: FIFO Integer -> Bool) ((mkSizedFIFOF___FIFOFF__Int_32_BCC_f :: TmkSizedFIFOF___FIFOFF__Int_32_BCC -> FIFO Integer) (st :: TmkSizedFIFOF___FIFOFF__Int_32_BCC))) ((notEmpty_guard_mkUGSizedFIFOF__FIFO__Int_32 :: FIFO Integer -> Bool) ((mkSizedFIFOF___FIFOFF__Int_32_BCC_f :: TmkSizedFIFOF___FIFOFF__Int_32_BCC -> FIFO Integer) (st :: TmkSizedFIFOF___FIFOFF__Int_32_BCC))) ;
                                               (ov :: (Bool,
                                                       TmkSizedFIFOF___FIFOFF__Int_32_BCC,
                                                       ())) = (f_upd__Void_mkSizedFIFOF___FIFOFF__Int_32_BCC :: (FIFO Integer -> (Bool,
                                                                                                                                  FIFO Integer,
                                                                                                                                  ())) -> TmkSizedFIFOF___FIFOFF__Int_32_BCC -> (Bool,
                                                                                                                                                                                TmkSizedFIFOF___FIFOFF__Int_32_BCC,
                                                                                                                                                                                ())) (deq_mkUGSizedFIFOF__FIFO__Int_32 :: FIFO Integer -> (Bool,
                                                                                                                                                                                                                                           FIFO Integer,
                                                                                                                                                                                                                                           ())) (st :: TmkSizedFIFOF___FIFOFF__Int_32_BCC) ;
                                             } in (((&&) :: Bool -> Bool -> Bool) (gv :: Bool) ((fst3 :: (Bool,
                                                                                                          TmkSizedFIFOF___FIFOFF__Int_32_BCC,
                                                                                                          ()) -> Bool) (ov :: (Bool,
                                                                                                                               TmkSizedFIFOF___FIFOFF__Int_32_BCC,
                                                                                                                               ()))),
                                                   (snd3 :: (Bool,
                                                             TmkSizedFIFOF___FIFOFF__Int_32_BCC,
                                                             ()) -> TmkSizedFIFOF___FIFOFF__Int_32_BCC) (ov :: (Bool,
                                                                                                               TmkSizedFIFOF___FIFOFF__Int_32_BCC,
                                                                                                               ())),
                                                   (trd3 :: (Bool,
                                                             TmkSizedFIFOF___FIFOFF__Int_32_BCC,
                                                             ()) -> ()) (ov :: (Bool,
                                                                                TmkSizedFIFOF___FIFOFF__Int_32_BCC,
                                                                                ()))))
;
f_enq_mkSizedFIFOF___FIFOFF__Int_32_BCC :: Integer -> TmkSizedFIFOF___FIFOFF__Int_32_BCC -> (Bool,
                                                                                            TmkSizedFIFOF___FIFOFF__Int_32_BCC,
                                                                                            ());
f_enq_mkSizedFIFOF___FIFOFF__Int_32_BCC = (\(_elam2 :: Integer) ->
                                             (\(st :: TmkSizedFIFOF___FIFOFF__Int_32_BCC) ->
                                                let {
                                                  (gv :: Bool) = ((&&) :: Bool -> Bool -> Bool) ((notFull_val_mkUGSizedFIFOF__FIFO__Int_32 :: FIFO Integer -> Bool) ((mkSizedFIFOF___FIFOFF__Int_32_BCC_f :: TmkSizedFIFOF___FIFOFF__Int_32_BCC -> FIFO Integer) (st :: TmkSizedFIFOF___FIFOFF__Int_32_BCC))) ((notFull_guard_mkUGSizedFIFOF__FIFO__Int_32 :: FIFO Integer -> Bool) ((mkSizedFIFOF___FIFOFF__Int_32_BCC_f :: TmkSizedFIFOF___FIFOFF__Int_32_BCC -> FIFO Integer) (st :: TmkSizedFIFOF___FIFOFF__Int_32_BCC))) ;
                                                  (ov :: (Bool,
                                                          TmkSizedFIFOF___FIFOFF__Int_32_BCC,
                                                          ())) = (f_upd__Void_mkSizedFIFOF___FIFOFF__Int_32_BCC :: (FIFO Integer -> (Bool,
                                                                                                                                     FIFO Integer,
                                                                                                                                     ())) -> TmkSizedFIFOF___FIFOFF__Int_32_BCC -> (Bool,
                                                                                                                                                                                   TmkSizedFIFOF___FIFOFF__Int_32_BCC,
                                                                                                                                                                                   ())) ((enq_mkUGSizedFIFOF__FIFO__Int_32 :: Integer -> FIFO Integer -> (Bool,
                                                                                                                                                                                                                                                          FIFO Integer,
                                                                                                                                                                                                                                                          ())) (_elam2 :: Integer)) (st :: TmkSizedFIFOF___FIFOFF__Int_32_BCC) ;
                                                } in (((&&) :: Bool -> Bool -> Bool) (gv :: Bool) ((fst3 :: (Bool,
                                                                                                             TmkSizedFIFOF___FIFOFF__Int_32_BCC,
                                                                                                             ()) -> Bool) (ov :: (Bool,
                                                                                                                                  TmkSizedFIFOF___FIFOFF__Int_32_BCC,
                                                                                                                                  ()))),
                                                      (snd3 :: (Bool,
                                                                TmkSizedFIFOF___FIFOFF__Int_32_BCC,
                                                                ()) -> TmkSizedFIFOF___FIFOFF__Int_32_BCC) (ov :: (Bool,
                                                                                                                  TmkSizedFIFOF___FIFOFF__Int_32_BCC,
                                                                                                                  ())),
                                                      (trd3 :: (Bool,
                                                                TmkSizedFIFOF___FIFOFF__Int_32_BCC,
                                                                ()) -> ()) (ov :: (Bool,
                                                                                   TmkSizedFIFOF___FIFOFF__Int_32_BCC,
                                                                                   ())))))
;
data TmkTestBench =
    TmkTestBench (Reg Integer) (Reg Integer) TmkSizedFIFOF___FIFOFF__Int_32_BCC TmkSizedFIFOF___FIFOFF__Int_32_BCC TmkSizedFIFOF___FIFOFF__Int_32_BCC TmkSizedFIFOF___FIFOFF__Int_32_BCC
;
__mkTestBench_undef :: TmkTestBench;
__mkTestBench_undef = (TmkTestBench :: (Reg Integer) -> (Reg Integer) -> TmkSizedFIFOF___FIFOFF__Int_32_BCC -> TmkSizedFIFOF___FIFOFF__Int_32_BCC -> TmkSizedFIFOF___FIFOFF__Int_32_BCC -> TmkSizedFIFOF___FIFOFF__Int_32_BCC -> TmkTestBench) (undefined :: (Reg Integer)) (undefined :: (Reg Integer)) (undefined :: TmkSizedFIFOF___FIFOFF__Int_32_BCC) (undefined :: TmkSizedFIFOF___FIFOFF__Int_32_BCC) (undefined :: TmkSizedFIFOF___FIFOFF__Int_32_BCC) (undefined :: TmkSizedFIFOF___FIFOFF__Int_32_BCC)
;
mkTestBench_sink :: TmkTestBench -> (Reg Integer);
mkTestBench_sink = (\(a :: TmkTestBench) ->
                      case (a :: TmkTestBench) of {
                        (TmkTestBench :: TmkTestBench) (x :: (Reg Integer)) (_ :: (Reg Integer)) (_ :: TmkSizedFIFOF___FIFOFF__Int_32_BCC) (_ :: TmkSizedFIFOF___FIFOFF__Int_32_BCC) (_ :: TmkSizedFIFOF___FIFOFF__Int_32_BCC) (_ :: TmkSizedFIFOF___FIFOFF__Int_32_BCC) ->
                          (x :: (Reg Integer));
                      })
;
mkTestBench_source :: TmkTestBench -> (Reg Integer);
mkTestBench_source = (\(a :: TmkTestBench) ->
                        case (a :: TmkTestBench) of {
                          (TmkTestBench :: TmkTestBench) (_ :: (Reg Integer)) (x :: (Reg Integer)) (_ :: TmkSizedFIFOF___FIFOFF__Int_32_BCC) (_ :: TmkSizedFIFOF___FIFOFF__Int_32_BCC) (_ :: TmkSizedFIFOF___FIFOFF__Int_32_BCC) (_ :: TmkSizedFIFOF___FIFOFF__Int_32_BCC) ->
                            (x :: (Reg Integer));
                        })
;
mkTestBench_w :: TmkTestBench -> TmkSizedFIFOF___FIFOFF__Int_32_BCC;
mkTestBench_w = (\(a :: TmkTestBench) ->
                   case (a :: TmkTestBench) of {
                     (TmkTestBench :: TmkTestBench) (_ :: (Reg Integer)) (_ :: (Reg Integer)) (x :: TmkSizedFIFOF___FIFOFF__Int_32_BCC) (_ :: TmkSizedFIFOF___FIFOFF__Int_32_BCC) (_ :: TmkSizedFIFOF___FIFOFF__Int_32_BCC) (_ :: TmkSizedFIFOF___FIFOFF__Int_32_BCC) ->
                       (x :: TmkSizedFIFOF___FIFOFF__Int_32_BCC);
                   })
;
mkTestBench_z :: TmkTestBench -> TmkSizedFIFOF___FIFOFF__Int_32_BCC;
mkTestBench_z = (\(a :: TmkTestBench) ->
                   case (a :: TmkTestBench) of {
                     (TmkTestBench :: TmkTestBench) (_ :: (Reg Integer)) (_ :: (Reg Integer)) (_ :: TmkSizedFIFOF___FIFOFF__Int_32_BCC) (x :: TmkSizedFIFOF___FIFOFF__Int_32_BCC) (_ :: TmkSizedFIFOF___FIFOFF__Int_32_BCC) (_ :: TmkSizedFIFOF___FIFOFF__Int_32_BCC) ->
                       (x :: TmkSizedFIFOF___FIFOFF__Int_32_BCC);
                   })
;
mkTestBench_y :: TmkTestBench -> TmkSizedFIFOF___FIFOFF__Int_32_BCC;
mkTestBench_y = (\(a :: TmkTestBench) ->
                   case (a :: TmkTestBench) of {
                     (TmkTestBench :: TmkTestBench) (_ :: (Reg Integer)) (_ :: (Reg Integer)) (_ :: TmkSizedFIFOF___FIFOFF__Int_32_BCC) (_ :: TmkSizedFIFOF___FIFOFF__Int_32_BCC) (x :: TmkSizedFIFOF___FIFOFF__Int_32_BCC) (_ :: TmkSizedFIFOF___FIFOFF__Int_32_BCC) ->
                       (x :: TmkSizedFIFOF___FIFOFF__Int_32_BCC);
                   })
;
mkTestBench_x :: TmkTestBench -> TmkSizedFIFOF___FIFOFF__Int_32_BCC;
mkTestBench_x = (\(a :: TmkTestBench) ->
                   case (a :: TmkTestBench) of {
                     (TmkTestBench :: TmkTestBench) (_ :: (Reg Integer)) (_ :: (Reg Integer)) (_ :: TmkSizedFIFOF___FIFOFF__Int_32_BCC) (_ :: TmkSizedFIFOF___FIFOFF__Int_32_BCC) (_ :: TmkSizedFIFOF___FIFOFF__Int_32_BCC) (x :: TmkSizedFIFOF___FIFOFF__Int_32_BCC) ->
                       (x :: TmkSizedFIFOF___FIFOFF__Int_32_BCC);
                   })
;
__mkTestBench_sink_update :: Reg Integer -> TmkTestBench -> TmkTestBench;
__mkTestBench_sink_update = (\(a :: (Reg Integer)) ->
                               (\(b :: TmkTestBench) ->
                                  case ((a :: (Reg Integer)), (b :: TmkTestBench)) of {
                                    ((mkTestBench_sink :: (Reg Integer)),
                                     (TmkTestBench :: TmkTestBench) (_ :: (Reg Integer)) (mkTestBench_source :: (Reg Integer)) (mkTestBench_w :: TmkSizedFIFOF___FIFOFF__Int_32_BCC) (mkTestBench_z :: TmkSizedFIFOF___FIFOFF__Int_32_BCC) (mkTestBench_y :: TmkSizedFIFOF___FIFOFF__Int_32_BCC) (mkTestBench_x :: TmkSizedFIFOF___FIFOFF__Int_32_BCC)) ->
                                      (TmkTestBench :: (Reg Integer) -> (Reg Integer) -> TmkSizedFIFOF___FIFOFF__Int_32_BCC -> TmkSizedFIFOF___FIFOFF__Int_32_BCC -> TmkSizedFIFOF___FIFOFF__Int_32_BCC -> TmkSizedFIFOF___FIFOFF__Int_32_BCC -> TmkTestBench) (mkTestBench_sink :: (Reg Integer)) (mkTestBench_source :: (Reg Integer)) (mkTestBench_w :: TmkSizedFIFOF___FIFOFF__Int_32_BCC) (mkTestBench_z :: TmkSizedFIFOF___FIFOFF__Int_32_BCC) (mkTestBench_y :: TmkSizedFIFOF___FIFOFF__Int_32_BCC) (mkTestBench_x :: TmkSizedFIFOF___FIFOFF__Int_32_BCC);
                                  }))
;
__mkTestBench_source_update :: Reg Integer -> TmkTestBench -> TmkTestBench;
__mkTestBench_source_update = (\(a :: (Reg Integer)) ->
                                 (\(b :: TmkTestBench) ->
                                    case ((a :: (Reg Integer)), (b :: TmkTestBench)) of {
                                      ((mkTestBench_source :: (Reg Integer)),
                                       (TmkTestBench :: TmkTestBench) (mkTestBench_sink :: (Reg Integer)) (_ :: (Reg Integer)) (mkTestBench_w :: TmkSizedFIFOF___FIFOFF__Int_32_BCC) (mkTestBench_z :: TmkSizedFIFOF___FIFOFF__Int_32_BCC) (mkTestBench_y :: TmkSizedFIFOF___FIFOFF__Int_32_BCC) (mkTestBench_x :: TmkSizedFIFOF___FIFOFF__Int_32_BCC)) ->
                                        (TmkTestBench :: (Reg Integer) -> (Reg Integer) -> TmkSizedFIFOF___FIFOFF__Int_32_BCC -> TmkSizedFIFOF___FIFOFF__Int_32_BCC -> TmkSizedFIFOF___FIFOFF__Int_32_BCC -> TmkSizedFIFOF___FIFOFF__Int_32_BCC -> TmkTestBench) (mkTestBench_sink :: (Reg Integer)) (mkTestBench_source :: (Reg Integer)) (mkTestBench_w :: TmkSizedFIFOF___FIFOFF__Int_32_BCC) (mkTestBench_z :: TmkSizedFIFOF___FIFOFF__Int_32_BCC) (mkTestBench_y :: TmkSizedFIFOF___FIFOFF__Int_32_BCC) (mkTestBench_x :: TmkSizedFIFOF___FIFOFF__Int_32_BCC);
                                    }))
;
__mkTestBench_w_update :: TmkSizedFIFOF___FIFOFF__Int_32_BCC -> TmkTestBench -> TmkTestBench;
__mkTestBench_w_update = (\(a :: TmkSizedFIFOF___FIFOFF__Int_32_BCC) ->
                            (\(b :: TmkTestBench) ->
                               case ((a :: TmkSizedFIFOF___FIFOFF__Int_32_BCC),
                                     (b :: TmkTestBench)) of {
                                 ((mkTestBench_w :: TmkSizedFIFOF___FIFOFF__Int_32_BCC),
                                  (TmkTestBench :: TmkTestBench) (mkTestBench_sink :: (Reg Integer)) (mkTestBench_source :: (Reg Integer)) (_ :: TmkSizedFIFOF___FIFOFF__Int_32_BCC) (mkTestBench_z :: TmkSizedFIFOF___FIFOFF__Int_32_BCC) (mkTestBench_y :: TmkSizedFIFOF___FIFOFF__Int_32_BCC) (mkTestBench_x :: TmkSizedFIFOF___FIFOFF__Int_32_BCC)) ->
                                   (TmkTestBench :: (Reg Integer) -> (Reg Integer) -> TmkSizedFIFOF___FIFOFF__Int_32_BCC -> TmkSizedFIFOF___FIFOFF__Int_32_BCC -> TmkSizedFIFOF___FIFOFF__Int_32_BCC -> TmkSizedFIFOF___FIFOFF__Int_32_BCC -> TmkTestBench) (mkTestBench_sink :: (Reg Integer)) (mkTestBench_source :: (Reg Integer)) (mkTestBench_w :: TmkSizedFIFOF___FIFOFF__Int_32_BCC) (mkTestBench_z :: TmkSizedFIFOF___FIFOFF__Int_32_BCC) (mkTestBench_y :: TmkSizedFIFOF___FIFOFF__Int_32_BCC) (mkTestBench_x :: TmkSizedFIFOF___FIFOFF__Int_32_BCC);
                               }))
;
__mkTestBench_z_update :: TmkSizedFIFOF___FIFOFF__Int_32_BCC -> TmkTestBench -> TmkTestBench;
__mkTestBench_z_update = (\(a :: TmkSizedFIFOF___FIFOFF__Int_32_BCC) ->
                            (\(b :: TmkTestBench) ->
                               case ((a :: TmkSizedFIFOF___FIFOFF__Int_32_BCC),
                                     (b :: TmkTestBench)) of {
                                 ((mkTestBench_z :: TmkSizedFIFOF___FIFOFF__Int_32_BCC),
                                  (TmkTestBench :: TmkTestBench) (mkTestBench_sink :: (Reg Integer)) (mkTestBench_source :: (Reg Integer)) (mkTestBench_w :: TmkSizedFIFOF___FIFOFF__Int_32_BCC) (_ :: TmkSizedFIFOF___FIFOFF__Int_32_BCC) (mkTestBench_y :: TmkSizedFIFOF___FIFOFF__Int_32_BCC) (mkTestBench_x :: TmkSizedFIFOF___FIFOFF__Int_32_BCC)) ->
                                   (TmkTestBench :: (Reg Integer) -> (Reg Integer) -> TmkSizedFIFOF___FIFOFF__Int_32_BCC -> TmkSizedFIFOF___FIFOFF__Int_32_BCC -> TmkSizedFIFOF___FIFOFF__Int_32_BCC -> TmkSizedFIFOF___FIFOFF__Int_32_BCC -> TmkTestBench) (mkTestBench_sink :: (Reg Integer)) (mkTestBench_source :: (Reg Integer)) (mkTestBench_w :: TmkSizedFIFOF___FIFOFF__Int_32_BCC) (mkTestBench_z :: TmkSizedFIFOF___FIFOFF__Int_32_BCC) (mkTestBench_y :: TmkSizedFIFOF___FIFOFF__Int_32_BCC) (mkTestBench_x :: TmkSizedFIFOF___FIFOFF__Int_32_BCC);
                               }))
;
__mkTestBench_y_update :: TmkSizedFIFOF___FIFOFF__Int_32_BCC -> TmkTestBench -> TmkTestBench;
__mkTestBench_y_update = (\(a :: TmkSizedFIFOF___FIFOFF__Int_32_BCC) ->
                            (\(b :: TmkTestBench) ->
                               case ((a :: TmkSizedFIFOF___FIFOFF__Int_32_BCC),
                                     (b :: TmkTestBench)) of {
                                 ((mkTestBench_y :: TmkSizedFIFOF___FIFOFF__Int_32_BCC),
                                  (TmkTestBench :: TmkTestBench) (mkTestBench_sink :: (Reg Integer)) (mkTestBench_source :: (Reg Integer)) (mkTestBench_w :: TmkSizedFIFOF___FIFOFF__Int_32_BCC) (mkTestBench_z :: TmkSizedFIFOF___FIFOFF__Int_32_BCC) (_ :: TmkSizedFIFOF___FIFOFF__Int_32_BCC) (mkTestBench_x :: TmkSizedFIFOF___FIFOFF__Int_32_BCC)) ->
                                   (TmkTestBench :: (Reg Integer) -> (Reg Integer) -> TmkSizedFIFOF___FIFOFF__Int_32_BCC -> TmkSizedFIFOF___FIFOFF__Int_32_BCC -> TmkSizedFIFOF___FIFOFF__Int_32_BCC -> TmkSizedFIFOF___FIFOFF__Int_32_BCC -> TmkTestBench) (mkTestBench_sink :: (Reg Integer)) (mkTestBench_source :: (Reg Integer)) (mkTestBench_w :: TmkSizedFIFOF___FIFOFF__Int_32_BCC) (mkTestBench_z :: TmkSizedFIFOF___FIFOFF__Int_32_BCC) (mkTestBench_y :: TmkSizedFIFOF___FIFOFF__Int_32_BCC) (mkTestBench_x :: TmkSizedFIFOF___FIFOFF__Int_32_BCC);
                               }))
;
__mkTestBench_x_update :: TmkSizedFIFOF___FIFOFF__Int_32_BCC -> TmkTestBench -> TmkTestBench;
__mkTestBench_x_update = (\(a :: TmkSizedFIFOF___FIFOFF__Int_32_BCC) ->
                            (\(b :: TmkTestBench) ->
                               case ((a :: TmkSizedFIFOF___FIFOFF__Int_32_BCC),
                                     (b :: TmkTestBench)) of {
                                 ((mkTestBench_x :: TmkSizedFIFOF___FIFOFF__Int_32_BCC),
                                  (TmkTestBench :: TmkTestBench) (mkTestBench_sink :: (Reg Integer)) (mkTestBench_source :: (Reg Integer)) (mkTestBench_w :: TmkSizedFIFOF___FIFOFF__Int_32_BCC) (mkTestBench_z :: TmkSizedFIFOF___FIFOFF__Int_32_BCC) (mkTestBench_y :: TmkSizedFIFOF___FIFOFF__Int_32_BCC) (_ :: TmkSizedFIFOF___FIFOFF__Int_32_BCC)) ->
                                   (TmkTestBench :: (Reg Integer) -> (Reg Integer) -> TmkSizedFIFOF___FIFOFF__Int_32_BCC -> TmkSizedFIFOF___FIFOFF__Int_32_BCC -> TmkSizedFIFOF___FIFOFF__Int_32_BCC -> TmkSizedFIFOF___FIFOFF__Int_32_BCC -> TmkTestBench) (mkTestBench_sink :: (Reg Integer)) (mkTestBench_source :: (Reg Integer)) (mkTestBench_w :: TmkSizedFIFOF___FIFOFF__Int_32_BCC) (mkTestBench_z :: TmkSizedFIFOF___FIFOFF__Int_32_BCC) (mkTestBench_y :: TmkSizedFIFOF___FIFOFF__Int_32_BCC) (mkTestBench_x :: TmkSizedFIFOF___FIFOFF__Int_32_BCC);
                               }))
;
mkTestBench_ctor :: TmkTestBench;
mkTestBench_ctor = (TmkTestBench :: (Reg Integer) -> (Reg Integer) -> TmkSizedFIFOF___FIFOFF__Int_32_BCC -> TmkSizedFIFOF___FIFOFF__Int_32_BCC -> TmkSizedFIFOF___FIFOFF__Int_32_BCC -> TmkSizedFIFOF___FIFOFF__Int_32_BCC -> TmkTestBench) ((mkReg__Reg__Int_32_ctor :: Integer -> (Reg Integer)) 0) ((mkReg__Reg__Int_32_ctor :: Integer -> (Reg Integer)) 0) ((mkSizedFIFOF___FIFOFF__Int_32_BCC_ctor :: Integer -> TmkSizedFIFOF___FIFOFF__Int_32_BCC) 1) ((mkSizedFIFOF___FIFOFF__Int_32_BCC_ctor :: Integer -> TmkSizedFIFOF___FIFOFF__Int_32_BCC) 1) ((mkSizedFIFOF___FIFOFF__Int_32_BCC_ctor :: Integer -> TmkSizedFIFOF___FIFOFF__Int_32_BCC) 1) ((mkSizedFIFOF___FIFOFF__Int_32_BCC_ctor :: Integer -> TmkSizedFIFOF___FIFOFF__Int_32_BCC) 1)
;
mkTestBench_dimension :: TmkTestBench -> TmkTestBench -> Bool;
mkTestBench_dimension = (\(a :: TmkTestBench) ->
                           (\(b :: TmkTestBench) ->
                              let {
                                (x_rv :: Bool) = (mkSizedFIFOF___FIFOFF__Int_32_BCC_dimension :: TmkSizedFIFOF___FIFOFF__Int_32_BCC -> TmkSizedFIFOF___FIFOFF__Int_32_BCC -> Bool) ((mkTestBench_x :: TmkTestBench -> TmkSizedFIFOF___FIFOFF__Int_32_BCC) (a :: TmkTestBench)) ((mkTestBench_x :: TmkTestBench -> TmkSizedFIFOF___FIFOFF__Int_32_BCC) (b :: TmkTestBench)) ;
                                (y_rv :: Bool) = (mkSizedFIFOF___FIFOFF__Int_32_BCC_dimension :: TmkSizedFIFOF___FIFOFF__Int_32_BCC -> TmkSizedFIFOF___FIFOFF__Int_32_BCC -> Bool) ((mkTestBench_y :: TmkTestBench -> TmkSizedFIFOF___FIFOFF__Int_32_BCC) (a :: TmkTestBench)) ((mkTestBench_y :: TmkTestBench -> TmkSizedFIFOF___FIFOFF__Int_32_BCC) (b :: TmkTestBench)) ;
                                (z_rv :: Bool) = (mkSizedFIFOF___FIFOFF__Int_32_BCC_dimension :: TmkSizedFIFOF___FIFOFF__Int_32_BCC -> TmkSizedFIFOF___FIFOFF__Int_32_BCC -> Bool) ((mkTestBench_z :: TmkTestBench -> TmkSizedFIFOF___FIFOFF__Int_32_BCC) (a :: TmkTestBench)) ((mkTestBench_z :: TmkTestBench -> TmkSizedFIFOF___FIFOFF__Int_32_BCC) (b :: TmkTestBench)) ;
                                (w_rv :: Bool) = (mkSizedFIFOF___FIFOFF__Int_32_BCC_dimension :: TmkSizedFIFOF___FIFOFF__Int_32_BCC -> TmkSizedFIFOF___FIFOFF__Int_32_BCC -> Bool) ((mkTestBench_w :: TmkTestBench -> TmkSizedFIFOF___FIFOFF__Int_32_BCC) (a :: TmkTestBench)) ((mkTestBench_w :: TmkTestBench -> TmkSizedFIFOF___FIFOFF__Int_32_BCC) (b :: TmkTestBench)) ;
                                (source_rv :: Bool) = (mkReg__Reg__Int_32_dimension :: (Reg Integer) -> (Reg Integer) -> Bool) ((mkTestBench_source :: TmkTestBench -> (Reg Integer)) (a :: TmkTestBench)) ((mkTestBench_source :: TmkTestBench -> (Reg Integer)) (b :: TmkTestBench)) ;
                                (sink_rv :: Bool) = (mkReg__Reg__Int_32_dimension :: (Reg Integer) -> (Reg Integer) -> Bool) ((mkTestBench_sink :: TmkTestBench -> (Reg Integer)) (a :: TmkTestBench)) ((mkTestBench_sink :: TmkTestBench -> (Reg Integer)) (b :: TmkTestBench)) ;
                              } in ((&&) :: Bool -> Bool -> Bool) (x_rv :: Bool) (((&&) :: Bool -> Bool -> Bool) (y_rv :: Bool) (((&&) :: Bool -> Bool -> Bool) (z_rv :: Bool) (((&&) :: Bool -> Bool -> Bool) (w_rv :: Bool) (((&&) :: Bool -> Bool -> Bool) (source_rv :: Bool) (((&&) :: Bool -> Bool -> Bool) (sink_rv :: Bool) (True :: Bool))))))))
;
mkTestBench_eq :: TmkTestBench -> TmkTestBench -> Bool;
mkTestBench_eq = (\(a :: TmkTestBench) ->
                    (\(b :: TmkTestBench) ->
                       let {
                         (x_rv :: Bool) = (mkSizedFIFOF___FIFOFF__Int_32_BCC_eq :: TmkSizedFIFOF___FIFOFF__Int_32_BCC -> TmkSizedFIFOF___FIFOFF__Int_32_BCC -> Bool) ((mkTestBench_x :: TmkTestBench -> TmkSizedFIFOF___FIFOFF__Int_32_BCC) (a :: TmkTestBench)) ((mkTestBench_x :: TmkTestBench -> TmkSizedFIFOF___FIFOFF__Int_32_BCC) (b :: TmkTestBench)) ;
                         (y_rv :: Bool) = (mkSizedFIFOF___FIFOFF__Int_32_BCC_eq :: TmkSizedFIFOF___FIFOFF__Int_32_BCC -> TmkSizedFIFOF___FIFOFF__Int_32_BCC -> Bool) ((mkTestBench_y :: TmkTestBench -> TmkSizedFIFOF___FIFOFF__Int_32_BCC) (a :: TmkTestBench)) ((mkTestBench_y :: TmkTestBench -> TmkSizedFIFOF___FIFOFF__Int_32_BCC) (b :: TmkTestBench)) ;
                         (z_rv :: Bool) = (mkSizedFIFOF___FIFOFF__Int_32_BCC_eq :: TmkSizedFIFOF___FIFOFF__Int_32_BCC -> TmkSizedFIFOF___FIFOFF__Int_32_BCC -> Bool) ((mkTestBench_z :: TmkTestBench -> TmkSizedFIFOF___FIFOFF__Int_32_BCC) (a :: TmkTestBench)) ((mkTestBench_z :: TmkTestBench -> TmkSizedFIFOF___FIFOFF__Int_32_BCC) (b :: TmkTestBench)) ;
                         (w_rv :: Bool) = (mkSizedFIFOF___FIFOFF__Int_32_BCC_eq :: TmkSizedFIFOF___FIFOFF__Int_32_BCC -> TmkSizedFIFOF___FIFOFF__Int_32_BCC -> Bool) ((mkTestBench_w :: TmkTestBench -> TmkSizedFIFOF___FIFOFF__Int_32_BCC) (a :: TmkTestBench)) ((mkTestBench_w :: TmkTestBench -> TmkSizedFIFOF___FIFOFF__Int_32_BCC) (b :: TmkTestBench)) ;
                         (source_rv :: Bool) = (mkReg__Reg__Int_32_eq :: (Reg Integer) -> (Reg Integer) -> Bool) ((mkTestBench_source :: TmkTestBench -> (Reg Integer)) (a :: TmkTestBench)) ((mkTestBench_source :: TmkTestBench -> (Reg Integer)) (b :: TmkTestBench)) ;
                         (sink_rv :: Bool) = (mkReg__Reg__Int_32_eq :: (Reg Integer) -> (Reg Integer) -> Bool) ((mkTestBench_sink :: TmkTestBench -> (Reg Integer)) (a :: TmkTestBench)) ((mkTestBench_sink :: TmkTestBench -> (Reg Integer)) (b :: TmkTestBench)) ;
                       } in ((&&) :: Bool -> Bool -> Bool) (x_rv :: Bool) (((&&) :: Bool -> Bool -> Bool) (y_rv :: Bool) (((&&) :: Bool -> Bool -> Bool) (z_rv :: Bool) (((&&) :: Bool -> Bool -> Bool) (w_rv :: Bool) (((&&) :: Bool -> Bool -> Bool) (source_rv :: Bool) (((&&) :: Bool -> Bool -> Bool) (sink_rv :: Bool) (True :: Bool))))))))
;
mkTestBench_clear_dirty_bits :: TmkTestBench -> TmkTestBench;
mkTestBench_clear_dirty_bits = (\(a :: TmkTestBench) ->
                                  let {
                                    (x_new :: TmkSizedFIFOF___FIFOFF__Int_32_BCC) = (mkSizedFIFOF___FIFOFF__Int_32_BCC_clear_dirty_bits :: TmkSizedFIFOF___FIFOFF__Int_32_BCC -> TmkSizedFIFOF___FIFOFF__Int_32_BCC) ((mkTestBench_x :: TmkTestBench -> TmkSizedFIFOF___FIFOFF__Int_32_BCC) (a :: TmkTestBench)) ;
                                    (y_new :: TmkSizedFIFOF___FIFOFF__Int_32_BCC) = (mkSizedFIFOF___FIFOFF__Int_32_BCC_clear_dirty_bits :: TmkSizedFIFOF___FIFOFF__Int_32_BCC -> TmkSizedFIFOF___FIFOFF__Int_32_BCC) ((mkTestBench_y :: TmkTestBench -> TmkSizedFIFOF___FIFOFF__Int_32_BCC) (a :: TmkTestBench)) ;
                                    (z_new :: TmkSizedFIFOF___FIFOFF__Int_32_BCC) = (mkSizedFIFOF___FIFOFF__Int_32_BCC_clear_dirty_bits :: TmkSizedFIFOF___FIFOFF__Int_32_BCC -> TmkSizedFIFOF___FIFOFF__Int_32_BCC) ((mkTestBench_z :: TmkTestBench -> TmkSizedFIFOF___FIFOFF__Int_32_BCC) (a :: TmkTestBench)) ;
                                    (w_new :: TmkSizedFIFOF___FIFOFF__Int_32_BCC) = (mkSizedFIFOF___FIFOFF__Int_32_BCC_clear_dirty_bits :: TmkSizedFIFOF___FIFOFF__Int_32_BCC -> TmkSizedFIFOF___FIFOFF__Int_32_BCC) ((mkTestBench_w :: TmkTestBench -> TmkSizedFIFOF___FIFOFF__Int_32_BCC) (a :: TmkTestBench)) ;
                                    (source_new :: (Reg Integer)) = (mkReg__Reg__Int_32_clear_dirty_bits :: (Reg Integer) -> (Reg Integer)) ((mkTestBench_source :: TmkTestBench -> (Reg Integer)) (a :: TmkTestBench)) ;
                                    (sink_new :: (Reg Integer)) = (mkReg__Reg__Int_32_clear_dirty_bits :: (Reg Integer) -> (Reg Integer)) ((mkTestBench_sink :: TmkTestBench -> (Reg Integer)) (a :: TmkTestBench)) ;
                                  } in (TmkTestBench :: (Reg Integer) -> (Reg Integer) -> TmkSizedFIFOF___FIFOFF__Int_32_BCC -> TmkSizedFIFOF___FIFOFF__Int_32_BCC -> TmkSizedFIFOF___FIFOFF__Int_32_BCC -> TmkSizedFIFOF___FIFOFF__Int_32_BCC -> TmkTestBench) (sink_new :: (Reg Integer)) (source_new :: (Reg Integer)) (w_new :: TmkSizedFIFOF___FIFOFF__Int_32_BCC) (z_new :: TmkSizedFIFOF___FIFOFF__Int_32_BCC) (y_new :: TmkSizedFIFOF___FIFOFF__Int_32_BCC) (x_new :: TmkSizedFIFOF___FIFOFF__Int_32_BCC))
;
mkTestBench_idfn :: TmkTestBench -> TmkTestBench;
mkTestBench_idfn = (\(a :: TmkTestBench) ->
                      let {
                        (x_new :: TmkSizedFIFOF___FIFOFF__Int_32_BCC) = (mkSizedFIFOF___FIFOFF__Int_32_BCC_idfn :: TmkSizedFIFOF___FIFOFF__Int_32_BCC -> TmkSizedFIFOF___FIFOFF__Int_32_BCC) ((mkTestBench_x :: TmkTestBench -> TmkSizedFIFOF___FIFOFF__Int_32_BCC) (a :: TmkTestBench)) ;
                        (y_new :: TmkSizedFIFOF___FIFOFF__Int_32_BCC) = (mkSizedFIFOF___FIFOFF__Int_32_BCC_idfn :: TmkSizedFIFOF___FIFOFF__Int_32_BCC -> TmkSizedFIFOF___FIFOFF__Int_32_BCC) ((mkTestBench_y :: TmkTestBench -> TmkSizedFIFOF___FIFOFF__Int_32_BCC) (a :: TmkTestBench)) ;
                        (z_new :: TmkSizedFIFOF___FIFOFF__Int_32_BCC) = (mkSizedFIFOF___FIFOFF__Int_32_BCC_idfn :: TmkSizedFIFOF___FIFOFF__Int_32_BCC -> TmkSizedFIFOF___FIFOFF__Int_32_BCC) ((mkTestBench_z :: TmkTestBench -> TmkSizedFIFOF___FIFOFF__Int_32_BCC) (a :: TmkTestBench)) ;
                        (w_new :: TmkSizedFIFOF___FIFOFF__Int_32_BCC) = (mkSizedFIFOF___FIFOFF__Int_32_BCC_idfn :: TmkSizedFIFOF___FIFOFF__Int_32_BCC -> TmkSizedFIFOF___FIFOFF__Int_32_BCC) ((mkTestBench_w :: TmkTestBench -> TmkSizedFIFOF___FIFOFF__Int_32_BCC) (a :: TmkTestBench)) ;
                        (source_new :: (Reg Integer)) = (mkReg__Reg__Int_32_idfn :: (Reg Integer) -> (Reg Integer)) ((mkTestBench_source :: TmkTestBench -> (Reg Integer)) (a :: TmkTestBench)) ;
                        (sink_new :: (Reg Integer)) = (mkReg__Reg__Int_32_idfn :: (Reg Integer) -> (Reg Integer)) ((mkTestBench_sink :: TmkTestBench -> (Reg Integer)) (a :: TmkTestBench)) ;
                      } in (TmkTestBench :: (Reg Integer) -> (Reg Integer) -> TmkSizedFIFOF___FIFOFF__Int_32_BCC -> TmkSizedFIFOF___FIFOFF__Int_32_BCC -> TmkSizedFIFOF___FIFOFF__Int_32_BCC -> TmkSizedFIFOF___FIFOFF__Int_32_BCC -> TmkTestBench) (sink_new :: (Reg Integer)) (source_new :: (Reg Integer)) (w_new :: TmkSizedFIFOF___FIFOFF__Int_32_BCC) (z_new :: TmkSizedFIFOF___FIFOFF__Int_32_BCC) (y_new :: TmkSizedFIFOF___FIFOFF__Int_32_BCC) (x_new :: TmkSizedFIFOF___FIFOFF__Int_32_BCC))
;
instance Eq TmkTestBench where {
  (==) = (\(a :: TmkTestBench) ->
            (\(b :: TmkTestBench) ->
               (True :: Bool)));
  (/=) = (\(a :: TmkTestBench) ->
            (\(b :: TmkTestBench) ->
               (not :: Bool -> Bool) (((==) :: TmkTestBench -> TmkTestBench -> Bool) (a :: TmkTestBench) (b :: TmkTestBench))));
}
;
merge_p_mkTestBench :: TmkTestBench -> TmkTestBench -> TmkTestBench;
merge_p_mkTestBench = (\(_a :: TmkTestBench) ->
                         (\(_b :: TmkTestBench) ->
                            (TmkTestBench :: (Reg Integer) -> (Reg Integer) -> TmkSizedFIFOF___FIFOFF__Int_32_BCC -> TmkSizedFIFOF___FIFOFF__Int_32_BCC -> TmkSizedFIFOF___FIFOFF__Int_32_BCC -> TmkSizedFIFOF___FIFOFF__Int_32_BCC -> TmkTestBench) ((merge_p_mkReg__Reg__Int_32 :: (Reg Integer) -> (Reg Integer) -> (Reg Integer)) ((mkTestBench_sink :: TmkTestBench -> (Reg Integer)) (_a :: TmkTestBench)) ((mkTestBench_sink :: TmkTestBench -> (Reg Integer)) (_b :: TmkTestBench))) ((merge_p_mkReg__Reg__Int_32 :: (Reg Integer) -> (Reg Integer) -> (Reg Integer)) ((mkTestBench_source :: TmkTestBench -> (Reg Integer)) (_a :: TmkTestBench)) ((mkTestBench_source :: TmkTestBench -> (Reg Integer)) (_b :: TmkTestBench))) ((merge_p_mkSizedFIFOF___FIFOFF__Int_32_BCC :: TmkSizedFIFOF___FIFOFF__Int_32_BCC -> TmkSizedFIFOF___FIFOFF__Int_32_BCC -> TmkSizedFIFOF___FIFOFF__Int_32_BCC) ((mkTestBench_w :: TmkTestBench -> TmkSizedFIFOF___FIFOFF__Int_32_BCC) (_a :: TmkTestBench)) ((mkTestBench_w :: TmkTestBench -> TmkSizedFIFOF___FIFOFF__Int_32_BCC) (_b :: TmkTestBench))) ((merge_p_mkSizedFIFOF___FIFOFF__Int_32_BCC :: TmkSizedFIFOF___FIFOFF__Int_32_BCC -> TmkSizedFIFOF___FIFOFF__Int_32_BCC -> TmkSizedFIFOF___FIFOFF__Int_32_BCC) ((mkTestBench_z :: TmkTestBench -> TmkSizedFIFOF___FIFOFF__Int_32_BCC) (_a :: TmkTestBench)) ((mkTestBench_z :: TmkTestBench -> TmkSizedFIFOF___FIFOFF__Int_32_BCC) (_b :: TmkTestBench))) ((merge_p_mkSizedFIFOF___FIFOFF__Int_32_BCC :: TmkSizedFIFOF___FIFOFF__Int_32_BCC -> TmkSizedFIFOF___FIFOFF__Int_32_BCC -> TmkSizedFIFOF___FIFOFF__Int_32_BCC) ((mkTestBench_y :: TmkTestBench -> TmkSizedFIFOF___FIFOFF__Int_32_BCC) (_a :: TmkTestBench)) ((mkTestBench_y :: TmkTestBench -> TmkSizedFIFOF___FIFOFF__Int_32_BCC) (_b :: TmkTestBench))) ((merge_p_mkSizedFIFOF___FIFOFF__Int_32_BCC :: TmkSizedFIFOF___FIFOFF__Int_32_BCC -> TmkSizedFIFOF___FIFOFF__Int_32_BCC -> TmkSizedFIFOF___FIFOFF__Int_32_BCC) ((mkTestBench_x :: TmkTestBench -> TmkSizedFIFOF___FIFOFF__Int_32_BCC) (_a :: TmkTestBench)) ((mkTestBench_x :: TmkTestBench -> TmkSizedFIFOF___FIFOFF__Int_32_BCC) (_b :: TmkTestBench)))))
;
x_upd__Void_mkTestBench :: (TmkSizedFIFOF___FIFOFF__Int_32_BCC -> (Bool,
                                                                  TmkSizedFIFOF___FIFOFF__Int_32_BCC,
                                                                  ())) -> TmkTestBench -> (Bool,
                                                                                          TmkTestBench,
                                                                                          ());
x_upd__Void_mkTestBench = (\(a :: TmkSizedFIFOF___FIFOFF__Int_32_BCC -> (Bool,
                                                                        TmkSizedFIFOF___FIFOFF__Int_32_BCC,
                                                                        ())) ->
                             (\(s :: TmkTestBench) ->
                                let {
                                  (tup :: (Bool,
                                           TmkSizedFIFOF___FIFOFF__Int_32_BCC,
                                           ())) = (a :: TmkSizedFIFOF___FIFOFF__Int_32_BCC -> (Bool,
                                                                                              TmkSizedFIFOF___FIFOFF__Int_32_BCC,
                                                                                              ())) ((mkTestBench_x :: TmkTestBench -> TmkSizedFIFOF___FIFOFF__Int_32_BCC) (s :: TmkTestBench)) ;
                                } in ((fst3 :: (Bool,
                                                TmkSizedFIFOF___FIFOFF__Int_32_BCC,
                                                ()) -> Bool) (tup :: (Bool,
                                                                      TmkSizedFIFOF___FIFOFF__Int_32_BCC,
                                                                      ())),
                                      (__mkTestBench_x_update :: TmkSizedFIFOF___FIFOFF__Int_32_BCC -> TmkTestBench -> TmkTestBench) ((snd3 :: (Bool,
                                                                                                                                             TmkSizedFIFOF___FIFOFF__Int_32_BCC,
                                                                                                                                             ()) -> TmkSizedFIFOF___FIFOFF__Int_32_BCC) (tup :: (Bool,
                                                                                                                                                                                                TmkSizedFIFOF___FIFOFF__Int_32_BCC,
                                                                                                                                                                                                ()))) (s :: TmkTestBench),
                                      (trd3 :: (Bool,
                                                TmkSizedFIFOF___FIFOFF__Int_32_BCC,
                                                ()) -> ()) (tup :: (Bool,
                                                                    TmkSizedFIFOF___FIFOFF__Int_32_BCC,
                                                                    ())))))
;
y_upd__Void_mkTestBench :: (TmkSizedFIFOF___FIFOFF__Int_32_BCC -> (Bool,
                                                                  TmkSizedFIFOF___FIFOFF__Int_32_BCC,
                                                                  ())) -> TmkTestBench -> (Bool,
                                                                                          TmkTestBench,
                                                                                          ());
y_upd__Void_mkTestBench = (\(a :: TmkSizedFIFOF___FIFOFF__Int_32_BCC -> (Bool,
                                                                        TmkSizedFIFOF___FIFOFF__Int_32_BCC,
                                                                        ())) ->
                             (\(s :: TmkTestBench) ->
                                let {
                                  (tup :: (Bool,
                                           TmkSizedFIFOF___FIFOFF__Int_32_BCC,
                                           ())) = (a :: TmkSizedFIFOF___FIFOFF__Int_32_BCC -> (Bool,
                                                                                              TmkSizedFIFOF___FIFOFF__Int_32_BCC,
                                                                                              ())) ((mkTestBench_y :: TmkTestBench -> TmkSizedFIFOF___FIFOFF__Int_32_BCC) (s :: TmkTestBench)) ;
                                } in ((fst3 :: (Bool,
                                                TmkSizedFIFOF___FIFOFF__Int_32_BCC,
                                                ()) -> Bool) (tup :: (Bool,
                                                                      TmkSizedFIFOF___FIFOFF__Int_32_BCC,
                                                                      ())),
                                      (__mkTestBench_y_update :: TmkSizedFIFOF___FIFOFF__Int_32_BCC -> TmkTestBench -> TmkTestBench) ((snd3 :: (Bool,
                                                                                                                                             TmkSizedFIFOF___FIFOFF__Int_32_BCC,
                                                                                                                                             ()) -> TmkSizedFIFOF___FIFOFF__Int_32_BCC) (tup :: (Bool,
                                                                                                                                                                                                TmkSizedFIFOF___FIFOFF__Int_32_BCC,
                                                                                                                                                                                                ()))) (s :: TmkTestBench),
                                      (trd3 :: (Bool,
                                                TmkSizedFIFOF___FIFOFF__Int_32_BCC,
                                                ()) -> ()) (tup :: (Bool,
                                                                    TmkSizedFIFOF___FIFOFF__Int_32_BCC,
                                                                    ())))))
;
source_upd__Void_mkTestBench :: (((Reg Integer)) -> (Bool,
                                                 (Reg Integer),
                                                 ())) -> TmkTestBench -> (Bool, TmkTestBench, ());
source_upd__Void_mkTestBench = (\(a :: (Reg Integer) -> (Bool,
                                                       (Reg Integer),
                                                       ())) ->
                                  (\(s :: TmkTestBench) ->
                                     let {
                                       (tup :: (Bool,
                                                (Reg Integer),
                                                ())) = (a :: (Reg Integer) -> (Bool,
                                                                             (Reg Integer),
                                                                             ())) ((mkTestBench_source :: TmkTestBench -> (Reg Integer)) (s :: TmkTestBench)) ;
                                     } in ((fst3 :: (Bool, (Reg Integer), ()) -> Bool) (tup :: (Bool,
                                                                                              (Reg Integer),
                                                                                              ())),
                                           (__mkTestBench_source_update :: (Reg Integer) -> TmkTestBench -> TmkTestBench) ((snd3 :: (Bool,
                                                                                                                                 (Reg Integer),
                                                                                                                                 ()) -> (Reg Integer)) (tup :: (Bool,
                                                                                                                                                              (Reg Integer),
                                                                                                                                                              ()))) (s :: TmkTestBench),
                                           (trd3 :: (Bool, (Reg Integer), ()) -> ()) (tup :: (Bool,
                                                                                            (Reg Integer),
                                                                                            ())))))
;
z_upd__Void_mkTestBench :: (TmkSizedFIFOF___FIFOFF__Int_32_BCC -> (Bool,
                                                                  TmkSizedFIFOF___FIFOFF__Int_32_BCC,
                                                                  ())) -> TmkTestBench -> (Bool,
                                                                                          TmkTestBench,
                                                                                          ());
z_upd__Void_mkTestBench = (\(a :: TmkSizedFIFOF___FIFOFF__Int_32_BCC -> (Bool,
                                                                        TmkSizedFIFOF___FIFOFF__Int_32_BCC,
                                                                        ())) ->
                             (\(s :: TmkTestBench) ->
                                let {
                                  (tup :: (Bool,
                                           TmkSizedFIFOF___FIFOFF__Int_32_BCC,
                                           ())) = (a :: TmkSizedFIFOF___FIFOFF__Int_32_BCC -> (Bool,
                                                                                              TmkSizedFIFOF___FIFOFF__Int_32_BCC,
                                                                                              ())) ((mkTestBench_z :: TmkTestBench -> TmkSizedFIFOF___FIFOFF__Int_32_BCC) (s :: TmkTestBench)) ;
                                } in ((fst3 :: (Bool,
                                                TmkSizedFIFOF___FIFOFF__Int_32_BCC,
                                                ()) -> Bool) (tup :: (Bool,
                                                                      TmkSizedFIFOF___FIFOFF__Int_32_BCC,
                                                                      ())),
                                      (__mkTestBench_z_update :: TmkSizedFIFOF___FIFOFF__Int_32_BCC -> TmkTestBench -> TmkTestBench) ((snd3 :: (Bool,
                                                                                                                                             TmkSizedFIFOF___FIFOFF__Int_32_BCC,
                                                                                                                                             ()) -> TmkSizedFIFOF___FIFOFF__Int_32_BCC) (tup :: (Bool,
                                                                                                                                                                                                TmkSizedFIFOF___FIFOFF__Int_32_BCC,
                                                                                                                                                                                                ()))) (s :: TmkTestBench),
                                      (trd3 :: (Bool,
                                                TmkSizedFIFOF___FIFOFF__Int_32_BCC,
                                                ()) -> ()) (tup :: (Bool,
                                                                    TmkSizedFIFOF___FIFOFF__Int_32_BCC,
                                                                    ())))))
;
w_upd__Void_mkTestBench :: (TmkSizedFIFOF___FIFOFF__Int_32_BCC -> (Bool,
                                                                  TmkSizedFIFOF___FIFOFF__Int_32_BCC,
                                                                  ())) -> TmkTestBench -> (Bool,
                                                                                          TmkTestBench,
                                                                                          ());
w_upd__Void_mkTestBench = (\(a :: TmkSizedFIFOF___FIFOFF__Int_32_BCC -> (Bool,
                                                                        TmkSizedFIFOF___FIFOFF__Int_32_BCC,
                                                                        ())) ->
                             (\(s :: TmkTestBench) ->
                                let {
                                  (tup :: (Bool,
                                           TmkSizedFIFOF___FIFOFF__Int_32_BCC,
                                           ())) = (a :: TmkSizedFIFOF___FIFOFF__Int_32_BCC -> (Bool,
                                                                                              TmkSizedFIFOF___FIFOFF__Int_32_BCC,
                                                                                              ())) ((mkTestBench_w :: TmkTestBench -> TmkSizedFIFOF___FIFOFF__Int_32_BCC) (s :: TmkTestBench)) ;
                                } in ((fst3 :: (Bool,
                                                TmkSizedFIFOF___FIFOFF__Int_32_BCC,
                                                ()) -> Bool) (tup :: (Bool,
                                                                      TmkSizedFIFOF___FIFOFF__Int_32_BCC,
                                                                      ())),
                                      (__mkTestBench_w_update :: TmkSizedFIFOF___FIFOFF__Int_32_BCC -> TmkTestBench -> TmkTestBench) ((snd3 :: (Bool,
                                                                                                                                             TmkSizedFIFOF___FIFOFF__Int_32_BCC,
                                                                                                                                             ()) -> TmkSizedFIFOF___FIFOFF__Int_32_BCC) (tup :: (Bool,
                                                                                                                                                                                                TmkSizedFIFOF___FIFOFF__Int_32_BCC,
                                                                                                                                                                                                ()))) (s :: TmkTestBench),
                                      (trd3 :: (Bool,
                                                TmkSizedFIFOF___FIFOFF__Int_32_BCC,
                                                ()) -> ()) (tup :: (Bool,
                                                                    TmkSizedFIFOF___FIFOFF__Int_32_BCC,
                                                                    ())))))
;
sink_upd__Void_mkTestBench :: (((Reg Integer)) -> (Bool,
                                               (Reg Integer),
                                               ())) -> TmkTestBench -> (Bool, TmkTestBench, ());
sink_upd__Void_mkTestBench = (\(a :: (Reg Integer) -> (Bool,
                                                     (Reg Integer),
                                                     ())) ->
                                (\(s :: TmkTestBench) ->
                                   let {
                                     (tup :: (Bool, (Reg Integer), ())) = (a :: (Reg Integer) -> (Bool,
                                                                                              (Reg Integer),
                                                                                              ())) ((mkTestBench_sink :: TmkTestBench -> (Reg Integer)) (s :: TmkTestBench)) ;
                                   } in ((fst3 :: (Bool, (Reg Integer), ()) -> Bool) (tup :: (Bool,
                                                                                            (Reg Integer),
                                                                                            ())),
                                         (__mkTestBench_sink_update :: (Reg Integer) -> TmkTestBench -> TmkTestBench) ((snd3 :: (Bool,
                                                                                                                             (Reg Integer),
                                                                                                                             ()) -> (Reg Integer)) (tup :: (Bool,
                                                                                                                                                          (Reg Integer),
                                                                                                                                                          ()))) (s :: TmkTestBench),
                                         (trd3 :: (Bool, (Reg Integer), ()) -> ()) (tup :: (Bool,
                                                                                          (Reg Integer),
                                                                                          ())))))
;
comp_s__Void__Void_mkTestBench :: (TmkTestBench -> (Bool,
                                                   TmkTestBench,
                                                   ())) -> (() -> TmkTestBench -> (Bool,
                                                                                  TmkTestBench,
                                                                                  ())) -> TmkTestBench -> (Bool,
                                                                                                          TmkTestBench,
                                                                                                          ());
comp_s__Void__Void_mkTestBench = (\(a1 :: TmkTestBench -> (Bool,
                                                          TmkTestBench,
                                                          ())) ->
                                    (\(a2 :: () -> TmkTestBench -> (Bool, TmkTestBench, ())) ->
                                       (\(st :: TmkTestBench) ->
                                          let {
                                            (a1_tup :: (Bool,
                                                        TmkTestBench,
                                                        ())) = (a1 :: TmkTestBench -> (Bool,
                                                                                      TmkTestBench,
                                                                                      ())) (st :: TmkTestBench) ;
                                            (a1_p :: Bool) = (fst3 :: (Bool,
                                                                       TmkTestBench,
                                                                       ()) -> Bool) (a1_tup :: (Bool,
                                                                                                TmkTestBench,
                                                                                                ())) ;
                                            (a1_st :: TmkTestBench) = (snd3 :: (Bool,
                                                                               TmkTestBench,
                                                                               ()) -> TmkTestBench) (a1_tup :: (Bool,
                                                                                                               TmkTestBench,
                                                                                                               ())) ;
                                            (a1_rv :: ()) = (trd3 :: (Bool,
                                                                      TmkTestBench,
                                                                      ()) -> ()) (a1_tup :: (Bool,
                                                                                             TmkTestBench,
                                                                                             ())) ;
                                            (a2_tup :: (Bool,
                                                        TmkTestBench,
                                                        ())) = (a2 :: () -> TmkTestBench -> (Bool,
                                                                                            TmkTestBench,
                                                                                            ())) (a1_rv :: ()) (a1_st :: TmkTestBench) ;
                                            (a2_p :: Bool) = (fst3 :: (Bool,
                                                                       TmkTestBench,
                                                                       ()) -> Bool) (a2_tup :: (Bool,
                                                                                                TmkTestBench,
                                                                                                ())) ;
                                            (a2_st :: TmkTestBench) = (snd3 :: (Bool,
                                                                               TmkTestBench,
                                                                               ()) -> TmkTestBench) (a2_tup :: (Bool,
                                                                                                               TmkTestBench,
                                                                                                               ())) ;
                                            (a2_rv :: ()) = (trd3 :: (Bool,
                                                                      TmkTestBench,
                                                                      ()) -> ()) (a2_tup :: (Bool,
                                                                                             TmkTestBench,
                                                                                             ())) ;
                                          } in (((&&) :: Bool -> Bool -> Bool) (a1_p :: Bool) (a2_p :: Bool),
                                                (a2_st :: TmkTestBench),
                                                (a2_rv :: ())))))
;
comp_p__Void__Void_mkTestBench :: (TmkTestBench -> (Bool,
                                                   TmkTestBench,
                                                   ())) -> (() -> TmkTestBench -> (Bool,
                                                                                  TmkTestBench,
                                                                                  ())) -> TmkTestBench -> (Bool,
                                                                                                          TmkTestBench,
                                                                                                          ());
comp_p__Void__Void_mkTestBench = (\(a1 :: TmkTestBench -> (Bool,
                                                          TmkTestBench,
                                                          ())) ->
                                    (\(a2 :: () -> TmkTestBench -> (Bool, TmkTestBench, ())) ->
                                       (\(st :: TmkTestBench) ->
                                          let {
                                            (a1_tup :: (Bool,
                                                        TmkTestBench,
                                                        ())) = (a1 :: TmkTestBench -> (Bool,
                                                                                      TmkTestBench,
                                                                                      ())) (st :: TmkTestBench) ;
                                            (a1_p :: Bool) = (fst3 :: (Bool,
                                                                       TmkTestBench,
                                                                       ()) -> Bool) (a1_tup :: (Bool,
                                                                                                TmkTestBench,
                                                                                                ())) ;
                                            (a1_st :: TmkTestBench) = (snd3 :: (Bool,
                                                                               TmkTestBench,
                                                                               ()) -> TmkTestBench) (a1_tup :: (Bool,
                                                                                                               TmkTestBench,
                                                                                                               ())) ;
                                            (a1_rv :: ()) = (trd3 :: (Bool,
                                                                      TmkTestBench,
                                                                      ()) -> ()) (a1_tup :: (Bool,
                                                                                             TmkTestBench,
                                                                                             ())) ;
                                            (a2_tup :: (Bool,
                                                        TmkTestBench,
                                                        ())) = (a2 :: () -> TmkTestBench -> (Bool,
                                                                                            TmkTestBench,
                                                                                            ())) (a1_rv :: ()) (st :: TmkTestBench) ;
                                            (a2_p :: Bool) = (fst3 :: (Bool,
                                                                       TmkTestBench,
                                                                       ()) -> Bool) (a2_tup :: (Bool,
                                                                                                TmkTestBench,
                                                                                                ())) ;
                                            (a2_st :: TmkTestBench) = (snd3 :: (Bool,
                                                                               TmkTestBench,
                                                                               ()) -> TmkTestBench) (a2_tup :: (Bool,
                                                                                                               TmkTestBench,
                                                                                                               ())) ;
                                            (a2_rv :: ()) = (trd3 :: (Bool,
                                                                      TmkTestBench,
                                                                      ()) -> ()) (a2_tup :: (Bool,
                                                                                             TmkTestBench,
                                                                                             ())) ;
                                          } in (((&&) :: Bool -> Bool -> Bool) (a1_p :: Bool) (a2_p :: Bool),
                                                (merge_p_mkTestBench :: TmkTestBench -> TmkTestBench -> TmkTestBench) (a1_st :: TmkTestBench) (a2_st :: TmkTestBench),
                                                (a2_rv :: ())))))
;
d_mkTestBench :: TmkTestBench -> (Bool, TmkTestBench, ());
d_mkTestBench = (\(st :: TmkTestBench) ->
                   let {
                     (st :: TmkTestBench) = (mkTestBench_clear_dirty_bits :: TmkTestBench -> TmkTestBench) (st :: TmkTestBench) ;
                   } in (comp_p__Void__Void_mkTestBench :: (TmkTestBench -> (Bool,
                                                                            TmkTestBench,
                                                                            ())) -> (() -> TmkTestBench -> (Bool,
                                                                                                           TmkTestBench,
                                                                                                           ())) -> TmkTestBench -> (Bool,
                                                                                                                                   TmkTestBench,
                                                                                                                                   ())) ((\(st :: TmkTestBench) ->
                                                                                                                                            let {
                                                                                                                                              (gv :: Bool) = ((&&) :: Bool -> Bool -> Bool) ((_read_guard_mkReg__Reg__Int_32 :: (Reg Integer) -> Bool) ((mkTestBench_sink :: TmkTestBench -> (Reg Integer)) (st :: TmkTestBench))) (((&&) :: Bool -> Bool -> Bool) ((f_first_guard_mkSizedFIFOF___FIFOFF__Int_32_BCC :: TmkSizedFIFOF___FIFOFF__Int_32_BCC -> Bool) ((mkTestBench_z :: TmkTestBench -> TmkSizedFIFOF___FIFOFF__Int_32_BCC) (st :: TmkTestBench))) ((f_first_guard_mkSizedFIFOF___FIFOFF__Int_32_BCC :: TmkSizedFIFOF___FIFOFF__Int_32_BCC -> Bool) ((mkTestBench_w :: TmkTestBench -> TmkSizedFIFOF___FIFOFF__Int_32_BCC) (st :: TmkTestBench)))) ;
                                                                                                                                              (ov :: (Bool,
                                                                                                                                                      TmkTestBench,
                                                                                                                                                      ())) = (sink_upd__Void_mkTestBench :: ((Reg Integer) -> (Bool,
                                                                                                                                                                                                             (Reg Integer),
                                                                                                                                                                                                             ())) -> TmkTestBench -> (Bool,
                                                                                                                                                                                                                                     TmkTestBench,
                                                                                                                                                                                                                                     ())) ((_write_mkReg__Reg__Int_32 :: Integer -> (Reg Integer) -> (Bool,
                                                                                                                                                                                                                                                                                                    (Reg Integer),
                                                                                                                                                                                                                                                                                                    ())) (((+) :: Integer -> Integer -> Integer) (((+) :: Integer -> Integer -> Integer) ((_read_val_mkReg__Reg__Int_32 :: (Reg Integer) -> Integer) ((mkTestBench_sink :: TmkTestBench -> (Reg Integer)) (st :: TmkTestBench))) ((f_first_val_mkSizedFIFOF___FIFOFF__Int_32_BCC :: TmkSizedFIFOF___FIFOFF__Int_32_BCC -> Integer) ((mkTestBench_z :: TmkTestBench -> TmkSizedFIFOF___FIFOFF__Int_32_BCC) (st :: TmkTestBench)))) ((f_first_val_mkSizedFIFOF___FIFOFF__Int_32_BCC :: TmkSizedFIFOF___FIFOFF__Int_32_BCC -> Integer) ((mkTestBench_w :: TmkTestBench -> TmkSizedFIFOF___FIFOFF__Int_32_BCC) (st :: TmkTestBench))))) (st :: TmkTestBench) ;
                                                                                                                                            } in (((&&) :: Bool -> Bool -> Bool) (gv :: Bool) ((fst3 :: (Bool,
                                                                                                                                                                                                         TmkTestBench,
                                                                                                                                                                                                         ()) -> Bool) (ov :: (Bool,
                                                                                                                                                                                                                              TmkTestBench,
                                                                                                                                                                                                                              ()))),
                                                                                                                                                  (snd3 :: (Bool,
                                                                                                                                                            TmkTestBench,
                                                                                                                                                            ()) -> TmkTestBench) (ov :: (Bool,
                                                                                                                                                                                        TmkTestBench,
                                                                                                                                                                                        ())),
                                                                                                                                                  (trd3 :: (Bool,
                                                                                                                                                            TmkTestBench,
                                                                                                                                                            ()) -> ()) (ov :: (Bool,
                                                                                                                                                                               TmkTestBench,
                                                                                                                                                                               ()))))) ((\(_ :: ()) ->
                                                                                                                                                                                           (\(st :: TmkTestBench) ->
                                                                                                                                                                                              (comp_p__Void__Void_mkTestBench :: (TmkTestBench -> (Bool,
                                                                                                                                                                                                                                                  TmkTestBench,
                                                                                                                                                                                                                                                  ())) -> (() -> TmkTestBench -> (Bool,
                                                                                                                                                                                                                                                                                 TmkTestBench,
                                                                                                                                                                                                                                                                                 ())) -> TmkTestBench -> (Bool,
                                                                                                                                                                                                                                                                                                         TmkTestBench,
                                                                                                                                                                                                                                                                                                         ())) ((z_upd__Void_mkTestBench :: (TmkSizedFIFOF___FIFOFF__Int_32_BCC -> (Bool,
                                                                                                                                                                                                                                                                                                                                                                                  TmkSizedFIFOF___FIFOFF__Int_32_BCC,
                                                                                                                                                                                                                                                                                                                                                                                  ())) -> TmkTestBench -> (Bool,
                                                                                                                                                                                                                                                                                                                                                                                                          TmkTestBench,
                                                                                                                                                                                                                                                                                                                                                                                                          ())) (f_deq_mkSizedFIFOF___FIFOFF__Int_32_BCC :: TmkSizedFIFOF___FIFOFF__Int_32_BCC -> (Bool,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 TmkSizedFIFOF___FIFOFF__Int_32_BCC,

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           (\(st :: TmkTestBench) ->
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              (w_upd__Void_mkTestBench :: (TmkSizedFIFOF___FIFOFF__Int_32_BCC -> (Bool,
mkSizedFIFOF___FIFOFF__Int_32_BCC,
mkTestBench -> (Bool,
mkTestBench,
f_deq_mkSizedFIFOF___FIFOFF__Int_32_BCC :: TmkSizedFIFOF___FIFOFF__Int_32_BCC -> (Bool,
mkSizedFIFOF___FIFOFF__Int_32_BCC,
st :: TmkTestBench)))) (st :: TmkTestBench)))) (st :: TmkTestBench))
;
c_mkTestBench :: TmkTestBench -> (Bool, TmkTestBench, ());
c_mkTestBench = (\(st :: TmkTestBench) ->
                   let {
                     (st :: TmkTestBench) = (mkTestBench_clear_dirty_bits :: TmkTestBench -> TmkTestBench) (st :: TmkTestBench) ;
                   } in (comp_s__Void__Void_mkTestBench :: (TmkTestBench -> (Bool,
                                                                            TmkTestBench,
                                                                            ())) -> (() -> TmkTestBench -> (Bool,
                                                                                                           TmkTestBench,
                                                                                                           ())) -> TmkTestBench -> (Bool,
                                                                                                                                   TmkTestBench,
                                                                                                                                   ())) ((\(st :: TmkTestBench) ->
                                                                                                                                            let {
                                                                                                                                              (gv :: Bool) = (f_first_guard_mkSizedFIFOF___FIFOFF__Int_32_BCC :: TmkSizedFIFOF___FIFOFF__Int_32_BCC -> Bool) ((mkTestBench_y :: TmkTestBench -> TmkSizedFIFOF___FIFOFF__Int_32_BCC) (st :: TmkTestBench)) ;
                                                                                                                                              (ov :: (Bool,
                                                                                                                                                      TmkTestBench,
                                                                                                                                                      ())) = (w_upd__Void_mkTestBench :: (TmkSizedFIFOF___FIFOFF__Int_32_BCC -> (Bool,
                                                                                                                                                                                                                                TmkSizedFIFOF___FIFOFF__Int_32_BCC,
                                                                                                                                                                                                                                ())) -> TmkTestBench -> (Bool,
                                                                                                                                                                                                                                                        TmkTestBench,
                                                                                                                                                                                                                                                        ())) ((f_enq_mkSizedFIFOF___FIFOFF__Int_32_BCC :: Integer -> TmkSizedFIFOF___FIFOFF__Int_32_BCC -> (Bool,
                                                                                                                                                                                                                                                                                                                                                           TmkSizedFIFOF___FIFOFF__Int_32_BCC,
                                                                                                                                                                                                                                                                                                                                                           ())) (((+) :: Integer -> Integer -> Integer) ((f_first_val_mkSizedFIFOF___FIFOFF__Int_32_BCC :: TmkSizedFIFOF___FIFOFF__Int_32_BCC -> Integer) ((mkTestBench_y :: TmkTestBench -> TmkSizedFIFOF___FIFOFF__Int_32_BCC) (st :: TmkTestBench))) 1)) (st :: TmkTestBench) ;
                                                                                                                                            } in (((&&) :: Bool -> Bool -> Bool) (gv :: Bool) ((fst3 :: (Bool,
                                                                                                                                                                                                         TmkTestBench,
                                                                                                                                                                                                         ()) -> Bool) (ov :: (Bool,
                                                                                                                                                                                                                              TmkTestBench,
                                                                                                                                                                                                                              ()))),
                                                                                                                                                  (snd3 :: (Bool,
                                                                                                                                                            TmkTestBench,
                                                                                                                                                            ()) -> TmkTestBench) (ov :: (Bool,
                                                                                                                                                                                        TmkTestBench,
                                                                                                                                                                                        ())),
                                                                                                                                                  (trd3 :: (Bool,
                                                                                                                                                            TmkTestBench,
                                                                                                                                                            ()) -> ()) (ov :: (Bool,
                                                                                                                                                                               TmkTestBench,
                                                                                                                                                                               ()))))) ((\(_ :: ()) ->
                                                                                                                                                                                           (\(st :: TmkTestBench) ->
                                                                                                                                                                                              (y_upd__Void_mkTestBench :: (TmkSizedFIFOF___FIFOFF__Int_32_BCC -> (Bool,
                                                                                                                                                                                                                                                                 TmkSizedFIFOF___FIFOFF__Int_32_BCC,
                                                                                                                                                                                                                                                                 ())) -> TmkTestBench -> (Bool,
                                                                                                                                                                                                                                                                                         TmkTestBench,
                                                                                                                                                                                                                                                                                         ())) (f_deq_mkSizedFIFOF___FIFOFF__Int_32_BCC :: TmkSizedFIFOF___FIFOFF__Int_32_BCC -> (Bool,
                                                                                                                                                                                                                                                                                                                                                                                TmkSizedFIFOF___FIFOFF__Int_32_BCC,
                                                                                                                                                                                                                                                                                                                                                                                ())) (st :: TmkTestBench)))) (st :: TmkTestBench))
;
b_mkTestBench :: TmkTestBench -> (Bool, TmkTestBench, ());
b_mkTestBench = (\(st :: TmkTestBench) ->
                   let {
                     (st :: TmkTestBench) = (mkTestBench_clear_dirty_bits :: TmkTestBench -> TmkTestBench) (st :: TmkTestBench) ;
                   } in (comp_p__Void__Void_mkTestBench :: (TmkTestBench -> (Bool,
                                                                            TmkTestBench,
                                                                            ())) -> (() -> TmkTestBench -> (Bool,
                                                                                                           TmkTestBench,
                                                                                                           ())) -> TmkTestBench -> (Bool,
                                                                                                                                   TmkTestBench,
                                                                                                                                   ())) ((\(st :: TmkTestBench) ->
                                                                                                                                            let {
                                                                                                                                              (gv :: Bool) = (f_first_guard_mkSizedFIFOF___FIFOFF__Int_32_BCC :: TmkSizedFIFOF___FIFOFF__Int_32_BCC -> Bool) ((mkTestBench_x :: TmkTestBench -> TmkSizedFIFOF___FIFOFF__Int_32_BCC) (st :: TmkTestBench)) ;
                                                                                                                                              (ov :: (Bool,
                                                                                                                                                      TmkTestBench,
                                                                                                                                                      ())) = (z_upd__Void_mkTestBench :: (TmkSizedFIFOF___FIFOFF__Int_32_BCC -> (Bool,
                                                                                                                                                                                                                                TmkSizedFIFOF___FIFOFF__Int_32_BCC,
                                                                                                                                                                                                                                ())) -> TmkTestBench -> (Bool,
                                                                                                                                                                                                                                                        TmkTestBench,
                                                                                                                                                                                                                                                        ())) ((f_enq_mkSizedFIFOF___FIFOFF__Int_32_BCC :: Integer -> TmkSizedFIFOF___FIFOFF__Int_32_BCC -> (Bool,
                                                                                                                                                                                                                                                                                                                                                           TmkSizedFIFOF___FIFOFF__Int_32_BCC,
                                                                                                                                                                                                                                                                                                                                                           ())) (((+) :: Integer -> Integer -> Integer) ((f_first_val_mkSizedFIFOF___FIFOFF__Int_32_BCC :: TmkSizedFIFOF___FIFOFF__Int_32_BCC -> Integer) ((mkTestBench_x :: TmkTestBench -> TmkSizedFIFOF___FIFOFF__Int_32_BCC) (st :: TmkTestBench))) 1)) (st :: TmkTestBench) ;
                                                                                                                                            } in (((&&) :: Bool -> Bool -> Bool) (gv :: Bool) ((fst3 :: (Bool,
                                                                                                                                                                                                         TmkTestBench,
                                                                                                                                                                                                         ()) -> Bool) (ov :: (Bool,
                                                                                                                                                                                                                              TmkTestBench,
                                                                                                                                                                                                                              ()))),
                                                                                                                                                  (snd3 :: (Bool,
                                                                                                                                                            TmkTestBench,
                                                                                                                                                            ()) -> TmkTestBench) (ov :: (Bool,
                                                                                                                                                                                        TmkTestBench,
                                                                                                                                                                                        ())),
                                                                                                                                                  (trd3 :: (Bool,
                                                                                                                                                            TmkTestBench,
                                                                                                                                                            ()) -> ()) (ov :: (Bool,
                                                                                                                                                                               TmkTestBench,
                                                                                                                                                                               ()))))) ((\(_ :: ()) ->
                                                                                                                                                                                           (\(st :: TmkTestBench) ->
                                                                                                                                                                                              (x_upd__Void_mkTestBench :: (TmkSizedFIFOF___FIFOFF__Int_32_BCC -> (Bool,
                                                                                                                                                                                                                                                                 TmkSizedFIFOF___FIFOFF__Int_32_BCC,
                                                                                                                                                                                                                                                                 ())) -> TmkTestBench -> (Bool,
                                                                                                                                                                                                                                                                                         TmkTestBench,
                                                                                                                                                                                                                                                                                         ())) (f_deq_mkSizedFIFOF___FIFOFF__Int_32_BCC :: TmkSizedFIFOF___FIFOFF__Int_32_BCC -> (Bool,
                                                                                                                                                                                                                                                                                                                                                                                TmkSizedFIFOF___FIFOFF__Int_32_BCC,
                                                                                                                                                                                                                                                                                                                                                                                ())) (st :: TmkTestBench)))) (st :: TmkTestBench))
;
a_mkTestBench :: TmkTestBench -> (Bool, TmkTestBench, ());
a_mkTestBench = (\(st :: TmkTestBench) ->
                   let {
                     (st :: TmkTestBench) = (mkTestBench_clear_dirty_bits :: TmkTestBench -> TmkTestBench) (st :: TmkTestBench) ;
                   } in (comp_p__Void__Void_mkTestBench :: (TmkTestBench -> (Bool,
                                                                            TmkTestBench,
                                                                            ())) -> (() -> TmkTestBench -> (Bool,
                                                                                                           TmkTestBench,
                                                                                                           ())) -> TmkTestBench -> (Bool,
                                                                                                                                   TmkTestBench,
                                                                                                                                   ())) ((\(st :: TmkTestBench) ->
                                                                                                                                            let {
                                                                                                                                              (gv :: Bool) = (_read_guard_mkReg__Reg__Int_32 :: (Reg Integer) -> Bool) ((mkTestBench_source :: TmkTestBench -> (Reg Integer)) (st :: TmkTestBench)) ;
                                                                                                                                              (ov :: (Bool,
                                                                                                                                                      TmkTestBench,
                                                                                                                                                      ())) = (x_upd__Void_mkTestBench :: (TmkSizedFIFOF___FIFOFF__Int_32_BCC -> (Bool,
                                                                                                                                                                                                                                TmkSizedFIFOF___FIFOFF__Int_32_BCC,
                                                                                                                                                                                                                                ())) -> TmkTestBench -> (Bool,
                                                                                                                                                                                                                                                        TmkTestBench,
                                                                                                                                                                                                                                                        ())) ((f_enq_mkSizedFIFOF___FIFOFF__Int_32_BCC :: Integer -> TmkSizedFIFOF___FIFOFF__Int_32_BCC -> (Bool,
                                                                                                                                                                                                                                                                                                                                                           TmkSizedFIFOF___FIFOFF__Int_32_BCC,
                                                                                                                                                                                                                                                                                                                                                           ())) ((_read_val_mkReg__Reg__Int_32 :: (Reg Integer) -> Integer) ((mkTestBench_source :: TmkTestBench -> (Reg Integer)) (st :: TmkTestBench)))) (st :: TmkTestBench) ;
                                                                                                                                            } in (((&&) :: Bool -> Bool -> Bool) (gv :: Bool) ((fst3 :: (Bool,
                                                                                                                                                                                                         TmkTestBench,
                                                                                                                                                                                                         ()) -> Bool) (ov :: (Bool,
                                                                                                                                                                                                                              TmkTestBench,
                                                                                                                                                                                                                              ()))),
                                                                                                                                                  (snd3 :: (Bool,
                                                                                                                                                            TmkTestBench,
                                                                                                                                                            ()) -> TmkTestBench) (ov :: (Bool,
                                                                                                                                                                                        TmkTestBench,
                                                                                                                                                                                        ())),
                                                                                                                                                  (trd3 :: (Bool,
                                                                                                                                                            TmkTestBench,
                                                                                                                                                            ()) -> ()) (ov :: (Bool,
                                                                                                                                                                               TmkTestBench,
                                                                                                                                                                               ()))))) ((\(_ :: ()) ->
                                                                                                                                                                                           (\(st :: TmkTestBench) ->
                                                                                                                                                                                              (comp_p__Void__Void_mkTestBench :: (TmkTestBench -> (Bool,
                                                                                                                                                                                                                                                  TmkTestBench,
                                                                                                                                                                                                                                                  ())) -> (() -> TmkTestBench -> (Bool,
                                                                                                                                                                                                                                                                                 TmkTestBench,
                                                                                                                                                                                                                                                                                 ())) -> TmkTestBench -> (Bool,
                                                                                                                                                                                                                                                                                                         TmkTestBench,
                                                                                                                                                                                                                                                                                                         ())) ((\(st :: TmkTestBench) ->
                                                                                                                                                                                                                                                                                                                  let {
                                                                                                                                                                                                                                                                                                                    (gv :: Bool) = (_read_guard_mkReg__Reg__Int_32 :: (Reg Integer) -> Bool) ((mkTestBench_source :: TmkTestBench -> (Reg Integer)) (st :: TmkTestBench)) ;
                                                                                                                                                                                                                                                                                                                    (ov :: (Bool,
                                                                                                                                                                                                                                                                                                                            TmkTestBench,
                                                                                                                                                                                                                                                                                                                            ())) = (y_upd__Void_mkTestBench :: (TmkSizedFIFOF___FIFOFF__Int_32_BCC -> (Bool,
                                                                                                                                                                                                                                                                                                                                                                                                      TmkSizedFIFOF___FIFOFF__Int_32_BCC,
                                                                                                                                                                                                                                                                                                                                                                                                      ())) -> TmkTestBench -> (Bool,
                                                                                                                                                                                                                                                                                                                                                                                                                              TmkTestBench,
                                                                                                                                                                                                                                                                                                                                                                                                                              ())) ((f_enq_mkSizedFIFOF___FIFOFF__Int_32_BCC :: Integer -> TmkSizedFIFOF___FIFOFF__Int_32_BCC -> (Bool,
mkSizedFIFOF___FIFOFF__Int_32_BCC,
read_val_mkReg__Reg__Int_32 :: (Reg Integer) -> Integer) ((mkTestBench_source :: TmkTestBench -> (Reg Integer)) (st :: TmkTestBench)))) (st :: TmkTestBench) ;
                                                                                                                                                                                                                                                                                                                  } in (((&&) :: Bool -> Bool -> Bool) (gv :: Bool) ((fst3 :: (Bool,
                                                                                                                                                                                                                                                                                                                                                                               TmkTestBench,
                                                                                                                                                                                                                                                                                                                                                                               ()) -> Bool) (ov :: (Bool,
                                                                                                                                                                                                                                                                                                                                                                                                    TmkTestBench,
                                                                                                                                                                                                                                                                                                                                                                                                    ()))),
                                                                                                                                                                                                                                                                                                                        (snd3 :: (Bool,
                                                                                                                                                                                                                                                                                                                                  TmkTestBench,
                                                                                                                                                                                                                                                                                                                                  ()) -> TmkTestBench) (ov :: (Bool,
                                                                                                                                                                                                                                                                                                                                                              TmkTestBench,
                                                                                                                                                                                                                                                                                                                                                              ())),
                                                                                                                                                                                                                                                                                                                        (trd3 :: (Bool,
                                                                                                                                                                                                                                                                                                                                  TmkTestBench,
                                                                                                                                                                                                                                                                                                                                  ()) -> ()) (ov :: (Bool,
                                                                                                                                                                                                                                                                                                                                                     TmkTestBench,
                                                                                                                                                                                                                                                                                                                                                     ()))))) ((\(_ :: ()) ->
                                                                                                                                                                                                                                                                                                                                                                 (\(st :: TmkTestBench) ->
                                                                                                                                                                                                                                                                                                                                                                    let {
                                                                                                                                                                                                                                                                                                                                                                      (st :: TmkTestBench) = (st :: TmkTestBench) ;
                                                                                                                                                                                                                                                                                                                                                                      (gv :: Bool) = (_read_guard_mkReg__Reg__Int_32 :: (Reg Integer) -> Bool) ((mkTestBench_source :: TmkTestBench -> (Reg Integer)) (st :: TmkTestBench)) ;
                                                                                                                                                                                                                                                                                                                                                                      (ov :: (Bool,
                                                                                                                                                                                                                                                                                                                                                                              TmkTestBench,
                                                                                                                                                                                                                                                                                                                                                                              ())) = (source_upd__Void_mkTestBench :: ((Reg Integer) -> (Bool,
                                                                                                                                                                                                                                                                                                                                                                                                                                       (Reg Integer),
                                                                                                                                                                                                                                                                                                                                                                                                                                       ())) -> TmkTestBench -> (Bool,
                                                                                                                                                                                                                                                                                                                                                                                                                                                               TmkTestBench,
                                                                                                                                                                                                                                                                                                                                                                                                                                                               ())) ((_write_mkReg__Reg__Int_32 :: Integer -> (Reg Integer) -> (Bool,
eg Integer),
nteger -> Integer -> Integer) ((_read_val_mkReg__Reg__Int_32 :: (Reg Integer) -> Integer) ((mkTestBench_source :: TmkTestBench -> (Reg Integer)) (st :: TmkTestBench))) 1)) (st :: TmkTestBench) ;
                                                                                                                                                                                                                                                                                                                                                                    } in (((&&) :: Bool -> Bool -> Bool) (gv :: Bool) ((fst3 :: (Bool,
                                                                                                                                                                                                                                                                                                                                                                                                                                 TmkTestBench,
                                                                                                                                                                                                                                                                                                                                                                                                                                 ()) -> Bool) (ov :: (Bool,
                                                                                                                                                                                                                                                                                                                                                                                                                                                      TmkTestBench,
                                                                                                                                                                                                                                                                                                                                                                                                                                                      ()))),
                                                                                                                                                                                                                                                                                                                                                                          (snd3 :: (Bool,
                                                                                                                                                                                                                                                                                                                                                                                    TmkTestBench,
                                                                                                                                                                                                                                                                                                                                                                                    ()) -> TmkTestBench) (ov :: (Bool,
                                                                                                                                                                                                                                                                                                                                                                                                                TmkTestBench,
                                                                                                                                                                                                                                                                                                                                                                                                                ())),
                                                                                                                                                                                                                                                                                                                                                                          (trd3 :: (Bool,
                                                                                                                                                                                                                                                                                                                                                                                    TmkTestBench,
                                                                                                                                                                                                                                                                                                                                                                                    ()) -> ()) (ov :: (Bool,
                                                                                                                                                                                                                                                                                                                                                                                                       TmkTestBench,
                                                                                                                                                                                                                                                                                                                                                                                                       ())))))) (st :: TmkTestBench)))) (st :: TmkTestBench))
;
main :: Query (Answer ());
main = do {
         s_equiv0_0 <- (free :: Query (Bool,
                                                                    TmkTestBench,
                                                                    ()));
         s_equiv0_1 <- (return :: (Bool,
                                                                TmkTestBench,
                                                                ()) -> Query (Bool,
                                                                              TmkTestBench,
                                                                              ())) (let {
                                                                                      (tup :: (Bool,
                                                                                               TmkTestBench,
                                                                                               ())) = (d_mkTestBench :: TmkTestBench -> (Bool,
                                                                                                                                        TmkTestBench,
                                                                                                                                        ())) ((snd3 :: (Bool,
                                                                                                                                                        TmkTestBench,
                                                                                                                                                        ()) -> TmkTestBench) (s_equiv0_0 :: (Bool,
                                                                                                                                                                                            TmkTestBench,
                                                                                                                                                                                            ()))) ;
                                                                                    } in (((&&) :: Bool -> Bool -> Bool) ((fst3 :: (Bool,
                                                                                                                                    TmkTestBench,
                                                                                                                                    ()) -> Bool) (s_equiv0_0 :: (Bool,
                                                                                                                                                                 TmkTestBench,
                                                                                                                                                                 ()))) ((fst3 :: (Bool,
                                                                                                                                                                                  TmkTestBench,
                                                                                                                                                                                  ()) -> Bool) (tup :: (Bool,
                                                                                                                                                                                                        TmkTestBench,
                                                                                                                                                                                                        ()))),
                                                                                          (snd3 :: (Bool,
                                                                                                    TmkTestBench,
                                                                                                    ()) -> TmkTestBench) (tup :: (Bool,
                                                                                                                                 TmkTestBench,
                                                                                                                                 ())),
                                                                                          (trd3 :: (Bool,
                                                                                                    TmkTestBench,
                                                                                                    ()) -> ()) (tup :: (Bool,
                                                                                                                        TmkTestBench,
                                                                                                                        ()))));
         s_equiv0_2 <- (return :: (Bool,
                                                                TmkTestBench,
                                                                ()) -> Query (Bool,
                                                                              TmkTestBench,
                                                                              ())) (let {
                                                                                      (tup :: (Bool,
                                                                                               TmkTestBench,
                                                                                               ())) = (c_mkTestBench :: TmkTestBench -> (Bool,
                                                                                                                                        TmkTestBench,
                                                                                                                                        ())) ((snd3 :: (Bool,
                                                                                                                                                        TmkTestBench,
                                                                                                                                                        ()) -> TmkTestBench) (s_equiv0_1 :: (Bool,
                                                                                                                                                                                            TmkTestBench,
                                                                                                                                                                                            ()))) ;
                                                                                    } in (((&&) :: Bool -> Bool -> Bool) ((fst3 :: (Bool,
                                                                                                                                    TmkTestBench,
                                                                                                                                    ()) -> Bool) (s_equiv0_1 :: (Bool,
                                                                                                                                                                 TmkTestBench,
                                                                                                                                                                 ()))) ((fst3 :: (Bool,
                                                                                                                                                                                  TmkTestBench,
                                                                                                                                                                                  ()) -> Bool) (tup :: (Bool,
                                                                                                                                                                                                        TmkTestBench,
                                                                                                                                                                                                        ()))),
                                                                                          (snd3 :: (Bool,
                                                                                                    TmkTestBench,
                                                                                                    ()) -> TmkTestBench) (tup :: (Bool,
                                                                                                                                 TmkTestBench,
                                                                                                                                 ())),
                                                                                          (trd3 :: (Bool,
                                                                                                    TmkTestBench,
                                                                                                    ()) -> ()) (tup :: (Bool,
                                                                                                                        TmkTestBench,
                                                                                                                        ()))));
         s_equiv1_0 <- (free :: Query (Bool,
                                                                    TmkTestBench,
                                                                    ()));
         s_equiv1_1 <- (return :: (Bool,
                                                                TmkTestBench,
                                                                ()) -> Query (Bool,
                                                                              TmkTestBench,
                                                                              ())) (let {
                                                                                      (tup :: (Bool,
                                                                                               TmkTestBench,
                                                                                               ())) = (c_mkTestBench :: TmkTestBench -> (Bool,
                                                                                                                                        TmkTestBench,
                                                                                                                                        ())) ((snd3 :: (Bool,
                                                                                                                                                        TmkTestBench,
                                                                                                                                                        ()) -> TmkTestBench) (s_equiv1_0 :: (Bool,
                                                                                                                                                                                            TmkTestBench,
                                                                                                                                                                                            ()))) ;
                                                                                    } in (((&&) :: Bool -> Bool -> Bool) ((fst3 :: (Bool,
                                                                                                                                    TmkTestBench,
                                                                                                                                    ()) -> Bool) (s_equiv1_0 :: (Bool,
                                                                                                                                                                 TmkTestBench,
                                                                                                                                                                 ()))) ((fst3 :: (Bool,
                                                                                                                                                                                  TmkTestBench,
                                                                                                                                                                                  ()) -> Bool) (tup :: (Bool,
                                                                                                                                                                                                        TmkTestBench,
                                                                                                                                                                                                        ()))),
                                                                                          (snd3 :: (Bool,
                                                                                                    TmkTestBench,
                                                                                                    ()) -> TmkTestBench) (tup :: (Bool,
                                                                                                                                 TmkTestBench,
                                                                                                                                 ())),
                                                                                          (trd3 :: (Bool,
                                                                                                    TmkTestBench,
                                                                                                    ()) -> ()) (tup :: (Bool,
                                                                                                                        TmkTestBench,
                                                                                                                        ()))));
         s_equiv1_2 <- (return :: (Bool,
                                                                TmkTestBench,
                                                                ()) -> Query (Bool,
                                                                              TmkTestBench,
                                                                              ())) (let {
                                                                                      (tup :: (Bool,
                                                                                               TmkTestBench,
                                                                                               ())) = (d_mkTestBench :: TmkTestBench -> (Bool,
                                                                                                                                        TmkTestBench,
                                                                                                                                        ())) ((snd3 :: (Bool,
                                                                                                                                                        TmkTestBench,
                                                                                                                                                        ()) -> TmkTestBench) (s_equiv1_1 :: (Bool,
                                                                                                                                                                                            TmkTestBench,
                                                                                                                                                                                            ()))) ;
                                                                                    } in (((&&) :: Bool -> Bool -> Bool) ((fst3 :: (Bool,
                                                                                                                                    TmkTestBench,
                                                                                                                                    ()) -> Bool) (s_equiv1_1 :: (Bool,
                                                                                                                                                                 TmkTestBench,
                                                                                                                                                                 ()))) ((fst3 :: (Bool,
                                                                                                                                                                                  TmkTestBench,
                                                                                                                                                                                  ()) -> Bool) (tup :: (Bool,
                                                                                                                                                                                                        TmkTestBench,
                                                                                                                                                                                                        ()))),
                                                                                          (snd3 :: (Bool,
                                                                                                    TmkTestBench,
                                                                                                    ()) -> TmkTestBench) (tup :: (Bool,
                                                                                                                                 TmkTestBench,
                                                                                                                                 ())),
                                                                                          (trd3 :: (Bool,
                                                                                                    TmkTestBench,
                                                                                                    ()) -> ()) (tup :: (Bool,
                                                                                                                        TmkTestBench,
                                                                                                                        ()))));
         (assert :: Bool -> Query ()) (True :: Bool);
         (assert :: Bool -> Query ()) ((mkTestBench_dimension :: TmkTestBench -> TmkTestBench -> Bool) (mkTestBench_ctor :: TmkTestBench) ((snd3 :: (Bool,
                                                                                                                                                  TmkTestBench,
                                                                                                                                                  ()) -> TmkTestBench) (s_equiv0_0 :: (Bool,
                                                                                                                                                                                      TmkTestBench,
                                                                                                                                                                                      ()))));
         (assert :: Bool -> Query ()) ((fst3 :: (Bool,
                                                 TmkTestBench,
                                                 ()) -> Bool) (s_equiv0_0 :: (Bool,
                                                                              TmkTestBench,
                                                                              ())));
         (assert :: Bool -> Query ()) (True :: Bool);
         (assert :: Bool -> Query ()) ((mkTestBench_dimension :: TmkTestBench -> TmkTestBench -> Bool) (mkTestBench_ctor :: TmkTestBench) ((snd3 :: (Bool,
                                                                                                                                                  TmkTestBench,
                                                                                                                                                  ()) -> TmkTestBench) (s_equiv1_0 :: (Bool,
                                                                                                                                                                                      TmkTestBench,
                                                                                                                                                                                      ()))));
         (assert :: Bool -> Query ()) ((fst3 :: (Bool,
                                                 TmkTestBench,
                                                 ()) -> Bool) (s_equiv1_0 :: (Bool,
                                                                              TmkTestBench,
                                                                              ())));
         (assert :: Bool -> Query ()) (((==) :: (Bool,
                                                 TmkTestBench,
                                                 ()) -> (Bool,
                                                         TmkTestBench,
                                                         ()) -> Bool) (s_equiv0_0 :: (Bool,
                                                                                      TmkTestBench,
                                                                                      ())) (s_equiv1_0 :: (Bool,
                                                                                                           TmkTestBench,
                                                                                                           ())));
         (assert :: Bool -> Query ()) (((&&) :: Bool -> Bool -> Bool) ((fst3 :: (Bool,
                                                                                 TmkTestBench,
                                                                                 ()) -> Bool) (s_equiv0_2 :: (Bool,
                                                                                                              TmkTestBench,
                                                                                                              ()))) (((||) :: Bool -> Bool -> Bool) ((not :: Bool -> Bool) ((fst3 :: (Bool,
                                                                                                                                                                                      TmkTestBench,
                                                                                                                                                                                      ()) -> Bool) (s_equiv1_2 :: (Bool,
                                                                                                                                                                                                                   TmkTestBench,
                                                                                                                                                                                                                   ())))) ((not :: Bool -> Bool) ((mkTestBench_eq :: TmkTestBench -> TmkTestBench -> Bool) ((snd3 :: (Bool,
                                                                                                                                                                                                                                                                                                                    TmkTestBench,
                                                                                                                                                                                                                                                                                                                    ()) -> TmkTestBench) (s_equiv0_2 :: (Bool,
                                                                                                                                                                                                                                                                                                                                                        TmkTestBench,
                                                                                                                                                                                                                                                                                                                                                        ()))) ((snd3 :: (Bool,
                                                                                                                                                                                                                                                                                                                                                                         TmkTestBench,
                                                                                                                                                                                                                                                                                                                                                                         ()) -> TmkTestBench) (s_equiv1_2 :: (Bool,
                                                                                                                                                                                                                                                                                                                                                                                                             TmkTestBench,
                                                                                                                                                                                                                                                                                                                                                                                                             ())))))));
         (query :: () -> Query (Answer ())) (() :: ());
       }
}
