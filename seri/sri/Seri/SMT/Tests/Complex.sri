
module Seri.SMT.Tests.Complex where

import Prelude
import Seri.SMT.SMT
import Seri.IO.IO
import Seri.IO.SMT

data Foo = Bar Integer
         | Sludge Bool
    deriving (Free)

instance Show Foo where
    show (Bar i) = "Bar " ++ show i
    show (Sludge b) = "Sludge " ++ show b

defoo :: Foo -> Integer
defoo (Bar x) = x
defoo (Sludge b) = if b then 1 else 0

foo :: Integer -> Integer
foo x = x + 1

scopedfail :: Query (Answer Integer)
scopedfail = do
    x <- free
    assert(x < x)
    query x

qmain :: Query (Answer (Bool, Integer, Bool, Foo))
qmain = do
    b <- free
    assert b

    x <- free
    assert ((if x < 0 then x else foo x) == 4)

    q <- queryS scopedfail
    sf <- case q of
            Satisfiable _ -> return True
            _ -> return False

    f <- free
    assert (2 == defoo f)

    query (b, x, sf, f)

main :: IO ()
main = do
    putStr "yices1..."
    r1 <- runYices1 (Just "build/test/Complex.yices1.dbg") qmain
    putStrLn (show r1)

    putStr "yices2..."
    r2 <- runYices2 (Just "build/test/Complex.yices2.dbg") qmain
    putStrLn (show r2)
