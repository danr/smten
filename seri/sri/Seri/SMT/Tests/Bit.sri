
module Seri.SMT.Tests.Bit where

import Prelude
import Seri.Bit
import Seri.SMT.SMT

test :: String -> Bool -> Query ()
test nm True = return ()
test nm False = error ("Test failed: " ++ nm)

qtest :: Query ()
qtest = do
    a <- free
    assert (a == 0)
    ra <- query (a :: Bit #5)
    test "bit.simple" (ra == Satisfiable 0)

    b <- free
    c <- free
    assert (b == c)
    assert (c == 5)
    rbc <- query (b :: Bit #5, c :: Bit #5)
    test "bit.eq" (rbc == Satisfiable (5, 5))

    d <- free
    assert ((d + 3) == 1)
    rd <- query (d :: Bit #3)
    test "bit.add" (rd == Satisfiable 6)

    e <- free
    assert ((e - 3) == 6)
    re <- query (e :: Bit #3)
    test "bit.sub" (re == Satisfiable 1)

    f <- free
    assert (bv_not f == 0x15)
    rf <- query (f :: Bit #5)
    test "bit.not" (rf == Satisfiable 0x0A)

    g <- free
    assert (bv_and g 0xA == 0x0)
    assert (bv_or g 0xA == 0xF)
    rg <- query (g :: Bit #4)
    test "bit.and" (rg == Satisfiable 0x5)

    h <- free
    assert (bv_concat (0x5 :: Bit #3) h == 0x17)
    rh <- query (h :: Bit #2)
    test "bit.concat" (rh == Satisfiable 3)

    i <- free
    assert (bv_shl (0x15 :: Bit #8) i == 0xA8)
    ri <- query (i :: Bit #8)
    test "bit.lsh" (ri == Satisfiable 3)


main :: IO ()
main = do
    runYices1 (Just "build/test/Bit.yices1.dbg") qtest
    runYices2 (Just "build/test/Bit.yices2.dbg") qtest
    runSTP (Just "build/test/Bit.stp.dbg") qtest
    putStrLn "BIT PASSED"

