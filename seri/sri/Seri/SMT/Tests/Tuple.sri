
module Seri.SMT.Tests.Tuple where

import Prelude
import Seri.SMT.SMT
import Seri.IO.IO
import Seri.IO.SMT

tupfun :: (Integer, Bool) -> (Bool, Bool)
tupfun (i, b) = (i < 2, not b)

choose :: Bool -> (Integer, Integer)
choose True = (1, 3)
choose False = (2, 4)

qmain :: Query (Answer ((Integer, Bool), Integer))
qmain = do
    t1 <- free
    assert (fst (tupfun t1))

    p <- free
    let x = choose p
    assert (fst x == 1)
    query (t1, snd x)

main :: IO ()
main = do
    putStr "yices1..."
    r1 <- runYices1 (Just "build/test/Tuple.yices1.dbg") qmain
    putStrLn (show r1)

    putStr "yices2..."
    r2 <- runYices2 (Just "build/test/Tuple.yices2.dbg") qmain
    putStrLn (show r2)
