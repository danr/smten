
module Seri.SMT.Tests.Scoped where

import Prelude
import Seri.SMT.SMT

test :: [Char] -> Bool -> Query ()
test nm True = return ()
test nm False = error ("Test failed: " ++ nm)

qtest :: Query ()
qtest = do
    r <- queryS $ do
        assert False
        query ()
    test "scoped.unsat" (r == Unsatisfiable)

    a <- free
    assert a
    ra <- query a
    test "scoped.nowsat" (ra == Satisfiable True)

    b <- free
    c <- free
    assert (b /= c)
    rbc <- query (b, c)
    test "scoped.prep" $
        case rbc of
            Satisfiable (vb, vc) -> vb /= vc
            _ -> False

    rbc1 <- queryS $ do
        assert b
        query (b, c)
    test "scoped.s1" (rbc1 == Satisfiable (True, False))

    rbc2 <- queryS $ do
        assert c
        query (b, c)
    test "scoped.s2" (rbc2 == Satisfiable (False, True))
    
main :: IO ()
main = do
    runYices1 (Just "build/test/Scoped.yices1.dbg") qtest
    runYices2 (Just "build/test/Scoped.yices2.dbg") qtest
    runSTP (Just "build/test/Scoped.stp.dbg") qtest

