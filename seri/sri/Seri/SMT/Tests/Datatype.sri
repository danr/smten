
module Seri.SMT.Tests.Datatype where

import Prelude
import Seri.SMT.SMT

data MyEnum = E1 | E2 | E3 | E4
    deriving (Eq, Free)

rotateenum :: MyEnum -> MyEnum
rotateenum E1 = E2
rotateenum E2 = E1
rotateenum E3 = E4
rotateenum _ = E3

data MyStruct = MyStruct MyEnum Bool
    deriving (Eq, Free)

changestruct :: MyStruct -> MyStruct
changestruct (MyStruct e True) = MyStruct (rotateenum e) False
changestruct (MyStruct e _) = MyStruct e True

data MyMix = Mix1 Bool Bool
           | Mix2 Bool
    deriving (Eq, Free)

mixval :: MyMix -> MyEnum
mixval (Mix1 True _) = E1
mixval (Mix1 _ _) = E2
mixval (Mix2 True) = E3
mixval _ = E4

test :: String -> Bool -> Query ()
test nm True = return ()
test nm _ = error ("Test failed: " ++ nm)

qtest :: Query ()
qtest = do
    a <- free
    assert (rotateenum a == E3)
    ra <- query a
    test "datatype.enum" (ra == Satisfiable E4)

    b <- free
    assert (changestruct b == MyStruct E2 False)
    rb <- query b
    test "datatype.struct" (rb == Satisfiable (MyStruct E1 True))
    
    c <- free
    assert (mixval c == E3)
    rc <- query c
    test "datatype.mix" (rc == Satisfiable (Mix2 True))

    d <- free
    assert (case (let v = d || d
                  in if v then E1 else E2) of
               E1 -> False
               E2 -> True
             )
    rd <- query d
    test "datetype.caseoflet" (rd == Satisfiable False)

main :: IO ()
main = do
    runYices1 (Just "build/test/Datatype.yices1.dbg") qtest
    runYices2 (Just "build/test/Datatype.yices2.dbg") qtest
    runSTP (Just "build/test/Datatype.stp.dbg") qtest
    putStrLn "DATATYPE PASSED"

