
module Seri.SMT.Tests.Sketch2QBF2 where

import Seri.SMT.Symbolic

sketch2qbf' :: (Free a) => Symbolic b -> (b -> a -> Bool) -> SMT (Answer b)
sketch2qbf' c p = do
  rc <- query c
  case rc of
    Unsatisfiable -> return Unsatisfiable
    Satisfiable cv -> do
      rx <- query $ do
          x <- free
          assert (not (p cv x))
          return x
      case rx of
        Unsatisfiable -> return (Satisfiable cv)
        Satisfiable xv -> do
            commit (c >>= \cv -> assert (p cv xv))
            sketch2qbf' c p

sketch2qbf :: (Free a, Free b) => (b -> a -> Bool) -> SMT (Answer b)
sketch2qbf p = do
  c <- commit free
  sketch2qbf' c p
  
p1 :: Integer -> Integer -> Bool
p1 4 _ = True
p1 c x = (c+x) > 2

main :: SMT (Answer Integer)
main = sketch2qbf p1

