
module Seri.SMT.Tests.Sudoku where

import Prelude
import Seri.SMT.SMT
import Seri.Sudoku.Board
import Seri.Sudoku.Boards
import Seri.Sudoku.Solver
import Seri.Sudoku.IntegerCell
import Seri.Sudoku.EnumCell
import Seri.Sudoku.BitCell
import Seri.Tests.Test

qtest :: (Cell c, Eq c) => String -> Query (Board c) -> Query ()
qtest msg mboard = do
    board <- mboard
    result <- solve board
    str <- case result of
             Satisfiable v -> return $ print v
             _ -> return ["no solution"]
    test msg (str == diabolical_solved)

qInteger :: Query ()
qInteger = qtest "Integer" (readBoard diabolical :: Query (Board IntegerCell))

qEnum :: Query ()
qEnum = qtest "Enum" (readBoard diabolical :: Query (Board EnumCell))

qBit :: Query ()
qBit = qtest "Bit" (readBoard diabolical :: Query (Board BitCell))

main :: IO ()
main = do
    runYices2 Nothing qInteger
    putStrLn "Sudoku Integer PASSED"

    runYices2 Nothing qEnum
    putStrLn "Sudoku Enum PASSED"

    runYices2 Nothing qBit
    putStrLn "Sudoku Bit PASSED"

