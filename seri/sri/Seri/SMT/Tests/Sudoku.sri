
module Seri.SMT.Tests.Sudoku where

import Seri.SMT.Symbolic
import Seri.Sudoku.Board
import Seri.Sudoku.Boards
import Seri.Sudoku.Solver
import Seri.Sudoku.IntegerCell
import Seri.Sudoku.EnumCell
import Seri.Sudoku.BitCell
import Seri.Tests.Test

qtest :: (Cell c, Eq c) => String -> Symbolic (Board c) -> SMT ()
qtest msg board = do
    result <- solve board
    str <- case result of
             Just v -> return $ print v
             Nothing -> return ["no solution"]
    test msg (str == diabolical_solved)

qInteger :: SMT ()
qInteger = qtest "Integer" (readBoard diabolical :: Symbolic (Board IntegerCell))

qEnum :: SMT ()
qEnum = qtest "Enum" (readBoard diabolical :: Symbolic (Board EnumCell))

qBit :: SMT ()
qBit = qtest "Bit" (readBoard diabolical :: Symbolic (Board BitCell))

main :: IO ()
main = do
    runSMT Yices2 Nothing qInteger
    putStrLn "Sudoku Integer PASSED"

    runSMT Yices2 Nothing qEnum
    putStrLn "Sudoku Enum PASSED"

    runSMT Yices2 Nothing qBit
    putStrLn "Sudoku Bit PASSED"

