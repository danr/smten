

module Seri.SMT.Tests.Share where

import Prelude
import Seri.SMT.SMT
import Seri.Tests.Test

simple :: Query ()
simple = do
    x <- free
    y <- free
    assert ((\a -> (a + a + a + a == (8 :: Integer))) (x - y))
    r <- query (x - y)
    test "simple" (r == Satisfiable 2)

samectx :: Query ()
samectx = do
    p <- free
    x <- free
    y <- free
    assert ((\a -> (if p then a + a
                        else 0) == (8 :: Integer)) (x - y))
    r <- query (x - y)
    test "diffctx" (r == Satisfiable 4)

diffctx :: Query ()
diffctx = do
    p <- free
    x <- free
    y <- free
    assert ((\a -> (if p then a + a
                        else a - a) == (8 :: Integer)) (x - y))
    assert p
    r <- query (x - y)
    test "diffctx" (r == Satisfiable 4)

qmain :: Query ()
qmain = do
    simple
    samectx
    diffctx

main :: IO ()
main = do
    runYices2 (Just "build/test/Share.yices2.dbg") qmain
    
    putStr "SHARE PASSED"

    
