
module Seri.SMT.Tests.AllQ2 where

import Prelude
import Seri.SMT.SMT
import Seri.IO.IO
import Seri.IO.SMT

-- Find a list of all values satisfing the given predicate.
allQ :: (Eq a, Free a) => (a -> Bool) -> Query [a]
allQ p = do
  x <- free
  assert (p x)
  allQ' x

-- Find all different satisfying assignments to the given free variable in the
-- current context.
allQ' :: (Eq a) => a -> Query [a]
allQ' x = do
  r <- query x
  case r of
     Satisfiable v -> do
        assert (x /= v)
        vs <- allQ' x
        return (v:vs)
     _ -> return []

pred1 :: Integer -> Bool
pred1 x = (x > 3) && (x < 8)

pred2 :: Integer -> Bool
pred2 x = False

qmain :: Query [Integer]
qmain = allQ pred1

main :: IO ()
main = do
    putStr "yices1..."
    r1 <- runYices1 (Just "build/test/AllQ2.yices1.dbg") qmain
    putStrLn (show r1)

    putStr "yices2..."
    r2 <- runYices2 (Just "build/test/AllQ2.yices2.dbg") qmain
    putStrLn (show r2)

