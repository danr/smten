
module Seri.SMT.Tests.Integer where

import Prelude
import Seri.SMT.SMT

-- Verify the given predicate holds.
-- If it doesn't, report the given name as failing.
test :: [Char] -> Bool -> Query ()
test nm True = return ()
test nm False = error ("Test failed: " ++ nm)

qtest :: Query ()
qtest = do
    a <- free 
    assert (a == 0)
    ra <- query (a :: Integer)
    test "integer.trivial" (ra == Satisfiable 0)

    b <- free
    c <- free
    assert (b == c)
    assert (b == 4)
    rbc <- query (b :: Integer, c :: Integer)
    test "integer.eq" (rbc == Satisfiable (4, 4))

    d <- free
    e <- free
    assert ((d + 2) == e)
    assert (e == 8)
    rde <- query (d :: Integer, e :: Integer)
    test "integer.add" (rde == Satisfiable (6, 8))

    f <- free
    g <- free
    assert ((f - 2) == g)
    assert (g == 8)
    rfg <- query (f :: Integer, g :: Integer)
    test "integer.sub" (rfg == Satisfiable (10, 8))

    h <- free
    assert (h < 8)
    assert (h > 6)
    rh <- query (h :: Integer)
    test "integer.compare" (rh == Satisfiable 7)

    i <- free
    assert (i >= 7)
    assert (i <= 7)
    ri <- query (i :: Integer)
    test "integer.compare2" (ri == Satisfiable 7)

    -- Test more complex
    x <- free
    y <- free
    assert ((x + y) == 8)
    assert ((x - y) == 2)
    rxy <- query (x :: Integer, y :: Integer)
    test "integer.complex" (rxy == Satisfiable (5, 3))

main :: IO ()
main = do
    runYices1 (Just "build/test/Integer.yices1.dbg") qtest
    runYices2 (Just "build/test/Integer.yices2.dbg") qtest

