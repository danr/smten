
module Seri.Sudoku.IntegerCell2 where

import Prelude
import Seri.SMT.SMT

import Seri.Sudoku.Cell

data IntegerCell2 = IntegerCell2 { val :: Integer } deriving (Eq, Free)

c1 :: IntegerCell2
c1 = IntegerCell2 1

c2 :: IntegerCell2
c2 = IntegerCell2 2

c3 :: IntegerCell2
c3 = IntegerCell2 4

c4 :: IntegerCell2
c4 = IntegerCell2 8

c5 :: IntegerCell2
c5 = IntegerCell2 16

c6 :: IntegerCell2
c6 = IntegerCell2 32

c7 :: IntegerCell2
c7 = IntegerCell2 64

c8 :: IntegerCell2
c8 = IntegerCell2 128

c9 :: IntegerCell2
c9 = IntegerCell2 256

isValidCell :: IntegerCell2 -> Bool
isValidCell c = elem c [c1, c2, c3, c4, c5, c6, c7, c8, c9]

join :: [IntegerCell2] -> Integer
join xs = foldl (+) 0 (map val xs)

instance Cell IntegerCell2 where
    mkCell 1 = c1
    mkCell 2 = c2
    mkCell 3 = c3
    mkCell 4 = c4
    mkCell 5 = c5
    mkCell 6 = c6
    mkCell 7 = c7
    mkCell 8 = c8
    mkCell 9 = c9

    deCell c = 
           if c == c1 then 1
      else if c == c2 then 2
      else if c == c3 then 3
      else if c == c4 then 4
      else if c == c5 then 5
      else if c == c6 then 6
      else if c == c7 then 7
      else if c == c8 then 8
      else 9

    freeCell = do
        x <- free
        assert (isValidCell x)
        return x

    distinctCell cells = join cells == 511

