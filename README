Seri ReadMe
===========
Richard Uhler <ruhler@csail.mit.edu>
October 27, 2012

Configuring Seri for Build
--------------------------
Before building seri using the makefile, you must configure the build for your
system. This is done by creating the file "tclmk/local.tcl" containing
information about your system.

The following variables should be set in tclmk/local.tcl:
::HAPPY - The path to the happy executable for building the parser.
::GHC - The path to ghc
::env(PATH) - The PATH to use for executables
::env(LD_LIBRARY_PATH) - the ld library path

For example, tclmk/local.tcl might look like:

=========================================
set ::HAPPY /home/ruhler/.cabal/bin/happy
set ::GHC /usr/bin/ghc
set ::env(PATH) "/bin:/usr/bin:/home/ruhler/local/bin"
set ::env(LD_LIBRARY_PATH) "/home/ruhler/local/lib"
=========================================

Yices 1 and Yices 2
~~~~~~~~~~~~~~~~~~~
Seri requires both yices1 and yices2 be installed on the system. It looks
for a yices1 library called "yices1" and a yices2 library called "yices2".
Because the yices libraries are both shiped as "yices", you will need to
rename them or provide a link to "yices1" and "yices2".

In order to use both yices1 and yices2 libraries in a single executable, seri
assumes the symbols in the yices1 library have been renamed so that prefixes
yices_ are now yices1_. The rename map is included in the doc directory.

Due to issues with the yices1 library and template haskell, seri also requires
a yices1_dummy library which exports the yices1_ symbols. The source for this
library is included in the distribution in src/yices1_dummy.c. By default, the
seri package uses this yices1_dummy library, not the real yices1 solver. If
you don't want to use yices1, that's fine. If you want to use yices1, you
should build your program in two steps:

1. Compile the program, but don't link.
    ghc -c foo.hs
This uses the yices1_dummy library for template haskell calls

2. Compile the program, and link with the true yices1 library.
    ghc -o foo foo.hs -lHSseri-0.1.1.1 -lyices1
This reuses the already compiled version of foo from before, and now that
template haskell doesn't need to run, it's safe to link against the real
yices1 library. You should using the desired version of the seri package in
place of 0.1.1.1 used in the above example.

In summary, if you have libyices.a for yices1 and libyices.so.2.1.0 for
yices2 installed, to create the "yices1", "yices1_dummy" and "yices2"
libraries suitable for use with seri, run the commands:

   objcopy --redefine-syms=doc/yicse1rename.txt libyices.a libyices1.a
   gcc -o libyices1_dummy.so -fPIC -shared src/yices1_dummy.c
   ln -s libyices.so.2.1.0 libyices2.so
   ln -s libyices.so.2.1.0 libyices.so.2.0 


Building Seri
-------------
Once seri is configured for build, it can be built by running `make`.

The makefile generates a cabal package for seri, installs the cabal package in
a pretend home directory, compiles some programs against the installed
package, then runs some tests on the generated executables. During the process
of installation, required packages will automatically be installed as well.

As of October 27th, 2012, Seri requires the following haskell packages:

* base ==4.5.*
* mtl ==2.1.* 
* pretty ==1.1.*
* array ==0.4.*
* directory ==1.1.*
* template-haskell ==2.7.*
* hashable ==1.1.*
* containers ==0.4.*
* bytestring ==0.9.*
* cmdargs ==0.10.*
* syb ==0.3.*

Generated files of note:
build/src/seri:: the generated seri executable
build/src/dist/seri-<version>.tar.gz:: the cabal distribution package
build/src/dist/doc/html/seri/index.html:: generated library documentation

Trouble Shooting
~~~~~~~~~~~~~~~~
Build Error: Cannot find normal object file
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
When building for the first time, executable profiling must be disabled,
otherwise an error such as 'cannot find normal object file' will be reported.
To ensure executable profiling is disabled in the build script, remove the
flag "--enable-executable-profiling" from cabal command in tclmk/make.tcl if
it is present.

Build Error: yices2 library not found
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Verify first the yices2 library is properly installed on your system. You can
do this by compiling and running the following program:

----------
#include <stdio.h>

int main()
{
    yices_init();
    int tv = yices_true();
    int fv = yices_false();
    printf("true-value: %i, false-value: %i\n", tv, fv);
    yices_exit();
    return 0;
}
----------

You may need to add the library path to your C-compile, for example, with:
    
    gcc yices2test.c -L/home/ruhler/local/lib -lyices2 

You may need to set your LD_LIBRARY_PATH to find the library at runtime:
    
    export LD_LIBRARY_PATH=/home/ruhler/local/lib
    ./a.out
    >>> true-value: 2, false-value: 3

Once you have verified yices2 is install and working on your system, double
check that:
* tclmk/local.tcl has the right LD_LIBRARY_PATH set
* Your cabal config (typically in ~/.cabal/config) has the appropriate
  extra-lib-dirs flag set

Trying Seri
-----------
After building seri you can try it out. For example, to run a simple query
using yices2:

    ./build/src/seri --io --include src/sri -m Seri.SMT.Tests.HelloWorld.main -f src/sri/Seri/SMT/Tests/HelloWorld.sri

If it works, you should get the output:
    Satisfiable 5

And HelloWorld.dbg will contain the yices2 query evaluated to get this result.

Additional sample queries are available in the src/sri/Seri/SMT/Tests/ directory.

