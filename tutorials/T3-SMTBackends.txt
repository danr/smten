Tutorial 3 - SMT Backends
=========================
Richard Uhler <ruhler@csail.mit.edu>
March 2014

Goals
-----
The goal of this tutorial is to make you aware of different SMT backends
supported by Smten for improving the performance of running symbolic
computations, and to encourage you to install one or more of them.

Introduction
------------
In the previous tutorial we presented a symbolic computation for solving the
nqueens problem and used the MiniSat solver for running that computation. The
MiniSat solver is not the only solver available, however, and there can be
great advantages to using a different solver. This is particularly the case
for solvers with primitive support for free Integers and Bit-Vectors discussed
in later tutorials. The current list of supported
backends includes Yices1, Yices2, STP, Z3, and MiniSat.

Using an Alternate Backend
--------------------------
In order to use one of the SMT solver backends to smten, you must first
install the SMT solver on your system. In some cases, you may also need to
install a separate smten cabal package that integrates the SMT solver into
smten.

Once the backend is installed, you simply need to import the solver, and pass
it as the argument to the +run_symbolic+ function. Solvers have type +Solver+
in smten, and by convention they live at the Smten.Symbolic.Solver.* part of
the module hierarchy.

For example, assuming the Yices2 solver has been installed, it can be used in
the nqueens from the previous tutorial by importing
+Smten.Symbolic.Solver.Yices2+ and changing the line:

   result <- run_symbolic minisat $ do 

To the line:
   
   result <- run_symbolic yices2 $ do


The remainder of this tutorial provides more details about how to install and
use each of the backends. You are encouraged to try installing and running as
many of these solvers as you can, though in practice you should only need one
of them for Smten to be useful. Yices2 seems to be a good overall choice.

The Debug Solver
----------------
The Debug solver outputs the generated SMT query to a file in an abstract SMT
syntax and the resulting model, if any. The debug solver takes another
solver as an argument to do the actual solving. Note that rendering the
generated SMT query in text can be costly in terms of time and memory.

Package:: smten-lib

Module:: Smten.Symbolic.Solver.Debug

Solver Name:: debug

Installation::
    No additional installation step is needed to use the Debug solver.

Native Theories::
    None. The debug solver relies on another solver to do the actual work.

Sample Usage::

   result <- run_symbolic (debug "nqueens.dbg" yices2) $ do

Yices1
------
The Yices1 solver is an SMT solver from SRI International. It is expected to
be obsoleted by Yices2 eventually, but is still useful nonetheless.

Package:: smten-yices1

Module:: Smten.Symbolic.Solver.Yices1

Solver Name:: yices1

Installation::
  The yices1 solver must be installed before it can be used. It can be
  downloaded from http://yices.csl.sri.com.
  +
  + 
  Once the Yices1 solver is installed, install the smten-yices1 cabal package
  available at http://github.com/ruhler/smten/releases. You may need to add
  the path containing +libyices.a+ to the +extra_lib_dirs+ option in your
  ~/.cabal/config file in order for cabal to find the Yices1 library to build
  the smten-yices1 package.

Native Theories::
    Yices1 supports booleans, bit vectors, and integers natively.

Yices2
------
The Yices2 solver is the latest SMT solver from SRI International. It is a
good all around solver to use with Smten.

Package:: smten-lib

Module:: Smten.Symbolic.Solver.Yices2

Solver Name:: yices2

Installation::
  The yices2 solver must be installed before it can be used. It can be
  downloaded from http://yices.csl.sri.com.
  + 
  +
  The yices2 backend of smten looks for the shared library ``libyices.so.2.1''
  in standard locations at runtime. It will report an error if it is unable to
  find ``libyices.so.2.1''.
  +
  +
  To install the shared library for yices2, either place ``libyices.so.2.1.X''
  in a common library path, such as /usr/lib or /usr/local/lib, and run
  'ldconfig', or create a symlink named ``libyices.so.2.1'' pointing to your
  version of ``libyices.so.2.1.X'' and add the path containing
  ``libyices.so.2.1'' to the LD_LIBRARY_PATH environment variable at runtime.

Native Theories::
    Yices2 supports booleans, bit vectors, and integers natively.

STP
---
The STP solver is a solver with good support for bit-vectors.

Package:: smten-stp

Module:: Smten.Symbolic.Solver.STP

Solver Name:: stp

Installation::
  The STP solver must be installed before it can be used. The source for
  STP can be downloaded from sites.google.com/site/stpfastprover/. Follow the
  instructions in the INSTALL file provided along with the STP source code to
  build and install the STP solver.
  +
  +
  Once the STP solver is installed, install the smten-stp cabal package
  available at http://github.com/ruhler/smten/releases. You may need to add
  the path containing +libstp.a+ to the +extra_lib_dirs+ option in your
  ~/.cabal/config file in order for cabal to find the STP library to build the
  smten-stp package.
 
Native Theories::
    STP supports booleans and bit vectors natively. 
    Concrete evaluation of integers are supported, but free integers are not.

Z3
---
The Z3 solver is a solver from Microsoft which is a good all around solver to
use with Smten.

Package:: smten-lib

Module:: Smten.Symbolic.Solver.Z3

Solver Name:: z3

Installation::
  The z3 solver must be installed before it can be used. It can be
  downloaded from http://z3.codeplex.com/. Following the provided instructions
  for installing the solver.
  + 
  +
  The z3 backend of smten looks for the shared library ``libz3.so'' in standard
  locations at runtime. It will report an error if it is unable to find
  ``libz3.so''. You may need to add the path containing ``libz3.so'' to the
  LD_LIBRARY_PATH environment variable at runtime.

Native Theories::
    Z3 supports booleans, bit vectors, and integers natively.

MiniSat
-------
The MiniSat solver is a SAT solver which can be used with Smten.

Package:: smten-minisat

Module:: Smten.Symbolic.Solver.MiniSat

Solver Name:: minisat

Installation::
  Install the smten-minisat cabal package available at
  http://github.com/ruhler/smten/releases. This package includes the MiniSat
  solver, so no other installation is necessary.

Native Theories::
    MiniSat supports booleans. It supports bit vectors by bit-blasting to
    booleans.  Concrete evaluation of integers are supported, but free
    integers are not.

Conclusion
----------
In this tutorial we presented the SMT backends available for Smten. Hopefully
you tried installing a couple and saw that it improved the performance of your
nqueens solver drastically. The next tutorial shows how you can take advantage
of native support for integers in some solvers to speed up nqueens even more.

