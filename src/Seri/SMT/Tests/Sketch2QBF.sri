
module Seri.SMT.Tests.Sketch2QBF where {

import Seri.Lib.Prelude;
import Seri.SMT.SMT;

-- Answer the question:
--   Does there exist a value 'c' such that for all 'x', p(x, c) is satisfied?
--
--   Based on algorithm in section 5.4 of
--   "Combinatorial Sketching for Finite Programs", in ASPLOS06
--
--  You provide at least one initial concrete value for 'x', it returns a
--  value for 'c' if it can.
--
--  x has type a
--  c has type b
sketch2qbf' :: [a] -> (b -> a -> Bool) -> Query (Answer b);
sketch2qbf' xs p = do {
  -- Find some concrete 'c' which satisfies the predicate for all existing
  -- examples.
  c <- free;
  assert (all (p c) xs);
  rc <- query c;
  case rc of {
    Unsatisfiable -> return Unsatisfiable;
    Satisfiable cv -> do {
      -- Find a counter example
      x <- free;
      assert (not (p cv x));
      rx <- query x;
      case rx of {
        Unsatisfiable -> return (Satisfiable cv);
        Satisfiable xv -> sketch2qbf' (xv:xs) p;
      };
    };
  };
};

sketch2qbf :: (b -> a -> Bool) -> Query (Answer b);
sketch2qbf = sketch2qbf' [];
  
p1 :: Integer -> Integer -> Bool;
p1 4 _ = True;
p1 c x = (c+x) > 2;

main :: Query (Answer Integer);
main = sketch2qbf p1;

}

