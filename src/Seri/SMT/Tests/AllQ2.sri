
module Seri.SMT.Tests.AllQ2 where {

import Seri.Lib.Prelude;
import Seri.SMT.SMT;

-- Find a list of all values satisfing the given predicate.
allQ :: (Eq a) => (a -> Bool) -> Query [a];
allQ p = do {
  x <- free;
  assert (p x);
  allQ' x;
};

-- Find all different satisfying assignments to the given free variable in the
-- current context.
allQ' :: (Eq a) => a -> Query [a];
allQ' x = do {
  r <- query x;
  case r of {
     Satisfiable v -> do {
        assert (x /= v);
        vs <- allQ' x;
        return (v:vs);
        };
     _ -> return [];
  };
};

pred1 :: Integer -> Bool;
pred1 x = (x > 3) && (x < 8);

pred2 :: Integer -> Bool;
pred2 x = False;

main :: Query [Integer];
main = allQ pred1;

}

