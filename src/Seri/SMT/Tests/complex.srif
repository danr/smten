
data Foo = Bar Integer
         | Sludge Bool;

defoo :: Foo -> Integer;
defoo (Bar x) = x;
defoo (Sludge b) = if b then 1 else 0;

foo :: Integer -> Integer;
foo x = x + 1;

scopedfail :: Query Integer;
scopedfail = do {
    x <- free;
    assert(x < x);
    return x;
};

main :: Query (Answer (Bool, Integer, Bool, Foo));
main = do {
    b <- free;
    assert b;

    x <- free;
    assert ((if x < 0 then x else foo x) == 4);

    q <- queryS scopedfail;
    sf <- case q of {
            Satisfiable _ -> return True;
            _ -> return False;
          };

    f <- free;
    assert (2 == defoo f);
    query (b, x, sf, f);
};

