
-- The Seri SMT primitives and common declarations.
module Seri.SMT.SMT where {

import Seri.Lib.Prelude;

-- Query is the primitive query monad.
data Query a = ;

data Answer a = Satisfiable a | Unsatisfiable | Unknown;

-- Return a new free variable.
free :: Query a;

-- Assert the given boolean is true.
assert :: Bool -> Query ();

-- Ask the SMT solver if there is an assignment to the free variables in the
-- context such that all assertions are satisfied. If there is a satisfying
-- assignment, evaluates the argument under that assignment and returns the
-- concrete result.
query :: a -> Query (Answer a);

-- Execute a scoped query.
-- No assertions or free variables declared in the given query affect the
-- context of this query.
-- Warning: It is possible to return free variables from the given query which
-- have no meaning in the context of this query. You should not do this.
queryS :: Query a -> Query a;

-- The Query monad primitives
return_query :: a -> Query a;
nobind_query :: Query a -> Query b -> Query b;
bind_query :: Query a -> (a -> Query b) -> Query b;
fail_query :: [Char] -> Query a;

instance Monad Query where {
  return = return_query;
  (>>=) = bind_query;
  (>>) = nobind_query;
  fail = fail_query
};

-- Assert a predicate holds for every input.
always :: (a -> Bool) -> Query ();
always f = do {
    answer <- queryS (do {
        x <- free;
        assert (not (f x));
        query ();
    });
    case answer of {
        Unsatisfiable -> return ();
        _ -> assert False;
    };
}

}

