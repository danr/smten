
module Seri.SMT.SMT where {

import Seri.Lib.Bool;
import Seri.Lib.Monad;

data Query a = Query;

data Answer a = Satisfiable a | Unsatisfiable | Unknown;

free :: Query a;
assert :: Bool -> Query ();
query :: a -> Query (Answer a);
queryS :: Query a -> Query (Answer a);
return_query :: a -> Query a;
nobind_query :: Query a -> Query b -> Query b;
bind_query :: Query a -> (a -> Query b) -> Query b;
fail_query :: [Char] -> Query a;

instance Monad Query where {
  return = return_query;
  (>>=) = bind_query;
  (>>) = nobind_query;
  fail = fail_query;
};

-- Assert a predicate holds for every input.
always :: (a -> Bool) -> Query ();
always f = do {
    answer <- queryS (do {
        x <- free;
        assert (not (f x));
    });
    case answer of {
        Unsatisfiable -> return ();
        _ -> assert False;
    };
}

}

