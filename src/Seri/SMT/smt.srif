
data Query a = Query;

data Answer a = Satisfiable a | Unsatisfiable | Unknown;

data Free a = Free Integer;

free :: forall a . Query a;
free = (@free :: Query a);

assert :: Bool -> Query ();
assert = (@assert :: Bool -> Query ());

query :: forall a . a -> Query (Answer a);
query = (@query :: a -> Query (Answer a));

queryS :: forall a . Query a -> Query (Answer a);
queryS = (@queryS :: Query a -> Query (Answer a));

return_query :: forall a . a -> Query a;
return_query = (@return_query :: a -> Query a);

nobind_query :: forall a b . Query a -> Query b -> Query b;
nobind_query = (@nobind_query :: Query a -> Query b -> Query b);

bind_query :: forall a b . Query a -> (a -> Query b) -> Query b;
bind_query = (@bind_query :: Query a -> (a -> Query b) -> Query b);

fail_query :: forall a . [Char] -> Query a;
fail_query = (@fail_query :: [Char] -> Query a);

instance Monad Query where {
  return = (%return_query :: a -> Query a);
  (>>=) = (%bind_query :: Query a -> (a -> Query b) -> Query b);
  (>>) = (%nobind_query :: Query a -> Query b -> Query b);
  fail = (%fail_query :: [Char] -> Query a);
};


