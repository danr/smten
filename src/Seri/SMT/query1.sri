
class Monad m where
  >>={forall a b . -> (m a) (-> (-> a (m b)) (m b))}
  >>{forall a b . -> (m a) (-> (m b) (m b))}
  return{forall a . -> a (m a)}
  fail{forall a . -> ([] Char) (m a)}

instance Monad Query where
  return = %return_query{-> a (Query a)};
  >>= = %bind_query{-> (Query a) (-> (-> a (Query b)) (Query b))};
  >> = %nobind_query{-> (Query a) (-> (Query b) (Query b))};
  fail = %fail_query{-> ([] Char) (Query a)};

data Query a =
    Query;

data Answer a =
    Satisfiable a
  | Unsatisfiable
  | Unknown;

value free{forall a . Query a} =
  @free{Query a};

value assert{-> Bool (Query ())} =
  @assert{-> Bool (Query ())};

value <{-> Integer (-> Integer Bool)} =
  @<{-> Integer (-> Integer Bool)};

value >{-> Integer (-> Integer Bool)} =
  @>{-> Integer (-> Integer Bool)};

value query{forall a . -> a (Query (Answer a))} =
  @query{-> a (Query (Answer a))};

value return_query{forall a . -> a (Query a)} =
  @return_query{-> a (Query a)};

value bind_query{forall a b . -> (Query a) (-> (-> a (Query b)) (Query b))} =
  @bind_query{-> (Query a) (-> (-> a (Query b)) (Query b))};

value nobind_query{forall a b . -> (Query a) (-> (Query b) (Query b))} =
  @nobind_query{-> (Query a) (-> (Query b) (Query b))};

value fail_query{forall a . -> ([] Char) (Query a)} =
  @fail_query{-> ([] Char) (Query a)};

value main{Query Integer} =
  #>>={-> (Query Integer) (-> (-> Integer (Query (Answer Integer))) (Query (Answer Integer))), Monad Query} %free{Query Integer} ((\x{Integer} ->
                                                                                                                                   #>>{-> (Query ()) (-> (Query (Answer Integer)) (Query (Answer Integer))), Monad Query} (%assert{-> Bool (Query ())} (%<{-> Integer (-> Integer Bool)} .x{Integer} 6)) (#>>{-> (Query ()) (-> (Query (Answer Integer)) (Query (Answer Integer))), Monad Query} (%assert{-> Bool (Query ())} (%>{-> Integer (-> Integer Bool)} .x{Integer} 4)) (%query{-> Integer (Query (Answer Integer))} .x{Integer}))));
