
module Seri.Lib.Integer where {

import Seri.Lib.Bool;

class Num a where {
  (+) :: a -> a -> a;
  (*) :: a -> a -> a;
  (-) :: a -> a -> a;
  negate :: a -> a;
  abs :: a -> a;
  fromInteger :: Integer -> a;
};

__prim_add_Integer :: Integer -> Integer -> Integer;
__prim_sub_Integer :: Integer -> Integer -> Integer;
__prim_mul_Integer :: Integer -> Integer -> Integer;
(<) :: Integer -> Integer -> Bool;
(>) :: Integer -> Integer -> Bool;
(==) :: Integer -> Integer -> Bool;

(/=) :: Integer -> Integer -> Bool;
(/=) a b = not (a == b);

instance Num Integer where {
  (+) = __prim_add_Integer;
  (-) = __prim_sub_Integer;
  (*) = __prim_mul_Integer;
  negate x = 0 - x;
  abs x = if x < 0 then negate x else x;
  fromInteger x = x;
}

}

