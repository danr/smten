
module Seri.Lib.Maybe where {

import Seri.Lib.Bool;
import Seri.Lib.Monad;

data Maybe a = Just a | Nothing;

instance Monad Maybe where {
    fail _ = Nothing;
    return = Just;
    (>>) a b = a >>= (\_ -> b);
    (>>=) m f = 
        case m of {
            Just x -> f x;
            Nothing -> Nothing;
            }
};

fromMaybe :: a -> Maybe a -> a;
fromMaybe _ (Just x) = x;
fromMaybe x Nothing = x;

instance (Eq a) => Eq (Maybe a) where {
    (==) (Just x) (Just y) = (x == y);
    (==) Nothing Nothing = True;
    (==) _ _ = False;

    (/=) a b = not (a == b)
}

}

