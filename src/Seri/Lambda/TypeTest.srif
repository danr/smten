
module Seri.Lambda.TypeTest where {

--fst :: forall a b . (a, b) -> a;
--fst (x, _) = x;

--snd :: forall a b . (a, b) -> b;
--snd (_, y) = y;

--(&&) :: Bool -> Bool -> Bool;
--(&&) True True = True;
--(&&) _ _ = False;

class Num a where {
  (+) :: a -> a -> a;
  (*) :: a -> a -> a;
  (-) :: a -> a -> a;
  negate :: a -> a;
  abs :: a -> a;
  signum :: a -> a;
  fromInteger :: Integer -> a;
};

__prim_add_Integer :: Integer -> Integer -> Integer;
__prim_add_Integer = (@__prim_add_Integer :: Integer -> Integer -> Integer);

__prim_sub_Integer :: Integer -> Integer -> Integer;
__prim_sub_Integer = (@__prim_sub_Integer :: Integer -> Integer -> Integer);

__prim_mul_Integer :: Integer -> Integer -> Integer;
__prim_mul_Integer = (@__prim_mul_Integer :: Integer -> Integer -> Integer);

--(<) :: Integer -> Integer -> Bool;
--(<) = (@(<) :: Integer -> Integer -> Bool);

--(>) :: Integer -> Integer -> Bool;
--(>) = (@(>) :: Integer -> Integer -> Bool);

--(==) :: Integer -> Integer -> Bool;
--(==) = (@(==) :: Integer -> Integer -> Bool);

instance Num Integer where {
  (+) = (%__prim_add_Integer :: Integer -> Integer -> Integer);
  (-) = (%__prim_sub_Integer :: Integer -> Integer -> Integer);
  (*) = (%__prim_mul_Integer :: Integer -> Integer -> Integer);
};

--head :: forall a . [a] -> a;
--head (x:_) = x;

--tail :: forall a . [a] -> [a];
--tail (_:xs) = xs;

length :: forall a . [a] -> Integer;
length [] = 0;
length (x:xs) = 1 + length xs

}

