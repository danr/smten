
module Seri.IO.IO where {

import Seri.Lib.Prelude;
import Seri.SMT.SMT;

-- Primitive IO monad
data IO a = ;

-- Print a string to stdout.
putStr :: [Char] -> IO ();

-- Evaluate an SMT query.
runQuery :: Query a -> IO a;

-- The IO monad primitives
return_io :: a -> IO a;
nobind_io :: IO a -> IO b -> IO b;
bind_io :: IO a -> (a -> IO b) -> IO b;
fail_io :: [Char] -> IO a;

instance Monad IO where {
  return = return_io;
  (>>=) = bind_io;
  (>>) = nobind_io;
  fail = fail_io;
};


-- Print a line to stdout.
putStrLn :: [Char] -> IO ();
putStrLn str = do {
  putStr str;
  putStr "\n";
};

}

