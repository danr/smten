# vim: ft=python

Import('env')

env['SRCDIR'] = Dir(".")
env['GHCPATH'] = [Dir(".")]
env['LIBPATH'] = [Dir(".")]
#env['GHCFLAGS'] = "-ddump-splices"

## Monomorphic
monomorphic = env.GHCProgram('monomorphic', 'Seri/Target/Monomorphic/monomorphic.hs')

## SMT run query
runquery = env.GHCProgram('runquery', 'Seri/SMT/runquery.hs')
env.Default(runquery)

## Parser
env.Command('Seri/Lambda/Parser.hs',
            'Seri/Lambda/Parser.y',
            "/home/ruhler/.cabal/bin/happy -o $TARGET -i${TARGET.dir}/Seri.info $SOURCE")

## Serif front end
serif = env.GHCProgram('serif', 'Seri/Serif/serif.hs')
env['SERIF'] = serif
env.Default(serif)

# Serie elaborator
serie = env.GHCProgram('serie', 'Seri/Target/Elaborate/serie.hs')
env.Default(serie)

## The Seri library
def dosrif(name):
    return env.Command(name + ".hs", [serif, name + ".srif"],
            "$SOURCE -o $TARGET ${SOURCES[1]}")

preludeexe = env.GHCProgram('Seri/Lib/Prelude.exe', 'Seri/Serif/prelude.hs')
preludehs = env.Command('Seri/Lib/Prelude.hs', preludeexe, "$SOURCE > $TARGET")

library = [
    'Seri/Lib/Bool',
    'Seri/Lib/Integer',
    'Seri/Lib/List',
    'Seri/Lib/Maybe',
    'Seri/Lib/Monad',
    'Seri/Lib/Tuple'
    ]

libraryhs = map(dosrif, library) + preludehs

def dosri(name):
    exe = env.GHCProgram(name + ".exe", name + ".hs",
            GHCFLAGS="-main-is " + name.replace('/', '.') )
    env.Depends(exe, libraryhs)
    return env.Command(name + ".sri", exe, "$SOURCE > $TARGET")

librarysri = map(dosri, library)
dosrif('Seri/SMT/SMT')
dosri('Seri/SMT/SMT')
env.Default('Seri/SMT/SMT.sri')


## General tests
dosrif('Seri/Lib/Tests')
sri = dosri('Seri/Lib/Tests')
out = env.Command('general.out', [serie, sri, librarysri],
    "$SOURCE -o $TARGET -i $LIBPATH -m testall ${SOURCES[1]}")
wnt = env.Command('general.wnt', [], "echo -n '(True :: Bool)' > $TARGET")
cmp = env.Command('general.cmp', [out, wnt], "cmp $SOURCES > $TARGET")
env.Default(cmp)

## haskell back end tests.
#hstest = env.GHCProgram('hstest', 'Seri/Target/Haskell/tests.hs')
#hstest_src = env.Command('hstest_hs.hs', [hstest, sri],
#    '$SOURCE -o $TARGET -i $LIBPATH ${SOURCES[1]}')
#hstest_exe = env.GHCProgram('hstest_exe', hstest_src)
#env.Default(env.Command('hstest_exe.out', hstest_exe, "$SOURCE > $TARGET"))


## SMT Query Tests
def querytest(name):
    dosrif('Seri/SMT/Tests/' + name)
    sri = dosri('Seri/SMT/Tests/' + name)
    out = env.Command('%s.out' % name, [runquery, sri],
        '$SOURCE -d ${TARGET.dir}/%s.dbg -i $LIBPATH ${SOURCES[1]} > $TARGET' % name)
    env.Default(out)
        
querytest("Query1")
querytest("Query2")
querytest("Complex")
querytest("If")
querytest("Casenomatch")

