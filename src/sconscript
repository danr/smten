# vim: ft=python

Import('env')

env['SRCDIR'] = Dir(".")
env['GHCPATH'] = [Dir(".")]
#env['GHCFLAGS'] = "-ddump-splices"

## C back end tests.
ctest = env.GHCProgram('ctest', 'Seri/Target/C/tests.hs')
ctest_src = env.Command('ctest_c.c', ctest, '$SOURCE $TARGET')
ctest_exe = env.Program('ctest_exe', ctest_src)
#env.Default(env.Command('ctest_exe.out', ctest_exe, "$SOURCE > $TARGET"))

## Monomorphic
monomorphic = env.GHCProgram('monomorphic', 'Seri/Target/Monomorphic/monomorphic.hs')

## SMT run query
runquery = env.GHCProgram('runquery', 'Seri/SMT/runquery.hs')
env.Default(runquery)

## Parser
env.Command('Seri/Lambda/Parser.hs',
            'Seri/Lambda/Parser.y',
            "/home/ruhler/.cabal/bin/happy -o $TARGET -i${TARGET.dir}/Seri.info $SOURCE")

## Serif front end
serif = env.GHCProgram('serif', 'Seri/Serif/serif.hs')
env.Default(serif)

# Serie elaborator
serie = env.GHCProgram('serie', 'Seri/Target/Elaborate/serie.hs')
env.Default(serie)

srifprelude = ['Seri/Lib/bool.srif',
               'Seri/Lib/integer.srif',
               'Seri/Lib/list.srif',
               'Seri/Lib/monad.srif',
               'Seri/Lib/maybe.srif', 
               'Seri/Lib/tuple.srif'] 
srifsmt = 'Seri/SMT/smt.srif'

## The SMT library
smtlibsrif = env.Substfile('smtlib.all.srif', [srifprelude, srifsmt])
smtlibhs = env.Command('smtlib.srif.hs', [serif, smtlibsrif],
                '$SOURCE -o $TARGET ${SOURCES[1]}')
smtlibbin = env.GHCProgram('smtlib', smtlibhs)
smtlibsri = env.Command('smtlib.sri', smtlibbin, "$SOURCE > $TARGET")
env.Default(smtlibsri)

## General tests
srif = env.Substfile('general.all.srif', [srifprelude, 'Seri/Lib/tests.srif'])
hs = env.Command('general.srif.hs', [serif, srif],
                '$SOURCE -o $TARGET ${SOURCES[1]}')
bin = env.GHCProgram('general', 'general.srif.hs')
sri = env.Command('general.sri', bin, "$SOURCE > $TARGET")
out = env.Command('general.out', [serie, sri],
    "$SOURCE -o $TARGET -m testall ${SOURCES[1]}")
wnt = env.Command('general.wnt', [], "echo -n '(True :: Bool)' > $TARGET")
cmp = env.Command('general.cmp', [out, wnt], "cmp $SOURCES > $TARGET")
env.Default(cmp)

## haskell back end tests.
hstest = env.GHCProgram('hstest', 'Seri/Target/Haskell/tests.hs')
hstest_src = env.Command('hstest_hs.hs', [hstest, srif], '$SOURCES $TARGET')
hstest_exe = env.GHCProgram('hstest_exe', hstest_src)
env.Default(env.Command('hstest_exe.out', hstest_exe, "$SOURCE > $TARGET"))


## SMT Query Tests
def querytest(name):
    srif = env.Substfile('%s.all.srif' % name,
            [srifprelude, srifsmt, 'Seri/SMT/Tests/%s.srif' % name])
    hs = env.Command('%s.srif.hs' % name, [serif, srif],
                '$SOURCE -o $TARGET ${SOURCES[1]}')
    bin = env.GHCProgram(name, hs)
    sri = env.Command('%s.sri' % name, bin, "$SOURCE > $TARGET")
    out = env.Command('%s.out' % name, [runquery, sri],
        '$SOURCE -d ${TARGET.dir}/%s.dbg ${SOURCES[1]} > $TARGET' % name)
    env.Default(out)
        
querytest("query1")
querytest("query2")
querytest("complex")
querytest("if")
querytest("casenomatch")
