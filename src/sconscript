# vim: ft=python

Import('env')

env['SRCDIR'] = Dir(".")
env['GHCPATH'] = [Dir(".")]
#env['GHCFLAGS'] = "-ddump-splices"

## tests test
tests = env.GHCProgram('tests')
env.Default(env.Command('tests.out', tests, "$SOURCE > $TARGET"))

## haskell back end tests.
hstest = env.GHCProgram('hstest', 'Seri/Target/Haskell/tests.hs')
hstest_src = env.Command('hstest_hs.hs', hstest, '$SOURCE $TARGET')
hstest_exe = env.GHCProgram('hstest_exe', hstest_src)
env.Default(env.Command('hstest_exe.out', hstest_exe, "$SOURCE > $TARGET"))

## C back end tests.
ctest = env.GHCProgram('ctest', 'Seri/Target/C/tests.hs')
ctest_src = env.Command('ctest_c.c', ctest, '$SOURCE $TARGET')
ctest_exe = env.Program('ctest_exe', ctest_src)
#env.Default(env.Command('ctest_exe.out', ctest_exe, "$SOURCE > $TARGET"))

## Monomorphic
monomorphic = env.GHCProgram('monomorphic', 'Seri/Target/Monomorphic/monomorphic.hs')

## SMT run query
runquery = env.GHCProgram('runquery', 'Seri/SMT/runquery.hs')
env.Default(runquery)

## SMT run query tests
def querytest(name):
    bin = env.GHCProgram(name, 'Seri/SMT/Tests/%s.hs' % name)
    sri = env.Command('%s.sri' % name, bin, "$SOURCE > $TARGET")
    out = env.Command('%s.out' % name, [runquery, sri],
        '$SOURCE -d ${TARGET.dir}/%s.dbg ${SOURCES[1]} > $TARGET' % name)
    env.Default(out)

querytest("query1")
querytest("query2")
querytest("if")
querytest("complex")
querytest("casenomatch")

## Parser
env.Command('Seri/Lambda/Parser.hs',
            'Seri/Lambda/Parser.y',
            "/home/ruhler/.cabal/bin/happy -o $TARGET -i${TARGET.dir}/Seri.info $SOURCE")

## Serif front end
serif = env.GHCProgram('serif', 'Seri/Serif/serif.hs')
env.Default(serif)
seriftest_hs = env.Command('seriftest.hs', [serif, 'Seri/Serif/test.srif'],
                    '$SOURCE -o $TARGET ${SOURCES[1]}')
seriftest = env.GHCProgram('seriftest', seriftest_hs)
seriftest_out = env.Command('seriftest.out', seriftest, "$SOURCE > $TARGET")
env.Default(seriftest_out)

