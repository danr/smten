module Seri.SMT.Tests.BCL2 where {
  import Seri.Lib.Prelude;
  import Seri.SMT.Tests.BCL.FIFO;
  import Seri.SMT.Tests.BCL.Tuple;
  import Seri.SMT.Tests.BCL.Reg;
  import Seri.SMT.Tests.BCL.Portal;
  import Seri.SMT.SMT;
  data MkTestBench =
      MkTestBench (Reg Integer) (Reg Integer)
  ;
  __mkTestBench_undef :: MkTestBench;
  __mkTestBench_undef = (MkTestBench :: Reg Integer -> Reg Integer -> MkTestBench) (undefined :: Reg Integer) (undefined :: Reg Integer)
  ;
  mkTestBench_cnt :: MkTestBench -> Reg Integer;
  mkTestBench_cnt = (\(a :: MkTestBench) ->
                       case (a :: MkTestBench) of {
                         (MkTestBench :: MkTestBench) (x :: Reg Integer) (_ :: Reg Integer) ->
                           (x :: Reg Integer);
                       })
  ;
  mkTestBench_phase :: MkTestBench -> Reg Integer;
  mkTestBench_phase = (\(a :: MkTestBench) ->
                         case (a :: MkTestBench) of {
                           (MkTestBench :: MkTestBench) (_ :: Reg Integer) (x :: Reg Integer) ->
                             (x :: Reg Integer);
                         })
  ;
  __mkTestBench_cnt_update :: Reg Integer -> MkTestBench -> MkTestBench;
  __mkTestBench_cnt_update = (\(a :: Reg Integer) ->
                                (\(b :: MkTestBench) ->
                                   case ((a :: Reg Integer), (b :: MkTestBench)) of {
                                     ((mkTestBench_cnt :: Reg Integer),
                                      (MkTestBench :: MkTestBench) (_ :: Reg Integer) (mkTestBench_phase :: Reg Integer)) ->
                                       (MkTestBench :: Reg Integer -> Reg Integer -> MkTestBench) (mkTestBench_cnt :: Reg Integer) (mkTestBench_phase :: Reg Integer);
                                   }))
  ;
  __mkTestBench_phase_update :: Reg Integer -> MkTestBench -> MkTestBench;
  __mkTestBench_phase_update = (\(a :: Reg Integer) ->
                                  (\(b :: MkTestBench) ->
                                     case ((a :: Reg Integer), (b :: MkTestBench)) of {
                                       ((mkTestBench_phase :: Reg Integer),
                                        (MkTestBench :: MkTestBench) (mkTestBench_cnt :: Reg Integer) (_ :: Reg Integer)) ->
                                         (MkTestBench :: Reg Integer -> Reg Integer -> MkTestBench) (mkTestBench_cnt :: Reg Integer) (mkTestBench_phase :: Reg Integer);
                                     }))
  ;
  mkTestBench_ctor :: MkTestBench;
  mkTestBench_ctor = MkTestBench (mkReg__Reg__Int_32_ctor 1) (mkReg__Reg__Int_32_ctor 0)
  ;
  mkTestBench_dimension :: MkTestBench -> MkTestBench -> Bool;
  mkTestBench_dimension = (\a ->
                             (\b ->
                                let {
                                  phase_rv = mkReg__Reg__Int_32_dimension (mkTestBench_phase a) (mkTestBench_phase b) ;
                                  cnt_rv = mkReg__Reg__Int_32_dimension (mkTestBench_cnt a) (mkTestBench_cnt b) ;
                                } in (&&) phase_rv ((&&) cnt_rv (True :: Bool))))
  ;
  mkTestBench_eq :: MkTestBench -> MkTestBench -> Bool;
  mkTestBench_eq = (\a ->
                      (\b ->
                         let {
                           phase_rv = mkReg__Reg__Int_32_eq (mkTestBench_phase a) (mkTestBench_phase b) ;
                           cnt_rv = mkReg__Reg__Int_32_eq (mkTestBench_cnt a) (mkTestBench_cnt b) ;
                         } in (&&) phase_rv ((&&) cnt_rv (True :: Bool))))
  ;
  mkTestBench_clear_dirty_bits :: MkTestBench -> MkTestBench;
  mkTestBench_clear_dirty_bits = (\a ->
                                    let {
                                      phase_new = mkReg__Reg__Int_32_clear_dirty_bits (mkTestBench_phase a) ;
                                      cnt_new = mkReg__Reg__Int_32_clear_dirty_bits (mkTestBench_cnt a) ;
                                    } in MkTestBench cnt_new phase_new)
  ;
  mkTestBench_idfn :: MkTestBench -> MkTestBench;
  mkTestBench_idfn = (\a ->
                        let {
                          phase_new = mkReg__Reg__Int_32_idfn (mkTestBench_phase a) ;
                          cnt_new = mkReg__Reg__Int_32_idfn (mkTestBench_cnt a) ;
                        } in MkTestBench cnt_new phase_new)
  ;
  instance Eq MkTestBench where {
    (==) = (\a ->
              (\b ->
                 (&&) ((==) (mkTestBench_phase a) (mkTestBench_phase b)) ((==) (mkTestBench_cnt a) (mkTestBench_cnt b))));
    (/=) = (\a ->
              (\b ->
                 not ((==) a b)));
  }
  ;
  merge_p_mkTestBench :: MkTestBench -> MkTestBench -> MkTestBench;
  merge_p_mkTestBench = (\_a ->
                           (\_b ->
                              MkTestBench (merge_p_mkReg__Reg__Int_32 (mkTestBench_cnt _a) (mkTestBench_cnt _b)) (merge_p_mkReg__Reg__Int_32 (mkTestBench_phase _a) (mkTestBench_phase _b))))
  ;
  phase_upd__Void_mkTestBench :: (Reg Integer -> (Bool,
                                                  Reg Integer,
                                                  ())) -> MkTestBench -> (Bool, MkTestBench, ());
  phase_upd__Void_mkTestBench = (\a ->
                                   (\s ->
                                      let {
                                        tup = a (mkTestBench_phase s) ;
                                      } in (fst3 tup,
                                            __mkTestBench_phase_update (snd3 tup) s,
                                            trd3 tup)))
  ;
  cnt_upd__Void_mkTestBench :: (Reg Integer -> (Bool,
                                                Reg Integer,
                                                ())) -> MkTestBench -> (Bool, MkTestBench, ());
  cnt_upd__Void_mkTestBench = (\a ->
                                 (\s ->
                                    let {
                                      tup = a (mkTestBench_cnt s) ;
                                    } in (fst3 tup,
                                          __mkTestBench_cnt_update (snd3 tup) s,
                                          trd3 tup)))
  ;
  comp_s__Void__Void_mkTestBench :: (MkTestBench -> (Bool,
                                                     MkTestBench,
                                                     ())) -> (() -> MkTestBench -> (Bool,
                                                                                    MkTestBench,
                                                                                    ())) -> MkTestBench -> (Bool,
                                                                                                            MkTestBench,
                                                                                                            ());
  comp_s__Void__Void_mkTestBench = (\a1 ->
                                      (\a2 ->
                                         (\st ->
                                            let {
                                              a1_tup = a1 st ;
                                              a1_p = fst3 a1_tup ;
                                              a1_st = snd3 a1_tup ;
                                              a1_rv = trd3 a1_tup ;
                                              a2_tup = a2 a1_rv a1_st ;
                                              a2_p = fst3 a2_tup ;
                                              a2_st = snd3 a2_tup ;
                                              a2_rv = trd3 a2_tup ;
                                            } in ((&&) a1_p a2_p, a2_st, a2_rv))))
  ;
  comp_p__Void__Void_mkTestBench :: (MkTestBench -> (Bool,
                                                     MkTestBench,
                                                     ())) -> (() -> MkTestBench -> (Bool,
                                                                                    MkTestBench,
                                                                                    ())) -> MkTestBench -> (Bool,
                                                                                                            MkTestBench,
                                                                                                            ());
  comp_p__Void__Void_mkTestBench = (\a1 ->
                                      (\a2 ->
                                         (\st ->
                                            let {
                                              a1_tup = a1 st ;
                                              a1_p = fst3 a1_tup ;
                                              a1_st = snd3 a1_tup ;
                                              a1_rv = trd3 a1_tup ;
                                              a2_tup = a2 a1_rv st ;
                                              a2_p = fst3 a2_tup ;
                                              a2_st = snd3 a2_tup ;
                                              a2_rv = trd3 a2_tup ;
                                            } in ((&&) a1_p a2_p,
                                                  merge_p_mkTestBench a1_st a2_st,
                                                  a2_rv))))
  ;
  three_mkTestBench :: MkTestBench -> (Bool, MkTestBench, ());
  three_mkTestBench = (\st ->
                         let {
                           st = mkTestBench_clear_dirty_bits st ;
                           st = st ;
                           gv = (&&) (_read_guard_mkReg__Reg__Int_32 (mkTestBench_phase st)) ((&&) ((==) (_read_val_mkReg__Reg__Int_32 (mkTestBench_phase st)) 3) (_read_guard_mkReg__Reg__Int_32 (mkTestBench_cnt st))) ;
                           ov = comp_p__Void__Void_mkTestBench (phase_upd__Void_mkTestBench (_write_mkReg__Reg__Int_32 ((+) (_read_val_mkReg__Reg__Int_32 (mkTestBench_phase st)) 1))) ((\_ ->
                                                                                                                                                                                           (\st ->
                                                                                                                                                                                              cnt_upd__Void_mkTestBench (_write_mkReg__Reg__Int_32 ((*) (_read_val_mkReg__Reg__Int_32 (mkTestBench_cnt st)) 5)) st))) st ;
                         } in ((&&) gv (fst3 ov), snd3 ov, trd3 ov))
  ;
  two_mkTestBench :: MkTestBench -> (Bool, MkTestBench, ());
  two_mkTestBench = (\st ->
                       let {
                         st = mkTestBench_clear_dirty_bits st ;
                         st = st ;
                         gv = (&&) (_read_guard_mkReg__Reg__Int_32 (mkTestBench_phase st)) ((==) (_read_val_mkReg__Reg__Int_32 (mkTestBench_phase st)) 2) ;
                         ov = comp_s__Void__Void_mkTestBench ((\st ->
                                                                 let {
                                                                   gv = _read_guard_mkReg__Reg__Int_32 (mkTestBench_phase st) ;
                                                                   ov = phase_upd__Void_mkTestBench (_write_mkReg__Reg__Int_32 ((+) (_read_val_mkReg__Reg__Int_32 (mkTestBench_phase st)) 1)) st ;
                                                                 } in ((&&) gv (fst3 ov),
                                                                       snd3 ov,
                                                                       trd3 ov))) ((\_ ->
                                                                                      (\st ->
                                                                                         let {
                                                                                           st = st ;
                                                                                           gv = _read_guard_mkReg__Reg__Int_32 (mkTestBench_cnt st) ;
                                                                                           ov = cnt_upd__Void_mkTestBench (_write_mkReg__Reg__Int_32 ((-) (_read_val_mkReg__Reg__Int_32 (mkTestBench_cnt st)) 10)) st ;
                                                                                         } in ((&&) gv (fst3 ov),
                                                                                               snd3 ov,
                                                                                               trd3 ov)))) st ;
                       } in ((&&) gv (fst3 ov), snd3 ov, trd3 ov))
  ;
  one_mkTestBench :: MkTestBench -> (Bool, MkTestBench, ());
  one_mkTestBench = (\st ->
                       let {
                         st = mkTestBench_clear_dirty_bits st ;
                         st = st ;
                         gv = (&&) (_read_guard_mkReg__Reg__Int_32 (mkTestBench_phase st)) ((==) (_read_val_mkReg__Reg__Int_32 (mkTestBench_phase st)) 1) ;
                         ov = comp_s__Void__Void_mkTestBench ((\st ->
                                                                 let {
                                                                   gv = _read_guard_mkReg__Reg__Int_32 (mkTestBench_phase st) ;
                                                                   ov = phase_upd__Void_mkTestBench (_write_mkReg__Reg__Int_32 ((+) (_read_val_mkReg__Reg__Int_32 (mkTestBench_phase st)) 1)) st ;
                                                                 } in ((&&) gv (fst3 ov),
                                                                       snd3 ov,
                                                                       trd3 ov))) ((\_ ->
                                                                                      (\st ->
                                                                                         let {
                                                                                           st = st ;
                                                                                           gv = _read_guard_mkReg__Reg__Int_32 (mkTestBench_cnt st) ;
                                                                                           ov = cnt_upd__Void_mkTestBench (_write_mkReg__Reg__Int_32 ((*) (_read_val_mkReg__Reg__Int_32 (mkTestBench_cnt st)) 10)) st ;
                                                                                         } in ((&&) gv (fst3 ov),
                                                                                               snd3 ov,
                                                                                               trd3 ov)))) st ;
                       } in ((&&) gv (fst3 ov), snd3 ov, trd3 ov))
  ;
  zero_mkTestBench :: MkTestBench -> (Bool, MkTestBench, ());
  zero_mkTestBench = (\st ->
                        let {
                          st = mkTestBench_clear_dirty_bits st ;
                          st = st ;
                          gv = (&&) (_read_guard_mkReg__Reg__Int_32 (mkTestBench_phase st)) ((==) (_read_val_mkReg__Reg__Int_32 (mkTestBench_phase st)) 0) ;
                          ov = comp_s__Void__Void_mkTestBench ((\st ->
                                                                  let {
                                                                    gv = _read_guard_mkReg__Reg__Int_32 (mkTestBench_phase st) ;
                                                                    ov = phase_upd__Void_mkTestBench (_write_mkReg__Reg__Int_32 ((+) (_read_val_mkReg__Reg__Int_32 (mkTestBench_phase st)) 1)) st ;
                                                                  } in ((&&) gv (fst3 ov),
                                                                        snd3 ov,
                                                                        trd3 ov))) ((\_ ->
                                                                                       (\st ->
                                                                                          let {
                                                                                            st = st ;
                                                                                            gv = _read_guard_mkReg__Reg__Int_32 (mkTestBench_cnt st) ;
                                                                                            ov = cnt_upd__Void_mkTestBench (_write_mkReg__Reg__Int_32 ((+) (_read_val_mkReg__Reg__Int_32 (mkTestBench_cnt st)) 10)) st ;
                                                                                          } in ((&&) gv (fst3 ov),
                                                                                                snd3 ov,
                                                                                                trd3 ov)))) st ;
                        } in ((&&) gv (fst3 ov), snd3 ov, trd3 ov));


  main1 :: Query (Answer ());
  main1 = queryS (do {
                   s_equiv0_0 <- (free :: Query (Bool, MkTestBench, ()));
                   s_equiv0_1 <- return (let {
                                           tup = three_mkTestBench (snd3 s_equiv0_0) ;
                                         } in ((&&) (fst3 s_equiv0_0) (fst3 tup),
                                               snd3 tup,
                                               trd3 tup));
                   s_equiv0_2 <- return (let {
                                           tup = three_mkTestBench (snd3 s_equiv0_1) ;
                                         } in ((&&) (fst3 s_equiv0_1) (fst3 tup),
                                               snd3 tup,
                                               trd3 tup));
                   s_equiv1_0 <- (free :: Query (Bool, MkTestBench, ()));
                   s_equiv1_1 <- return (let {
                                           tup = three_mkTestBench (snd3 s_equiv1_0) ;
                                         } in ((&&) (fst3 s_equiv1_0) (fst3 tup),
                                               snd3 tup,
                                               trd3 tup));
                   s_equiv1_2 <- return (let {
                                           tup = three_mkTestBench (snd3 s_equiv1_1) ;
                                         } in ((&&) (fst3 s_equiv1_1) (fst3 tup),
                                               snd3 tup,
                                               trd3 tup));
                   (assert :: Bool -> Query ()) (True :: Bool);
                   (assert :: Bool -> Query ()) (mkTestBench_dimension mkTestBench_ctor (snd3 s_equiv0_0));
                   (assert :: Bool -> Query ()) (fst3 s_equiv0_0);
                   (assert :: Bool -> Query ()) (True :: Bool);
                   (assert :: Bool -> Query ()) (mkTestBench_dimension mkTestBench_ctor (snd3 s_equiv1_0));
                   (assert :: Bool -> Query ()) (fst3 s_equiv1_0);
                   (assert :: Bool -> Query ()) ((==) s_equiv0_0 s_equiv1_0);
                   (assert :: Bool -> Query ()) ((&&) (fst3 s_equiv0_2) ((||) (not (fst3 s_equiv1_2)) (not (mkTestBench_eq (snd3 s_equiv0_2) (snd3 s_equiv1_2)))));
                 });

  main2 :: Query (Answer ());
  main2 = queryS (do {
                   s_equiv0_0 <- (free :: Query (Bool, MkTestBench, ()));
                   s_equiv0_1 <- return (let {
                                           tup = three_mkTestBench (snd3 s_equiv0_0) ;
                                         } in ((&&) (fst3 s_equiv0_0) (fst3 tup),
                                               snd3 tup,
                                               trd3 tup));
                   s_equiv0_2 <- return (let {
                                           tup = two_mkTestBench (snd3 s_equiv0_1) ;
                                         } in ((&&) (fst3 s_equiv0_1) (fst3 tup),
                                               snd3 tup,
                                               trd3 tup));
                   s_equiv1_0 <- (free :: Query (Bool, MkTestBench, ()));
                   s_equiv1_1 <- return (let {
                                           tup = two_mkTestBench (snd3 s_equiv1_0) ;
                                         } in ((&&) (fst3 s_equiv1_0) (fst3 tup),
                                               snd3 tup,
                                               trd3 tup));
                   s_equiv1_2 <- return (let {
                                           tup = three_mkTestBench (snd3 s_equiv1_1) ;
                                         } in ((&&) (fst3 s_equiv1_1) (fst3 tup),
                                               snd3 tup,
                                               trd3 tup));
                   (assert :: Bool -> Query ()) (True :: Bool);
                   (assert :: Bool -> Query ()) (mkTestBench_dimension mkTestBench_ctor (snd3 s_equiv0_0));
                   (assert :: Bool -> Query ()) (fst3 s_equiv0_0);
                   (assert :: Bool -> Query ()) (True :: Bool);
                   (assert :: Bool -> Query ()) (mkTestBench_dimension mkTestBench_ctor (snd3 s_equiv1_0));
                   (assert :: Bool -> Query ()) (fst3 s_equiv1_0);
                   (assert :: Bool -> Query ()) ((==) s_equiv0_0 s_equiv1_0);
                   (assert :: Bool -> Query ()) ((&&) (fst3 s_equiv0_2) ((||) (not (fst3 s_equiv1_2)) (not (mkTestBench_eq (snd3 s_equiv0_2) (snd3 s_equiv1_2)))));
                 }) ;

  main3 :: Query (Answer ());
  main3 = queryS (do {
                   s_equiv0_0 <- (free :: Query (Bool, MkTestBench, ()));
                   s_equiv0_1 <- return (let {
                                           tup = three_mkTestBench (snd3 s_equiv0_0) ;
                                         } in ((&&) (fst3 s_equiv0_0) (fst3 tup),
                                               snd3 tup,
                                               trd3 tup));
                   s_equiv0_2 <- return (let {
                                           tup = one_mkTestBench (snd3 s_equiv0_1) ;
                                         } in ((&&) (fst3 s_equiv0_1) (fst3 tup),
                                               snd3 tup,
                                               trd3 tup));
                   s_equiv1_0 <- (free :: Query (Bool, MkTestBench, ()));
                   s_equiv1_1 <- return (let {
                                           tup = one_mkTestBench (snd3 s_equiv1_0) ;
                                         } in ((&&) (fst3 s_equiv1_0) (fst3 tup),
                                               snd3 tup,
                                               trd3 tup));
                   s_equiv1_2 <- return (let {
                                           tup = three_mkTestBench (snd3 s_equiv1_1) ;
                                         } in ((&&) (fst3 s_equiv1_1) (fst3 tup),
                                               snd3 tup,
                                               trd3 tup));
                   (assert :: Bool -> Query ()) (True :: Bool);
                   (assert :: Bool -> Query ()) (mkTestBench_dimension mkTestBench_ctor (snd3 s_equiv0_0));
                   (assert :: Bool -> Query ()) (fst3 s_equiv0_0);
                   (assert :: Bool -> Query ()) (True :: Bool);
                   (assert :: Bool -> Query ()) (mkTestBench_dimension mkTestBench_ctor (snd3 s_equiv1_0));
                   (assert :: Bool -> Query ()) (fst3 s_equiv1_0);
                   (assert :: Bool -> Query ()) ((==) s_equiv0_0 s_equiv1_0);
                   (assert :: Bool -> Query ()) ((&&) (fst3 s_equiv0_2) ((||) (not (fst3 s_equiv1_2)) (not (mkTestBench_eq (snd3 s_equiv0_2) (snd3 s_equiv1_2)))));
                 });

  main4 :: Query (Answer ());
  main4 = queryS (do {
                   s_equiv0_0 <- (free :: Query (Bool, MkTestBench, ()));
                   s_equiv0_1 <- return (let {
                                           tup = three_mkTestBench (snd3 s_equiv0_0) ;
                                         } in ((&&) (fst3 s_equiv0_0) (fst3 tup),
                                               snd3 tup,
                                               trd3 tup));
                   s_equiv0_2 <- return (let {
                                           tup = zero_mkTestBench (snd3 s_equiv0_1) ;
                                         } in ((&&) (fst3 s_equiv0_1) (fst3 tup),
                                               snd3 tup,
                                               trd3 tup));
                   s_equiv1_0 <- (free :: Query (Bool, MkTestBench, ()));
                   s_equiv1_1 <- return (let {
                                           tup = zero_mkTestBench (snd3 s_equiv1_0) ;
                                         } in ((&&) (fst3 s_equiv1_0) (fst3 tup),
                                               snd3 tup,
                                               trd3 tup));
                   s_equiv1_2 <- return (let {
                                           tup = three_mkTestBench (snd3 s_equiv1_1) ;
                                         } in ((&&) (fst3 s_equiv1_1) (fst3 tup),
                                               snd3 tup,
                                               trd3 tup));
                   (assert :: Bool -> Query ()) (True :: Bool);
                   (assert :: Bool -> Query ()) (mkTestBench_dimension mkTestBench_ctor (snd3 s_equiv0_0));
                   (assert :: Bool -> Query ()) (fst3 s_equiv0_0);
                   (assert :: Bool -> Query ()) (True :: Bool);
                   (assert :: Bool -> Query ()) (mkTestBench_dimension mkTestBench_ctor (snd3 s_equiv1_0));
                   (assert :: Bool -> Query ()) (fst3 s_equiv1_0);
                   (assert :: Bool -> Query ()) ((==) s_equiv0_0 s_equiv1_0);
                   (assert :: Bool -> Query ()) ((&&) (fst3 s_equiv0_2) ((||) (not (fst3 s_equiv1_2)) (not (mkTestBench_eq (snd3 s_equiv0_2) (snd3 s_equiv1_2)))));
                 });

  main :: Query (Answer ());
  main = do {
    main1;
    main2;
    main3;
    main4;
  };

}
