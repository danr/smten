
module Seri.SMT.Tests.Bit where

import Seri.Lib.Prelude
import Seri.Lib.Bit
import Seri.SMT.SMT
import Seri.IO.IO
import Seri.IO.SMT

bityx :: Bit #(2+3)
bityx = 15

qmain :: Query (Answer (Bit#3, Bit #2, Bit #3))
qmain = do
    -- x is 'b111
    x <- free
    assert (((x :: Bit #3) + 1) == 0)

    -- y is 'b01
    y <- free
    assert (bv_concat y x == bityx)

    -- z is 'b011
    z <- free
    assert (z == bv_extract bityx 2)

    query (x, y, z)

main :: IO ()
main = do
    putStr "yices1..."
    r1 <- runYices1 (Just "build/test/Bit.yices1.dbg") qmain
    putStrLn (show r1)

    putStr "yices2..."
    r2 <- runYices2 (Just "build/test/Bit.yices2.dbg") qmain
    putStrLn (show r2)

    putStr "stp..."
    r3 <- runSTP (Just "build/test/Bit.stp.dbg") qmain
    putStrLn (show r3)

